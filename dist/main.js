/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={757:(e,t,n)=>{e.exports=n(666)},679:(e,t,n)=>{"use strict";var r=n(864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var l=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,h=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var i=p(n);i&&i!==d&&e(t,i,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var s=u(t),g=u(n),m=0;m<a.length;++m){var v=a[m];if(!(o[v]||r&&r[v]||g&&g[v]||s&&s[v])){var y=h(n,v);try{l(t,v,y)}catch(e){}}}}return t}},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,s,u=i(e),l=1;l<arguments.length;l++){for(var c in a=Object(arguments[l]))n.call(a,c)&&(u[c]=a[c]);if(t){s=t(a);for(var f=0;f<s.length;f++)r.call(a,s[f])&&(u[s[f]]=a[s[f]])}}return u}},703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},697:(e,t,n)=>{e.exports=n(703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},448:(e,t,n)=>{"use strict";var r=n(294),i=n(418),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,u={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),h=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,d={},g={};function m(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var i=v.hasOwnProperty(t)?v[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!p.call(g,e)||!p.call(d,e)&&(h.test(e)?g[e]=!0:(d[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,E=60106,x=60107,I=60108,C=60114,T=60109,_=60110,O=60112,N=60113,P=60120,A=60115,L=60116,R=60121,D=60128,j=60129,M=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var U=Symbol.for;S=U("react.element"),E=U("react.portal"),x=U("react.fragment"),I=U("react.strict_mode"),C=U("react.profiler"),T=U("react.provider"),_=U("react.context"),O=U("react.forward_ref"),N=U("react.suspense"),P=U("react.suspense_list"),A=U("react.memo"),L=U("react.lazy"),R=U("react.block"),U("react.scope"),D=U("react.opaque.id"),j=U("react.debug_trace_mode"),M=U("react.offscreen"),F=U("react.legacy_hidden")}var z,V="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function B(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var W=!1;function $(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function q(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 22:return $(e.type._render,!1);case 1:return $(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case E:return"Portal";case C:return"Profiler";case I:return"StrictMode";case N:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case _:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return K(e.type);case R:return K(e._render);case L:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}function G(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function J(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=G(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=G(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,G(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+G(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:G(n)}}function le(e,t){var n=G(t.value),r=G(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function he(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?he(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var de,ge,me=(ge=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((de=de||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=de.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function ke(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Se=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function xe(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ie(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Te=null,_e=null;function Oe(e){if(e=Qr(e)){if("function"!=typeof Ce)throw Error(a(280));var t=e.stateNode;t&&(t=ei(t),Ce(e.stateNode,e.type,t))}}function Ne(e){Te?_e?_e.push(e):_e=[e]:Te=e}function Pe(){if(Te){var e=Te,t=_e;if(_e=Te=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Ae(e,t){return e(t)}function Le(e,t,n,r,i){return e(t,n,r,i)}function Re(){}var De=Ae,je=!1,Me=!1;function Fe(){null===Te&&null===_e||(Re(),Pe())}function Ue(e,t){var n=e.stateNode;if(null===n)return null;var r=ei(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var ze=!1;if(f)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(ge){ze=!1}function He(e,t,n,r,i,o,a,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var Be=!1,We=null,$e=!1,qe=null,Ke={onError:function(e){Be=!0,We=e}};function Ge(e,t,n,r,i,o,a,s,u){Be=!1,We=null,He.apply(Ke,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Je(e){if(Xe(e)!==e)throw Error(a(188))}function Qe(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Ze,et,tt,nt,rt=!1,it=[],ot=null,at=null,st=null,ut=new Map,lt=new Map,ct=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":ot=null;break;case"dragenter":case"dragleave":at=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":lt.delete(t.pointerId)}}function dt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=ht(t,n,r,i,o),null!==t&&null!==(t=Qr(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function gt(e){var t=Jr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function mt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Qr(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function vt(e,t,n){mt(e)&&n.delete(t)}function yt(){for(rt=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Qr(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==ot&&mt(ot)&&(ot=null),null!==at&&mt(at)&&(at=null),null!==st&&mt(st)&&(st=null),ut.forEach(vt),lt.forEach(vt)}function bt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,yt)))}function wt(e){function t(t){return bt(t,e)}if(0<it.length){bt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ot&&bt(ot,e),null!==at&&bt(at,e),null!==st&&bt(st,e),ut.forEach(t),lt.forEach(t),n=0;n<ct.length;n++)(r=ct[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ct.length&&null===(n=ct[0]).blockedOn;)gt(n),null===n.blockedOn&&ct.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},Et={},xt={};function It(e){if(Et[e])return Et[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in xt)return Et[e]=n[t];return e}f&&(xt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ct=It("animationend"),Tt=It("animationiteration"),_t=It("animationstart"),Ot=It("transitionend"),Nt=new Map,Pt=new Map,At=["abort","abort",Ct,"animationEnd",Tt,"animationIteration",_t,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ot,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Pt.set(r,t),Nt.set(r,i),l(i,[r])}}(0,o.unstable_now)();var Rt=8;function Dt(e){if(0!=(1&e))return Rt=15,1;if(0!=(2&e))return Rt=14,2;if(0!=(4&e))return Rt=13,4;var t=24&e;return 0!==t?(Rt=12,t):0!=(32&e)?(Rt=11,32):0!=(t=192&e)?(Rt=10,t):0!=(256&e)?(Rt=9,256):0!=(t=3584&e)?(Rt=8,t):0!=(4096&e)?(Rt=7,4096):0!=(t=4186112&e)?(Rt=6,t):0!=(t=62914560&e)?(Rt=5,t):67108864&e?(Rt=4,67108864):0!=(134217728&e)?(Rt=3,134217728):0!=(t=805306368&e)?(Rt=2,t):0!=(1073741824&e)?(Rt=1,1073741824):(Rt=8,e)}function jt(e,t){var n=e.pendingLanes;if(0===n)return Rt=0;var r=0,i=0,o=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==o)r=o,i=Rt=15;else if(0!=(o=134217727&n)){var u=o&~a;0!==u?(r=Dt(u),i=Rt):0!=(s&=o)&&(r=Dt(s),i=Rt)}else 0!=(o=n&~a)?(r=Dt(o),i=Rt):0!==s&&(r=Dt(s),i=Rt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Dt(t),i<=Rt)return t;Rt=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Ht(t)),r|=e[n],t&=~i;return r}function Mt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ut(24&~t))?Ft(10,t):e;case 10:return 0===(e=Ut(192&~t))?Ft(8,t):e;case 8:return 0===(e=Ut(3584&~t))&&0===(e=Ut(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ut(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Ut(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Vt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Bt(e)/Wt|0)|0},Bt=Math.log,Wt=Math.LN2,$t=o.unstable_UserBlockingPriority,qt=o.unstable_runWithPriority,Kt=!0;function Gt(e,t,n,r){je||Re();var i=Yt,o=je;je=!0;try{Le(i,e,t,n,r)}finally{(je=o)||Fe()}}function Xt(e,t,n,r){qt($t,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){var i;if(Kt)if((i=0==(4&t))&&0<it.length&&-1<ft.indexOf(e))e=ht(null,e,t,n,r),it.push(e);else{var o=Jt(e,t,n,r);if(null===o)i&&pt(e,r);else{if(i){if(-1<ft.indexOf(e))return e=ht(o,e,t,n,r),void it.push(e);if(function(e,t,n,r,i){switch(t){case"focusin":return ot=dt(ot,e,t,n,r,i),!0;case"dragenter":return at=dt(at,e,t,n,r,i),!0;case"mouseover":return st=dt(st,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return ut.set(o,dt(ut.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,lt.set(o,dt(lt.get(o)||null,e,t,n,r,i)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Nr(e,t,r,null,n)}}}function Jt(e,t,n,r){var i=Ie(r);if(null!==(i=Jr(i))){var o=Xe(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Ye(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Nr(e,t,r,i,n),null}var Qt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,i="value"in Qt?Qt.value:Qt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return en=i.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function on(){return!1}function an(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?rn:on,this.isPropagationStopped=on,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var sn,un,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(cn),hn=i({},cn,{view:0,detail:0}),pn=an(hn),dn=i({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:In,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(sn=e.screenX-ln.screenX,un=e.screenY-ln.screenY):un=sn=0,ln=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),gn=an(dn),mn=an(i({},dn,{dataTransfer:0})),vn=an(i({},hn,{relatedTarget:0})),yn=an(i({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=an(i({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=an(i({},cn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},En={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=En[e])&&!!t[e]}function In(){return xn}var Cn=an(i({},hn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:In,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Tn=an(i({},dn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=an(i({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:In})),On=an(i({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=an(i({},dn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Pn=[9,13,27,32],An=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var Rn=f&&"TextEvent"in window&&!Ln,Dn=f&&(!An||Ln&&8<Ln&&11>=Ln),jn=String.fromCharCode(32),Mn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Pn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var zn=!1,Vn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Vn[e.type]:"textarea"===t}function Bn(e,t,n,r){Ne(r),0<(t=Ar(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Wn=null,$n=null;function qn(e){xr(e,0)}function Kn(e){if(J(Zr(e)))return e}function Gn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Yn;if(f){var Jn="oninput"in document;if(!Jn){var Qn=document.createElement("div");Qn.setAttribute("oninput","return;"),Jn="function"==typeof Qn.oninput}Yn=Jn}else Yn=!1;Xn=Yn&&(!document.documentMode||9<document.documentMode)}function Zn(){Wn&&(Wn.detachEvent("onpropertychange",er),$n=Wn=null)}function er(e){if("value"===e.propertyName&&Kn($n)){var t=[];if(Bn(t,$n,e,Ie(e)),e=qn,je)e(t);else{je=!0;try{Ae(e,t)}finally{je=!1,Fe()}}}}function tr(e,t,n){"focusin"===e?(Zn(),$n=n,(Wn=t).attachEvent("onpropertychange",er)):"focusout"===e&&Zn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn($n)}function rr(e,t){if("click"===e)return Kn(t)}function ir(e,t){if("input"===e||"change"===e)return Kn(t)}var or="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ar=Object.prototype.hasOwnProperty;function sr(e,t){if(or(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ar.call(t,n[r])||!or(e[n[r]],t[n[r]]))return!1;return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function lr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function cr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?cr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=f&&"documentMode"in document&&11>=document.documentMode,dr=null,gr=null,mr=null,vr=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==dr||dr!==Q(r)||(r="selectionStart"in(r=dr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},mr&&sr(mr,r)||(mr=r,0<(r=Ar(gr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=dr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(At,2);for(var br="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<br.length;wr++)Pt.set(br[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var kr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(kr));function Er(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,u,l){if(Ge.apply(this,arguments),Be){if(!Be)throw Error(a(198));var c=We;Be=!1,We=null,$e||($e=!0,qe=c)}}(r,t,void 0,e),e.currentTarget=null}function xr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],u=s.instance,l=s.currentTarget;if(s=s.listener,u!==o&&i.isPropagationStopped())break e;Er(i,s,l),o=u}else for(a=0;a<r.length;a++){if(u=(s=r[a]).instance,l=s.currentTarget,s=s.listener,u!==o&&i.isPropagationStopped())break e;Er(i,s,l),o=u}}}if($e)throw e=qe,$e=!1,qe=null,e}function Ir(e,t){var n=ti(t),r=e+"__bubble";n.has(r)||(Or(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Tr(e){e[Cr]||(e[Cr]=!0,s.forEach((function(t){Sr.has(t)||_r(t,!1,e,null),_r(t,!0,e,null)})))}function _r(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;i|=2,o=r}var a=ti(o),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(i|=4),Or(o,e,i,t),a.add(s))}function Or(e,t,n,r){var i=Pt.get(t);switch(void 0===i?2:i){case 0:i=Gt;break;case 1:i=Xt;break;default:i=Yt}n=i.bind(null,t,n,e),i=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===i||8===u.nodeType&&u.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=Jr(s)))return;if(5===(u=a.tag)||6===u){r=o=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Me)return e();Me=!0;try{De(e,t,n)}finally{Me=!1,Fe()}}((function(){var r=o,i=Ie(n),a=[];e:{var s=Nt.get(e);if(void 0!==s){var u=fn,l=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":l="focus",u=vn;break;case"focusout":l="blur",u=vn;break;case"beforeblur":case"afterblur":u=vn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=_n;break;case Ct:case Tt:case _t:u=yn;break;case Ot:u=On;break;case"scroll":u=pn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var c=0!=(4&t),f=!c&&"scroll"===e,h=c?null!==s?s+"Capture":null:s;c=[];for(var p,d=r;null!==d;){var g=(p=d).stateNode;if(5===p.tag&&null!==g&&(p=g,null!==h&&null!=(g=Ue(d,h))&&c.push(Pr(d,g,p))),f)break;d=d.return}0<c.length&&(s=new u(s,l,null,n,i),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(l=n.relatedTarget||n.fromElement)||!Jr(l)&&!l[Xr])&&(u||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(l=(l=n.relatedTarget||n.toElement)?Jr(l):null)&&(l!==(f=Xe(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(u=null,l=r),u!==l)){if(c=gn,g="onMouseLeave",h="onMouseEnter",d="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,g="onPointerLeave",h="onPointerEnter",d="pointer"),f=null==u?s:Zr(u),p=null==l?s:Zr(l),(s=new c(g,d+"leave",u,n,i)).target=f,s.relatedTarget=p,g=null,Jr(i)===r&&((c=new c(h,d+"enter",l,n,i)).target=p,c.relatedTarget=f,g=c),f=g,u&&l)e:{for(h=l,d=0,p=c=u;p;p=Lr(p))d++;for(p=0,g=h;g;g=Lr(g))p++;for(;0<d-p;)c=Lr(c),d--;for(;0<p-d;)h=Lr(h),p--;for(;d--;){if(c===h||null!==h&&c===h.alternate)break e;c=Lr(c),h=Lr(h)}c=null}else c=null;null!==u&&Rr(a,s,u,c,!1),null!==l&&null!==f&&Rr(a,f,l,c,!0)}if("select"===(u=(s=r?Zr(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var m=Gn;else if(Hn(s))if(Xn)m=ir;else{m=nr;var v=tr}else(u=s.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=rr);switch(m&&(m=m(e,r))?Bn(a,m,n,i):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ie(s,"number",s.value)),v=r?Zr(r):window,e){case"focusin":(Hn(v)||"true"===v.contentEditable)&&(dr=v,gr=r,mr=null);break;case"focusout":mr=gr=dr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,yr(a,n,i);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(a,n,i)}var y;if(An)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else zn?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Dn&&"ko"!==n.locale&&(zn||"onCompositionStart"!==b?"onCompositionEnd"===b&&zn&&(y=tn()):(Zt="value"in(Qt=i)?Qt.value:Qt.textContent,zn=!0)),0<(v=Ar(r,b)).length&&(b=new wn(b,e,null,n,i),a.push({event:b,listeners:v}),(y||null!==(y=Un(n)))&&(b.data=y))),(y=Rn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Mn=!0,jn);case"textInput":return(e=t.data)===jn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(zn)return"compositionend"===e||!An&&Fn(e,t)?(e=tn(),en=Zt=Qt=null,zn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Dn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Ar(r,"onBeforeInput")).length&&(i=new wn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=y)}xr(a,t)}))}function Pr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ar(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Ue(e,n))&&r.unshift(Pr(e,o,i)),null!=(o=Ue(e,t))&&r.push(Pr(e,o,i))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Rr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,u=s.alternate,l=s.stateNode;if(null!==u&&u===r)break;5===s.tag&&null!==l&&(s=l,i?null!=(u=Ue(n,o))&&a.unshift(Pr(n,u,s)):i||null!=(u=Ue(n,o))&&a.push(Pr(n,u,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Dr(){}var jr=null,Mr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ur(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var zr="function"==typeof setTimeout?setTimeout:void 0,Vr="function"==typeof clearTimeout?clearTimeout:void 0;function Hr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Br(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Wr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var $r=0,qr=Math.random().toString(36).slice(2),Kr="__reactFiber$"+qr,Gr="__reactProps$"+qr,Xr="__reactContainer$"+qr,Yr="__reactEvents$"+qr;function Jr(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Wr(e);null!==e;){if(n=e[Kr])return n;e=Wr(e)}return t}n=(e=n).parentNode}return null}function Qr(e){return!(e=e[Kr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Zr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ei(e){return e[Gr]||null}function ti(e){var t=e[Yr];return void 0===t&&(t=e[Yr]=new Set),t}var ni=[],ri=-1;function ii(e){return{current:e}}function oi(e){0>ri||(e.current=ni[ri],ni[ri]=null,ri--)}function ai(e,t){ri++,ni[ri]=e.current,e.current=t}var si={},ui=ii(si),li=ii(!1),ci=si;function fi(e,t){var n=e.type.contextTypes;if(!n)return si;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function hi(e){return null!=e.childContextTypes}function pi(){oi(li),oi(ui)}function di(e,t,n){if(ui.current!==si)throw Error(a(168));ai(ui,t),ai(li,n)}function gi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,K(t)||"Unknown",o));return i({},n,r)}function mi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||si,ci=ui.current,ai(ui,e),ai(li,li.current),!0}function vi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=gi(e,t,ci),r.__reactInternalMemoizedMergedChildContext=e,oi(li),oi(ui),ai(ui,e)):oi(li),ai(li,n)}var yi=null,bi=null,wi=o.unstable_runWithPriority,ki=o.unstable_scheduleCallback,Si=o.unstable_cancelCallback,Ei=o.unstable_shouldYield,xi=o.unstable_requestPaint,Ii=o.unstable_now,Ci=o.unstable_getCurrentPriorityLevel,Ti=o.unstable_ImmediatePriority,_i=o.unstable_UserBlockingPriority,Oi=o.unstable_NormalPriority,Ni=o.unstable_LowPriority,Pi=o.unstable_IdlePriority,Ai={},Li=void 0!==xi?xi:function(){},Ri=null,Di=null,ji=!1,Mi=Ii(),Fi=1e4>Mi?Ii:function(){return Ii()-Mi};function Ui(){switch(Ci()){case Ti:return 99;case _i:return 98;case Oi:return 97;case Ni:return 96;case Pi:return 95;default:throw Error(a(332))}}function zi(e){switch(e){case 99:return Ti;case 98:return _i;case 97:return Oi;case 96:return Ni;case 95:return Pi;default:throw Error(a(332))}}function Vi(e,t){return e=zi(e),wi(e,t)}function Hi(e,t,n){return e=zi(e),ki(e,t,n)}function Bi(){if(null!==Di){var e=Di;Di=null,Si(e)}Wi()}function Wi(){if(!ji&&null!==Ri){ji=!0;var e=0;try{var t=Ri;Vi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ri=null}catch(t){throw null!==Ri&&(Ri=Ri.slice(e+1)),ki(Ti,Bi),t}finally{ji=!1}}}var $i=k.ReactCurrentBatchConfig;function qi(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ki=ii(null),Gi=null,Xi=null,Yi=null;function Ji(){Yi=Xi=Gi=null}function Qi(e){var t=Ki.current;oi(Ki),e.type._context._currentValue=t}function Zi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function eo(e,t){Gi=e,Yi=Xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Aa=!0),e.firstContext=null)}function to(e,t){if(Yi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Yi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xi){if(null===Gi)throw Error(a(308));Xi=t,Gi.dependencies={lanes:0,firstContext:t,responders:null}}else Xi=Xi.next=t;return e._currentValue}var no=!1;function ro(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function io(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function oo(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ao(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function so(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function uo(e,t,n,r){var o=e.updateQueue;no=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var l=u,c=l.next;l.next=null,null===s?a=c:s.next=c,s=l;var f=e.alternate;if(null!==f){var h=(f=f.updateQueue).lastBaseUpdate;h!==s&&(null===h?f.firstBaseUpdate=c:h.next=c,f.lastBaseUpdate=l)}}if(null!==a){for(h=o.baseState,s=0,f=c=l=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var d=e,g=a;switch(u=t,p=n,g.tag){case 1:if("function"==typeof(d=g.payload)){h=d.call(p,h,u);break e}h=d;break e;case 3:d.flags=-4097&d.flags|64;case 0:if(null==(u="function"==typeof(d=g.payload)?d.call(p,h,u):d))break e;h=i({},h,u);break e;case 2:no=!0}}null!==a.callback&&(e.flags|=32,null===(u=o.effects)?o.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,l=h):f=f.next=p,s|=u;if(null===(a=a.next)){if(null===(u=o.shared.pending))break;a=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===f&&(l=h),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=f,Rs|=s,e.lanes=s,e.memoizedState=h}}function lo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var co=(new r.Component).refs;function fo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ho={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ou(),i=au(e),o=oo(r,i);o.payload=t,null!=n&&(o.callback=n),ao(e,o),su(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ou(),i=au(e),o=oo(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),ao(e,o),su(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ou(),r=au(e),i=oo(n,r);i.tag=2,null!=t&&(i.callback=t),ao(e,i),su(e,r,n)}};function po(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(i,o))}function go(e,t,n){var r=!1,i=si,o=t.contextType;return"object"==typeof o&&null!==o?o=to(o):(i=hi(t)?ci:ui.current,o=(r=null!=(r=t.contextTypes))?fi(e,i):si),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ho,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function mo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ho.enqueueReplaceState(t,t.state,null)}function vo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=co,ro(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=to(o):(o=hi(t)?ci:ui.current,i.context=fi(e,o)),uo(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(fo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&ho.enqueueReplaceState(i,i.state,null),uo(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var yo=Array.isArray;function bo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===co&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function wo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function ko(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Mu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Vu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=bo(e,t,n),r.return=e,r):((r=Fu(n.type,n.key,n.props,null,e.mode,r)).ref=bo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Uu(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Vu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Fu(t.type,t.key,t.props,null,e.mode,n)).ref=bo(e,null,t),n.return=e,n;case E:return(t=Hu(t,e.mode,n)).return=e,t}if(yo(t)||H(t))return(t=Uu(t,e.mode,n,null)).return=e,t;wo(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===i?n.type===x?f(e,t,n.props.children,r,i):l(e,t,n,r):null;case E:return n.key===i?c(e,t,n,r):null}if(yo(n)||H(n))return null!==i?null:f(e,t,n,r,null);wo(e,n)}return null}function d(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===x?f(t,e,r.props.children,i,r.key):l(t,e,r,i);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(yo(r)||H(r))return f(t,e=e.get(n)||null,r,i,null);wo(t,r)}return null}function g(i,a,s,u){for(var l=null,c=null,f=a,g=a=0,m=null;null!==f&&g<s.length;g++){f.index>g?(m=f,f=null):m=f.sibling;var v=p(i,f,s[g],u);if(null===v){null===f&&(f=m);break}e&&f&&null===v.alternate&&t(i,f),a=o(v,a,g),null===c?l=v:c.sibling=v,c=v,f=m}if(g===s.length)return n(i,f),l;if(null===f){for(;g<s.length;g++)null!==(f=h(i,s[g],u))&&(a=o(f,a,g),null===c?l=f:c.sibling=f,c=f);return l}for(f=r(i,f);g<s.length;g++)null!==(m=d(f,i,g,s[g],u))&&(e&&null!==m.alternate&&f.delete(null===m.key?g:m.key),a=o(m,a,g),null===c?l=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(i,e)})),l}function m(i,s,u,l){var c=H(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,g=s,m=s=0,v=null,y=u.next();null!==g&&!y.done;m++,y=u.next()){g.index>m?(v=g,g=null):v=g.sibling;var b=p(i,g,y.value,l);if(null===b){null===g&&(g=v);break}e&&g&&null===b.alternate&&t(i,g),s=o(b,s,m),null===f?c=b:f.sibling=b,f=b,g=v}if(y.done)return n(i,g),c;if(null===g){for(;!y.done;m++,y=u.next())null!==(y=h(i,y.value,l))&&(s=o(y,s,m),null===f?c=y:f.sibling=y,f=y);return c}for(g=r(i,g);!y.done;m++,y=u.next())null!==(y=d(g,i,m,y.value,l))&&(e&&null!==y.alternate&&g.delete(null===y.key?m:y.key),s=o(y,s,m),null===f?c=y:f.sibling=y,f=y);return e&&g.forEach((function(e){return t(i,e)})),c}return function(e,r,o,u){var l="object"==typeof o&&null!==o&&o.type===x&&null===o.key;l&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case S:e:{for(c=o.key,l=r;null!==l;){if(l.key===c){switch(l.tag){case 7:if(o.type===x){n(e,l.sibling),(r=i(l,o.props.children)).return=e,e=r;break e}break;default:if(l.elementType===o.type){n(e,l.sibling),(r=i(l,o.props)).ref=bo(e,l,o),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}o.type===x?((r=Uu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Fu(o.type,o.key,o.props,null,e.mode,u)).ref=bo(e,r,o),u.return=e,e=u)}return s(e);case E:e:{for(l=o.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hu(o,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Vu(o,e.mode,u)).return=e,e=r),s(e);if(yo(o))return g(e,r,o,u);if(H(o))return m(e,r,o,u);if(c&&wo(e,o),void 0===o&&!l)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,K(e.type)||"Component"))}return n(e,r)}}var So=ko(!0),Eo=ko(!1),xo={},Io=ii(xo),Co=ii(xo),To=ii(xo);function _o(e){if(e===xo)throw Error(a(174));return e}function Oo(e,t){switch(ai(To,t),ai(Co,e),ai(Io,xo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}oi(Io),ai(Io,t)}function No(){oi(Io),oi(Co),oi(To)}function Po(e){_o(To.current);var t=_o(Io.current),n=pe(t,e.type);t!==n&&(ai(Co,e),ai(Io,n))}function Ao(e){Co.current===e&&(oi(Io),oi(Co))}var Lo=ii(0);function Ro(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Do=null,jo=null,Mo=!1;function Fo(e,t){var n=Du(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Uo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function zo(e){if(Mo){var t=jo;if(t){var n=t;if(!Uo(e,t)){if(!(t=Br(n.nextSibling))||!Uo(e,t))return e.flags=-1025&e.flags|2,Mo=!1,void(Do=e);Fo(Do,n)}Do=e,jo=Br(t.firstChild)}else e.flags=-1025&e.flags|2,Mo=!1,Do=e}}function Vo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Do=e}function Ho(e){if(e!==Do)return!1;if(!Mo)return Vo(e),Mo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ur(t,e.memoizedProps))for(t=jo;t;)Fo(e,t),t=Br(t.nextSibling);if(Vo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){jo=Br(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}jo=null}}else jo=Do?Br(e.stateNode.nextSibling):null;return!0}function Bo(){jo=Do=null,Mo=!1}var Wo=[];function $o(){for(var e=0;e<Wo.length;e++)Wo[e]._workInProgressVersionPrimary=null;Wo.length=0}var qo=k.ReactCurrentDispatcher,Ko=k.ReactCurrentBatchConfig,Go=0,Xo=null,Yo=null,Jo=null,Qo=!1,Zo=!1;function ea(){throw Error(a(321))}function ta(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!or(e[n],t[n]))return!1;return!0}function na(e,t,n,r,i,o){if(Go=o,Xo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qo.current=null===e||null===e.memoizedState?_a:Oa,e=n(r,i),Zo){o=0;do{if(Zo=!1,!(25>o))throw Error(a(301));o+=1,Jo=Yo=null,t.updateQueue=null,qo.current=Na,e=n(r,i)}while(Zo)}if(qo.current=Ta,t=null!==Yo&&null!==Yo.next,Go=0,Jo=Yo=Xo=null,Qo=!1,t)throw Error(a(300));return e}function ra(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Jo?Xo.memoizedState=Jo=e:Jo=Jo.next=e,Jo}function ia(){if(null===Yo){var e=Xo.alternate;e=null!==e?e.memoizedState:null}else e=Yo.next;var t=null===Jo?Xo.memoizedState:Jo.next;if(null!==t)Jo=t,Yo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Yo=e).memoizedState,baseState:Yo.baseState,baseQueue:Yo.baseQueue,queue:Yo.queue,next:null},null===Jo?Xo.memoizedState=Jo=e:Jo=Jo.next=e}return Jo}function oa(e,t){return"function"==typeof t?t(e):t}function aa(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Yo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var u=s=o=null,l=i;do{var c=l.lane;if((Go&c)===c)null!==u&&(u=u.next={lane:0,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),r=l.eagerReducer===e?l.eagerState:e(r,l.action);else{var f={lane:c,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=f,o=r):u=u.next=f,Xo.lanes|=c,Rs|=c}l=l.next}while(null!==l&&l!==i);null===u?o=r:u.next=s,or(r,t.memoizedState)||(Aa=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function sa(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);or(o,t.memoizedState)||(Aa=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ua(e,t,n){var r=t._getVersion;r=r(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(Go&e)===e)&&(t._workInProgressVersionPrimary=r,Wo.push(t))),e)return n(t._source);throw Wo.push(t),Error(a(350))}function la(e,t,n,r){var i=Cs;if(null===i)throw Error(a(349));var o=t._getVersion,s=o(t._source),u=qo.current,l=u.useState((function(){return ua(i,t,n)})),c=l[1],f=l[0];l=Jo;var h=e.memoizedState,p=h.refs,d=p.getSnapshot,g=h.source;h=h.subscribe;var m=Xo;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=o(t._source);if(!or(s,e)){e=n(t._source),or(f,e)||(c(e),e=au(m),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,a=e;0<a;){var u=31-Ht(a),l=1<<u;r[u]|=e,a&=~l}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=au(m);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),or(d,n)&&or(g,t)&&or(h,r)||((e={pending:null,dispatch:null,lastRenderedReducer:oa,lastRenderedState:f}).dispatch=c=Ca.bind(null,Xo,e),l.queue=e,l.baseQueue=null,f=ua(i,t,n),l.memoizedState=l.baseState=f),f}function ca(e,t,n){return la(ia(),e,t,n)}function fa(e){var t=ra();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:oa,lastRenderedState:e}).dispatch=Ca.bind(null,Xo,e),[t.memoizedState,e]}function ha(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Xo.updateQueue)?(t={lastEffect:null},Xo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pa(e){return e={current:e},ra().memoizedState=e}function da(){return ia().memoizedState}function ga(e,t,n,r){var i=ra();Xo.flags|=e,i.memoizedState=ha(1|t,n,void 0,void 0===r?null:r)}function ma(e,t,n,r){var i=ia();r=void 0===r?null:r;var o=void 0;if(null!==Yo){var a=Yo.memoizedState;if(o=a.destroy,null!==r&&ta(r,a.deps))return void ha(t,n,o,r)}Xo.flags|=e,i.memoizedState=ha(1|t,n,o,r)}function va(e,t){return ga(516,4,e,t)}function ya(e,t){return ma(516,4,e,t)}function ba(e,t){return ma(4,2,e,t)}function wa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ka(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,wa.bind(null,t,e),n)}function Sa(){}function Ea(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xa(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ta(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ia(e,t){var n=Ui();Vi(98>n?98:n,(function(){e(!0)})),Vi(97<n?97:n,(function(){var n=Ko.transition;Ko.transition=1;try{e(!1),t()}finally{Ko.transition=n}}))}function Ca(e,t,n){var r=ou(),i=au(e),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Xo||null!==a&&a===Xo)Zo=Qo=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,u=a(s,n);if(o.eagerReducer=a,o.eagerState=u,or(u,s))return}catch(e){}su(e,i,r)}}var Ta={readContext:to,useCallback:ea,useContext:ea,useEffect:ea,useImperativeHandle:ea,useLayoutEffect:ea,useMemo:ea,useReducer:ea,useRef:ea,useState:ea,useDebugValue:ea,useDeferredValue:ea,useTransition:ea,useMutableSource:ea,useOpaqueIdentifier:ea,unstable_isNewReconciler:!1},_a={readContext:to,useCallback:function(e,t){return ra().memoizedState=[e,void 0===t?null:t],e},useContext:to,useEffect:va,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,wa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ga(4,2,e,t)},useMemo:function(e,t){var n=ra();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ra();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ca.bind(null,Xo,e),[r.memoizedState,e]},useRef:pa,useState:fa,useDebugValue:Sa,useDeferredValue:function(e){var t=fa(e),n=t[0],r=t[1];return va((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=fa(!1),t=e[0];return pa(e=Ia.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ra();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},la(r,e,t,n)},useOpaqueIdentifier:function(){if(Mo){var e=!1,t=function(e){return{$$typeof:D,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+($r++).toString(36))),Error(a(355))})),n=fa(t)[1];return 0==(2&Xo.mode)&&(Xo.flags|=516,ha(5,(function(){n("r:"+($r++).toString(36))}),void 0,null)),t}return fa(t="r:"+($r++).toString(36)),t},unstable_isNewReconciler:!1},Oa={readContext:to,useCallback:Ea,useContext:to,useEffect:ya,useImperativeHandle:ka,useLayoutEffect:ba,useMemo:xa,useReducer:aa,useRef:da,useState:function(){return aa(oa)},useDebugValue:Sa,useDeferredValue:function(e){var t=aa(oa),n=t[0],r=t[1];return ya((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=aa(oa)[0];return[da().current,e]},useMutableSource:ca,useOpaqueIdentifier:function(){return aa(oa)[0]},unstable_isNewReconciler:!1},Na={readContext:to,useCallback:Ea,useContext:to,useEffect:ya,useImperativeHandle:ka,useLayoutEffect:ba,useMemo:xa,useReducer:sa,useRef:da,useState:function(){return sa(oa)},useDebugValue:Sa,useDeferredValue:function(e){var t=sa(oa),n=t[0],r=t[1];return ya((function(){var t=Ko.transition;Ko.transition=1;try{r(e)}finally{Ko.transition=t}}),[e]),n},useTransition:function(){var e=sa(oa)[0];return[da().current,e]},useMutableSource:ca,useOpaqueIdentifier:function(){return sa(oa)[0]},unstable_isNewReconciler:!1},Pa=k.ReactCurrentOwner,Aa=!1;function La(e,t,n,r){t.child=null===e?Eo(t,null,n,r):So(t,e.child,n,r)}function Ra(e,t,n,r,i){n=n.render;var o=t.ref;return eo(t,i),r=na(e,t,n,r,o,i),null===e||Aa?(t.flags|=1,La(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Qa(e,t,i))}function Da(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||ju(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,ja(e,t,a,r,i,o))}return a=e.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)?Qa(e,t,o):(t.flags|=1,(e=Mu(a,r)).ref=t.ref,e.return=t,t.child=e)}function ja(e,t,n,r,i,o){if(null!==e&&sr(e.memoizedProps,r)&&e.ref===t.ref){if(Aa=!1,0==(o&i))return t.lanes=e.lanes,Qa(e,t,o);0!=(16384&e.flags)&&(Aa=!0)}return Ua(e,t,n,r,o)}function Ma(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},pu(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},pu(0,e),null;t.memoizedState={baseLanes:0},pu(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,pu(0,r);return La(e,t,i,n),t.child}function Fa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ua(e,t,n,r,i){var o=hi(n)?ci:ui.current;return o=fi(t,o),eo(t,i),n=na(e,t,n,r,o,i),null===e||Aa?(t.flags|=1,La(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Qa(e,t,i))}function za(e,t,n,r,i){if(hi(n)){var o=!0;mi(t)}else o=!1;if(eo(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),go(t,n,r),vo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var u=a.context,l=n.contextType;l="object"==typeof l&&null!==l?to(l):fi(t,l=hi(n)?ci:ui.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==l)&&mo(t,a,r,l),no=!1;var h=t.memoizedState;a.state=h,uo(t,r,a,i),u=t.memoizedState,s!==r||h!==u||li.current||no?("function"==typeof c&&(fo(t,n,c,r),u=t.memoizedState),(s=no||po(t,n,s,r,h,u,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,io(e,t),s=t.memoizedProps,l=t.type===t.elementType?s:qi(t.type,s),a.props=l,f=t.pendingProps,h=a.context,u="object"==typeof(u=n.contextType)&&null!==u?to(u):fi(t,u=hi(n)?ci:ui.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||h!==u)&&mo(t,a,r,u),no=!1,h=t.memoizedState,a.state=h,uo(t,r,a,i);var d=t.memoizedState;s!==f||h!==d||li.current||no?("function"==typeof p&&(fo(t,n,p,r),d=t.memoizedState),(l=no||po(t,n,l,r,h,d,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=u,r=l):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&h===e.memoizedState||(t.flags|=256),r=!1)}return Va(e,t,n,r,o,i)}function Va(e,t,n,r,i,o){Fa(e,t);var a=0!=(64&t.flags);if(!r&&!a)return i&&vi(t,n,!1),Qa(e,t,o);r=t.stateNode,Pa.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=So(t,e.child,null,o),t.child=So(t,null,s,o)):La(e,t,s,o),t.memoizedState=r.state,i&&vi(t,n,!0),t.child}function Ha(e){var t=e.stateNode;t.pendingContext?di(0,t.pendingContext,t.pendingContext!==t.context):t.context&&di(0,t.context,!1),Oo(e,t.containerInfo)}var Ba,Wa,$a,qa={dehydrated:null,retryLane:0};function Ka(e,t,n){var r,i=t.pendingProps,o=Lo.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),ai(Lo,1&o),null===e?(void 0!==i.fallback&&zo(t),e=i.children,o=i.fallback,a?(e=Ga(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,e):"number"==typeof i.unstable_expectedLoadTime?(e=Ga(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,t.lanes=33554432,e):((n=zu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(i=function(e,t,n,r,i){var o=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Mu(a,s),null!==e?r=Mu(e,r):(r=Uu(r,o,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,i.children,i.fallback,n),a=t.child,o=e.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=qa,i):(n=function(e,t,n,r){var i=e.child;return e=i.sibling,n=Mu(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,i.children,n),t.memoizedState=null,n))}function Ga(e,t,n,r){var i=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=zu(t,i,0,null),n=Uu(n,i,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Xa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),Zi(e.return,t)}function Ya(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function Ja(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(La(e,t,r.children,n),0!=(2&(r=Lo.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Xa(e,n);else if(19===e.tag)Xa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ai(Lo,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Ro(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ya(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Ro(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ya(t,!0,n,null,o,t.lastEffect);break;case"together":Ya(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Qa(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Rs|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Mu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Mu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function Za(e,t){if(!Mo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function es(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return hi(t.type)&&pi(),null;case 3:return No(),oi(li),oi(ui),$o(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ho(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ao(t);var o=_o(To.current);if(n=t.type,null!==e&&null!=t.stateNode)Wa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=_o(Io.current),Ho(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Kr]=t,r[Gr]=s,n){case"dialog":Ir("cancel",r),Ir("close",r);break;case"iframe":case"object":case"embed":Ir("load",r);break;case"video":case"audio":for(e=0;e<kr.length;e++)Ir(kr[e],r);break;case"source":Ir("error",r);break;case"img":case"image":case"link":Ir("error",r),Ir("load",r);break;case"details":Ir("toggle",r);break;case"input":ee(r,s),Ir("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Ir("invalid",r);break;case"textarea":ue(r,s),Ir("invalid",r)}for(var l in Ee(n,s),e=null,s)s.hasOwnProperty(l)&&(o=s[l],"children"===l?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):u.hasOwnProperty(l)&&null!=o&&"onScroll"===l&&Ir("scroll",r));switch(n){case"input":Y(r),re(r,s,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Dr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(l=9===o.nodeType?o:o.ownerDocument,e===fe&&(e=he(n)),e===fe?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[Kr]=t,e[Gr]=r,Ba(e,t),t.stateNode=e,l=xe(n,r),n){case"dialog":Ir("cancel",e),Ir("close",e),o=r;break;case"iframe":case"object":case"embed":Ir("load",e),o=r;break;case"video":case"audio":for(o=0;o<kr.length;o++)Ir(kr[o],e);o=r;break;case"source":Ir("error",e),o=r;break;case"img":case"image":case"link":Ir("error",e),Ir("load",e),o=r;break;case"details":Ir("toggle",e),o=r;break;case"input":ee(e,r),o=Z(e,r),Ir("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Ir("invalid",e);break;case"textarea":ue(e,r),o=se(e,r),Ir("invalid",e);break;default:o=r}Ee(n,o);var c=o;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?ke(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&me(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(u.hasOwnProperty(s)?null!=f&&"onScroll"===s&&Ir("scroll",e):null!=f&&w(e,s,f,l))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+G(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Dr)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)$a(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=_o(To.current),_o(Io.current),Ho(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return oi(Lo),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ho(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Lo.current)?0===Ps&&(Ps=3):(0!==Ps&&3!==Ps||(Ps=4),null===Cs||0==(134217727&Rs)&&0==(134217727&Ds)||fu(Cs,_s))),(r||n)&&(t.flags|=4),null);case 4:return No(),null===e&&Tr(t.stateNode.containerInfo),null;case 10:return Qi(t),null;case 17:return hi(t.type)&&pi(),null;case 19:if(oi(Lo),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(l=r.rendering))if(s)Za(r,!1);else{if(0!==Ps||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(l=Ro(e))){for(t.flags|=64,Za(r,!1),null!==(s=l.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ai(Lo,1&Lo.current|2),t.child}e=e.sibling}null!==r.tail&&Fi()>Us&&(t.flags|=64,s=!0,Za(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Ro(l))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Za(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate&&!Mo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fi()-r.renderingStartTime>Us&&1073741824!==n&&(t.flags|=64,s=!0,Za(r,!1),t.lanes=33554432);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fi(),n.sibling=null,t=Lo.current,ai(Lo,s?1&t|2:1&t),n):null;case 23:case 24:return du(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ts(e){switch(e.tag){case 1:hi(e.type)&&pi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(No(),oi(li),oi(ui),$o(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ao(e),null;case 13:return oi(Lo),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return oi(Lo),null;case 4:return No(),null;case 10:return Qi(e),null;case 23:case 24:return du(),null;default:return null}}function ns(e,t){try{var n="",r=t;do{n+=q(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function rs(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ba=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wa=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,_o(Io.current);var a,s=null;switch(n){case"input":o=Z(e,o),r=Z(e,r),s=[];break;case"option":o=oe(e,o),r=oe(e,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=se(e,o),r=se(e,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Dr)}for(f in Ee(n,r),n=null,o)if(!r.hasOwnProperty(f)&&o.hasOwnProperty(f)&&null!=o[f])if("style"===f){var l=o[f];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var c=r[f];if(l=null!=o?o[f]:void 0,r.hasOwnProperty(f)&&c!==l&&(null!=c||null!=l))if("style"===f)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(s=s||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Ir("scroll",e),s||l===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===D?c.toString():(s=s||[]).push(f,c))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},$a=function(e,t,n,r){n!==r&&(t.flags|=4)};var is="function"==typeof WeakMap?WeakMap:Map;function os(e,t,n){(n=oo(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bs||(Bs=!0,Ws=r),rs(0,t)},n}function as(e,t,n){(n=oo(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return rs(0,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$s?$s=new Set([this]):$s.add(this),rs(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ss="function"==typeof WeakSet?WeakSet:Set;function us(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Pu(e,t)}else t.current=null}function ls(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Hr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function cs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(_u(n,e),Tu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:qi(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&lo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}lo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function fs(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=we("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hs(e,t){if(bi&&"function"==typeof bi.onCommitFiberUnmount)try{bi.onCommitFiberUnmount(yi,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))_u(t,n);else{r=t;try{i()}catch(e){Pu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(us(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Pu(t,e)}break;case 5:us(t);break;case 4:ys(e,t)}}function ps(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ds(e){return 5===e.tag||3===e.tag||4===e.tag}function gs(e){e:{for(var t=e.return;null!==t;){if(ds(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ds(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?ms(e,n,t):vs(e,n,t)}function ms(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Dr));else if(4!==r&&null!==(e=e.child))for(ms(e,t,n),e=e.sibling;null!==e;)ms(e,t,n),e=e.sibling}function vs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function ys(e,t){for(var n,r,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,u=i,l=u;;)if(hs(s,l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===u)break e;for(;null===l.sibling;){if(null===l.return||l.return===u)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}r?(s=n,u=i.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(hs(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function bs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Gr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),xe(e,i),t=xe(e,r),i=0;i<o.length;i+=2){var s=o[i],u=o[i+1];"style"===s?ke(n,u):"dangerouslySetInnerHTML"===s?me(n,u):"children"===s?ve(n,u):w(n,s,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ae(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Fs=Fi(),fs(t.child,!0)),void ws(t);case 19:return void ws(t);case 17:return;case 23:case 24:return void fs(t,null!==t.memoizedState)}throw Error(a(163))}function ws(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ss),t.forEach((function(t){var r=Lu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ks(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ss=Math.ceil,Es=k.ReactCurrentDispatcher,xs=k.ReactCurrentOwner,Is=0,Cs=null,Ts=null,_s=0,Os=0,Ns=ii(0),Ps=0,As=null,Ls=0,Rs=0,Ds=0,js=0,Ms=null,Fs=0,Us=1/0;function zs(){Us=Fi()+500}var Vs,Hs=null,Bs=!1,Ws=null,$s=null,qs=!1,Ks=null,Gs=90,Xs=[],Ys=[],Js=null,Qs=0,Zs=null,eu=-1,tu=0,nu=0,ru=null,iu=!1;function ou(){return 0!=(48&Is)?Fi():-1!==eu?eu:eu=Fi()}function au(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ui()?1:2;if(0===tu&&(tu=Ls),0!==$i.transition){0!==nu&&(nu=null!==Ms?Ms.pendingLanes:0),e=tu;var t=4186112&~nu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ui(),e=Ft(0!=(4&Is)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),tu)}function su(e,t,n){if(50<Qs)throw Qs=0,Zs=null,Error(a(185));if(null===(e=uu(e,t)))return null;Vt(e,t,n),e===Cs&&(Ds|=t,4===Ps&&fu(e,_s));var r=Ui();1===t?0!=(8&Is)&&0==(48&Is)?hu(e):(lu(e,n),0===Is&&(zs(),Bi())):(0==(4&Is)||98!==r&&99!==r||(null===Js?Js=new Set([e]):Js.add(e)),lu(e,n)),Ms=e}function uu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function lu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,o=e.expirationTimes,s=e.pendingLanes;0<s;){var u=31-Ht(s),l=1<<u,c=o[u];if(-1===c){if(0==(l&r)||0!=(l&i)){c=t,Dt(l);var f=Rt;o[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=l);s&=~l}if(r=jt(e,e===Cs?_s:0),t=Rt,0===r)null!==n&&(n!==Ai&&Si(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ai&&Si(n)}15===t?(n=hu.bind(null,e),null===Ri?(Ri=[n],Di=ki(Ti,Wi)):Ri.push(n),n=Ai):n=14===t?Hi(99,hu.bind(null,e)):Hi(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),cu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function cu(e){if(eu=-1,nu=tu=0,0!=(48&Is))throw Error(a(327));var t=e.callbackNode;if(Cu()&&e.callbackNode!==t)return null;var n=jt(e,e===Cs?_s:0);if(0===n)return null;var r=n,i=Is;Is|=16;var o=vu();for(Cs===e&&_s===r||(zs(),gu(e,r));;)try{wu();break}catch(t){mu(e,t)}if(Ji(),Es.current=o,Is=i,null!==Ts?r=0:(Cs=null,_s=0,r=Ps),0!=(Ls&Ds))gu(e,0);else if(0!==r){if(2===r&&(Is|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(n=Mt(e))&&(r=yu(e,n))),1===r)throw t=As,gu(e,0),fu(e,n),lu(e,Fi()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Eu(e);break;case 3:if(fu(e,n),(62914560&n)===n&&10<(r=Fs+500-Fi())){if(0!==jt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){ou(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=zr(Eu.bind(null,e),r);break}Eu(e);break;case 4:if(fu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Ht(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=Fi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ss(n/1960))-n)){e.timeoutHandle=zr(Eu.bind(null,e),n);break}Eu(e);break;case 5:Eu(e);break;default:throw Error(a(329))}}return lu(e,Fi()),e.callbackNode===t?cu.bind(null,e):null}function fu(e,t){for(t&=~js,t&=~Ds,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function hu(e){if(0!=(48&Is))throw Error(a(327));if(Cu(),e===Cs&&0!=(e.expiredLanes&_s)){var t=_s,n=yu(e,t);0!=(Ls&Ds)&&(n=yu(e,t=jt(e,t)))}else n=yu(e,t=jt(e,0));if(0!==e.tag&&2===n&&(Is|=64,e.hydrate&&(e.hydrate=!1,Hr(e.containerInfo)),0!==(t=Mt(e))&&(n=yu(e,t))),1===n)throw n=As,gu(e,0),fu(e,t),lu(e,Fi()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Eu(e),lu(e,Fi()),null}function pu(e,t){ai(Ns,Os),Os|=t,Ls|=t}function du(){Os=Ns.current,oi(Ns)}function gu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Vr(n)),null!==Ts)for(n=Ts.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pi();break;case 3:No(),oi(li),oi(ui),$o();break;case 5:Ao(r);break;case 4:No();break;case 13:case 19:oi(Lo);break;case 10:Qi(r);break;case 23:case 24:du()}n=n.return}Cs=e,Ts=Mu(e.current,null),_s=Os=Ls=t,Ps=0,As=null,js=Ds=Rs=0}function mu(e,t){for(;;){var n=Ts;try{if(Ji(),qo.current=Ta,Qo){for(var r=Xo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}Qo=!1}if(Go=0,Jo=Yo=Xo=null,Zo=!1,xs.current=null,null===n||null===n.return){Ps=1,As=t,Ts=null;break}e:{var o=e,a=n.return,s=n,u=t;if(t=_s,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Lo.current),h=a;do{var p;if(p=13===h.tag){var d=h.memoizedState;if(null!==d)p=null!==d.dehydrated;else{var g=h.memoizedProps;p=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!f)}}if(p){var m=h.updateQueue;if(null===m){var v=new Set;v.add(l),h.updateQueue=v}else m.add(l);if(0==(2&h.mode)){if(h.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var y=oo(-1,1);y.tag=2,ao(s,y)}s.lanes|=1;break e}u=void 0,s=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new is,u=new Set,b.set(l,u)):void 0===(u=b.get(l))&&(u=new Set,b.set(l,u)),!u.has(s)){u.add(s);var w=Au.bind(null,o,l,s);l.then(w,w)}h.flags|=4096,h.lanes=t;break e}h=h.return}while(null!==h);u=Error((K(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ps&&(Ps=2),u=ns(u,s),h=a;do{switch(h.tag){case 3:o=u,h.flags|=4096,t&=-t,h.lanes|=t,so(h,os(0,o,t));break e;case 1:o=u;var k=h.type,S=h.stateNode;if(0==(64&h.flags)&&("function"==typeof k.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===$s||!$s.has(S)))){h.flags|=4096,t&=-t,h.lanes|=t,so(h,as(h,o,t));break e}}h=h.return}while(null!==h)}Su(n)}catch(e){t=e,Ts===n&&null!==n&&(Ts=n=n.return);continue}break}}function vu(){var e=Es.current;return Es.current=Ta,null===e?Ta:e}function yu(e,t){var n=Is;Is|=16;var r=vu();for(Cs===e&&_s===t||gu(e,t);;)try{bu();break}catch(t){mu(e,t)}if(Ji(),Is=n,Es.current=r,null!==Ts)throw Error(a(261));return Cs=null,_s=0,Ps}function bu(){for(;null!==Ts;)ku(Ts)}function wu(){for(;null!==Ts&&!Ei();)ku(Ts)}function ku(e){var t=Vs(e.alternate,e,Os);e.memoizedProps=e.pendingProps,null===t?Su(e):Ts=t,xs.current=null}function Su(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=es(n,t,Os)))return void(Ts=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Os)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ts(t)))return n.flags&=2047,void(Ts=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ts=t);Ts=t=e}while(null!==t);0===Ps&&(Ps=5)}function Eu(e){var t=Ui();return Vi(99,xu.bind(null,e,t)),null}function xu(e,t){do{Cu()}while(null!==Ks);if(0!=(48&Is))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,u=e.expirationTimes;0<o;){var l=31-Ht(o),c=1<<l;i[l]=0,s[l]=-1,u[l]=-1,o&=~c}if(null!==Js&&0==(24&r)&&Js.has(e)&&Js.delete(e),e===Cs&&(Ts=Cs=null,_s=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Is,Is|=32,xs.current=null,jr=Kt,hr(s=fr())){if("selectionStart"in s)u={start:s.selectionStart,end:s.selectionEnd};else e:if(u=(u=s.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,o=c.anchorOffset,l=c.focusNode,c=c.focusOffset;try{u.nodeType,l.nodeType}catch(e){u=null;break e}var f=0,h=-1,p=-1,d=0,g=0,m=s,v=null;t:for(;;){for(var y;m!==u||0!==o&&3!==m.nodeType||(h=f+o),m!==l||0!==c&&3!==m.nodeType||(p=f+c),3===m.nodeType&&(f+=m.nodeValue.length),null!==(y=m.firstChild);)v=m,m=y;for(;;){if(m===s)break t;if(v===u&&++d===o&&(h=f),v===l&&++g===c&&(p=f),null!==(y=m.nextSibling))break;v=(m=v).parentNode}m=y}u=-1===h||-1===p?null:{start:h,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Mr={focusedElem:s,selectionRange:u},Kt=!1,ru=null,iu=!1,Hs=r;do{try{Iu()}catch(e){if(null===Hs)throw Error(a(330));Pu(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);ru=null,Hs=r;do{try{for(s=e;null!==Hs;){var b=Hs.flags;if(16&b&&ve(Hs.stateNode,""),128&b){var w=Hs.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:gs(Hs),Hs.flags&=-3;break;case 6:gs(Hs),Hs.flags&=-3,bs(Hs.alternate,Hs);break;case 1024:Hs.flags&=-1025;break;case 1028:Hs.flags&=-1025,bs(Hs.alternate,Hs);break;case 4:bs(Hs.alternate,Hs);break;case 8:ys(s,u=Hs);var S=u.alternate;ps(u),null!==S&&ps(S)}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(a(330));Pu(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);if(k=Mr,w=fr(),b=k.focusedElem,s=k.selectionRange,w!==b&&b&&b.ownerDocument&&cr(b.ownerDocument.documentElement,b)){null!==s&&hr(b)&&(w=s.start,void 0===(k=s.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,S=Math.min(s.start,u),s=void 0===s.end?S:Math.min(s.end,u),!k.extend&&S>s&&(u=s,s=S,S=u),u=lr(b,S),o=lr(b,s),u&&o&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==o.node||k.focusOffset!==o.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),S>s?(k.addRange(w),k.extend(o.node,o.offset)):(w.setEnd(o.node,o.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Kt=!!jr,Mr=jr=null,e.current=n,Hs=r;do{try{for(b=e;null!==Hs;){var E=Hs.flags;if(36&E&&cs(b,Hs.alternate,Hs),128&E){w=void 0;var x=Hs.ref;if(null!==x){var I=Hs.stateNode;switch(Hs.tag){case 5:w=I;break;default:w=I}"function"==typeof x?x(w):x.current=w}}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(a(330));Pu(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);Hs=null,Li(),Is=i}else e.current=n;if(qs)qs=!1,Ks=e,Gs=t;else for(Hs=r;null!==Hs;)t=Hs.nextEffect,Hs.nextEffect=null,8&Hs.flags&&((E=Hs).sibling=null,E.stateNode=null),Hs=t;if(0===(r=e.pendingLanes)&&($s=null),1===r?e===Zs?Qs++:(Qs=0,Zs=e):Qs=0,n=n.stateNode,bi&&"function"==typeof bi.onCommitFiberRoot)try{bi.onCommitFiberRoot(yi,n,void 0,64==(64&n.current.flags))}catch(e){}if(lu(e,Fi()),Bs)throw Bs=!1,e=Ws,Ws=null,e;return 0!=(8&Is)||Bi(),null}function Iu(){for(;null!==Hs;){var e=Hs.alternate;iu||null===ru||(0!=(8&Hs.flags)?Qe(Hs,ru)&&(iu=!0):13===Hs.tag&&ks(e,Hs)&&Qe(Hs,ru)&&(iu=!0));var t=Hs.flags;0!=(256&t)&&ls(e,Hs),0==(512&t)||qs||(qs=!0,Hi(97,(function(){return Cu(),null}))),Hs=Hs.nextEffect}}function Cu(){if(90!==Gs){var e=97<Gs?97:Gs;return Gs=90,Vi(e,Ou)}return!1}function Tu(e,t){Xs.push(t,e),qs||(qs=!0,Hi(97,(function(){return Cu(),null})))}function _u(e,t){Ys.push(t,e),qs||(qs=!0,Hi(97,(function(){return Cu(),null})))}function Ou(){if(null===Ks)return!1;var e=Ks;if(Ks=null,0!=(48&Is))throw Error(a(331));var t=Is;Is|=32;var n=Ys;Ys=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===o)throw Error(a(330));Pu(o,e)}}for(n=Xs,Xs=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var u=i.create;i.destroy=u()}catch(e){if(null===o)throw Error(a(330));Pu(o,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Is=t,Bi(),!0}function Nu(e,t,n){ao(e,t=os(0,t=ns(n,t),1)),t=ou(),null!==(e=uu(e,1))&&(Vt(e,1,t),lu(e,t))}function Pu(e,t){if(3===e.tag)Nu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Nu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$s||!$s.has(r))){var i=as(n,e=ns(t,e),1);if(ao(n,i),i=ou(),null!==(n=uu(n,1)))Vt(n,1,i),lu(n,i);else if("function"==typeof r.componentDidCatch&&(null===$s||!$s.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Au(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ou(),e.pingedLanes|=e.suspendedLanes&n,Cs===e&&(_s&n)===n&&(4===Ps||3===Ps&&(62914560&_s)===_s&&500>Fi()-Fs?gu(e,0):js|=n),lu(e,t)}function Lu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ui()?1:2:(0===tu&&(tu=Ls),0===(t=Ut(62914560&~tu))&&(t=4194304))),n=ou(),null!==(e=uu(e,t))&&(Vt(e,t,n),lu(e,n))}function Ru(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Du(e,t,n,r){return new Ru(e,t,n,r)}function ju(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Mu(e,t){var n=e.alternate;return null===n?((n=Du(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fu(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)ju(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case x:return Uu(n.children,i,o,t);case j:s=8,i|=16;break;case I:s=8,i|=1;break;case C:return(e=Du(12,n,t,8|i)).elementType=C,e.type=C,e.lanes=o,e;case N:return(e=Du(13,n,t,i)).type=N,e.elementType=N,e.lanes=o,e;case P:return(e=Du(19,n,t,i)).elementType=P,e.lanes=o,e;case M:return zu(n,i,o,t);case F:return(e=Du(24,n,t,i)).elementType=F,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:s=10;break e;case _:s=9;break e;case O:s=11;break e;case A:s=14;break e;case L:s=16,r=null;break e;case R:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Du(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Uu(e,t,n,r){return(e=Du(7,e,r,t)).lanes=n,e}function zu(e,t,n,r){return(e=Du(23,e,r,t)).elementType=M,e.lanes=n,e}function Vu(e,t,n){return(e=Du(6,e,null,t)).lanes=n,e}function Hu(e,t,n){return(t=Du(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Wu(e,t,n,r){var i=t.current,o=ou(),s=au(i);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(hi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var l=n.type;if(hi(l)){n=gi(n,l,u);break e}}n=u}else n=si;return null===t.context?t.context=n:t.pendingContext=n,(t=oo(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ao(i,t),su(i,s,o),s}function $u(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){qu(e,t),(e=e.alternate)&&qu(e,t)}function Gu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Bu(e,t,null!=n&&!0===n.hydrate),t=Du(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ro(t),e[Xr]=n.current,Tr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var i=(t=r[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Yu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=$u(a);s.call(e)}}Wu(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var u=i;i=function(){var e=$u(a);u.call(e)}}!function(e,t){var n=Is;Is&=-2,Is|=8;try{e(t)}finally{0===(Is=n)&&(zs(),Bi())}}((function(){Wu(t,a,e,i)}))}return $u(a)}Vs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||li.current)Aa=!0;else{if(0==(n&r)){switch(Aa=!1,t.tag){case 3:Ha(t),Bo();break;case 5:Po(t);break;case 1:hi(t.type)&&mi(t);break;case 4:Oo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var i=t.type._context;ai(Ki,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ka(e,t,n):(ai(Lo,1&Lo.current),null!==(t=Qa(e,t,n))?t.sibling:null);ai(Lo,1&Lo.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ja(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ai(Lo,Lo.current),r)break;return null;case 23:case 24:return t.lanes=0,Ma(e,t,n)}return Qa(e,t,n)}Aa=0!=(16384&e.flags)}else Aa=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=fi(t,ui.current),eo(t,n),i=na(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,hi(r)){var o=!0;mi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,ro(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&fo(t,r,s,e),i.updater=ho,t.stateNode=i,i._reactInternals=t,vo(t,r,e,n),t=Va(null,t,r,!0,o,n)}else t.tag=0,La(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(o=i._init)(i._payload),t.type=i,o=t.tag=function(e){if("function"==typeof e)return ju(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===A)return 14}return 2}(i),e=qi(i,e),o){case 0:t=Ua(null,t,i,e,n);break e;case 1:t=za(null,t,i,e,n);break e;case 11:t=Ra(null,t,i,e,n);break e;case 14:t=Da(null,t,i,qi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ua(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,za(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 3:if(Ha(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,io(e,t),uo(t,r,null,n),(r=t.memoizedState.element)===i)Bo(),t=Qa(e,t,n);else{if((o=(i=t.stateNode).hydrate)&&(jo=Br(t.stateNode.containerInfo.firstChild),Do=t,o=Mo=!0),o){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(o=e[i])._workInProgressVersionPrimary=e[i+1],Wo.push(o);for(n=Eo(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else La(e,t,r,n),Bo();t=t.child}return t;case 5:return Po(t),null===e&&zo(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,Ur(r,i)?s=null:null!==o&&Ur(r,o)&&(t.flags|=16),Fa(e,t),La(e,t,s,n),t.child;case 6:return null===e&&zo(t),null;case 13:return Ka(e,t,n);case 4:return Oo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):La(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ra(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 7:return La(e,t,t.pendingProps,n),t.child;case 8:case 12:return La(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value;var u=t.type._context;if(ai(Ki,u._currentValue),u._currentValue=o,null!==s)if(u=s.value,0==(o=or(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(s.children===i.children&&!li.current){t=Qa(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var c=l.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=oo(-1,n&-n)).tag=2,ao(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),Zi(u.return,n),l.lanes|=n;break}c=c.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}La(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,eo(t,n),r=r(i=to(i,o.unstable_observedBits)),t.flags|=1,La(e,t,r,n),t.child;case 14:return o=qi(i=t.type,t.pendingProps),Da(e,t,i,o=qi(i.type,o),r,n);case 15:return ja(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,hi(r)?(e=!0,mi(t)):e=!1,eo(t,n),go(t,r,i),vo(t,r,i,n),Va(null,t,r,!0,e,n);case 19:return Ja(e,t,n);case 23:case 24:return Ma(e,t,n)}throw Error(a(156,t.tag))},Gu.prototype.render=function(e){Wu(e,this._internalRoot,null,null)},Gu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Wu(null,e,null,(function(){t[Xr]=null}))},Ze=function(e){13===e.tag&&(su(e,4,ou()),Ku(e,4))},et=function(e){13===e.tag&&(su(e,67108864,ou()),Ku(e,67108864))},tt=function(e){if(13===e.tag){var t=ou(),n=au(e);su(e,n,t),Ku(e,n)}},nt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ei(r);if(!i)throw Error(a(90));J(r),ne(r,i)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Ae=function(e,t){var n=Is;Is|=1;try{return e(t)}finally{0===(Is=n)&&(zs(),Bi())}},Le=function(e,t,n,r,i){var o=Is;Is|=4;try{return Vi(98,e.bind(null,t,n,r,i))}finally{0===(Is=o)&&(zs(),Bi())}},Re=function(){0==(49&Is)&&(function(){if(null!==Js){var e=Js;Js=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,lu(e,Fi())}))}Bi()}(),Cu())},De=function(e,t){var n=Is;Is|=2;try{return e(t)}finally{0===(Is=n)&&(zs(),Bi())}};var Ju={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},Qu={bundleType:Ju.bundleType,version:Ju.version,rendererPackageName:Ju.rendererPackageName,rendererConfig:Ju.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Je(i),e;if(o===r)return Je(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,u=i.child;u;){if(u===n){s=!0,n=i,r=o;break}if(u===r){s=!0,r=i,n=o;break}u=u.sibling}if(!s){for(u=o.child;u;){if(u===n){s=!0,n=o,r=i;break}if(u===r){s=!0,r=o,n=i;break}u=u.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:Ju.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Zu=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Zu.isDisabled&&Zu.supportsFiber)try{yi=Zu.inject(Qu),bi=Zu}catch(ge){}}t.render=function(e,t,n){if(!Xu(t))throw Error(a(200));return Yu(null,e,t,!1,n)}},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,l=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,h=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,d=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case o:case s:case a:case p:return e;default:switch(e=e&&e.$$typeof){case l:case h:case m:case g:case u:return e;default:return t}}case i:return t}}}function S(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=l,t.ContextProvider=u,t.Element=r,t.ForwardRef=h,t.Fragment=o,t.Lazy=m,t.Memo=g,t.Portal=i,t.Profiler=s,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||k(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return k(e)===l},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===h},t.isFragment=function(e){return k(e)===o},t.isLazy=function(e){return k(e)===m},t.isMemo=function(e){return k(e)===g},t.isPortal=function(e){return k(e)===i},t.isProfiler=function(e){return k(e)===s},t.isStrictMode=function(e){return k(e)===a},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===f||e===s||e===a||e===p||e===d||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===u||e.$$typeof===l||e.$$typeof===h||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=k},864:(e,t,n)=>{"use strict";e.exports=n(921)},585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},658:(e,t,n)=>{var r=n(585);e.exports=function e(t,n,i){return r(n)||(i=n||i,n=[]),i=i||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var i=[],o=0;o<t.length;o++)i.push(e(t[o],n,r).source);return c(new RegExp("(?:"+i.join("|")+")",f(r)),n)}(t,n,i):function(e,t,n){return h(o(e,n),t,n)}(t,n,i)},e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=h;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,a=0,s="",c=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],h=n[1],p=n.index;if(s+=e.slice(a,p),a=p+f.length,h)s+=h[1];else{var d=e[a],g=n[2],m=n[3],v=n[4],y=n[5],b=n[6],w=n[7];s&&(r.push(s),s="");var k=null!=g&&null!=d&&d!==g,S="+"===b||"*"===b,E="?"===b||"*"===b,x=n[2]||c,I=v||y;r.push({name:m||o++,prefix:g||"",delimiter:x,optional:E,repeat:S,partial:k,asterisk:!!w,pattern:I?l(I):w?".*":"[^"+u(x)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",f(t)));return function(t,i){for(var o="",s=t||{},u=(i||{}).pretty?a:encodeURIComponent,l=0;l<e.length;l++){var c=e[l];if("string"!=typeof c){var f,h=s[c.name];if(null==h){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(h)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<h.length;p++){if(f=u(h[p]),!n[l].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(h).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(h),!n[l].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');o+=c.prefix+f}}else o+=c}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function h(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",s=0;s<e.length;s++){var l=e[s];if("string"==typeof l)a+=u(l);else{var h=u(l.prefix),p="(?:"+l.pattern+")";t.push(l),l.repeat&&(p+="(?:"+h+p+")*"),a+=p=l.optional?l.partial?h+"("+p+")?":"(?:"+h+"("+p+"))?":h+"("+p+")"}}var d=u(n.delimiter||"/"),g=a.slice(-d.length)===d;return i||(a=(g?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=o?"$":i&&g?"":"(?="+d+"|$)",c(new RegExp("^"+a,f(n)),t)}},408:(e,t,n)=>{"use strict";var r=n(418),i=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,u=60112;t.Suspense=60113;var l=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;i=f("react.element"),o=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),s=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),l=f("react.memo"),c=f("react.lazy")}var h="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||d}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||d}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var b=y.prototype=new v;b.constructor=y,r(b,m.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!S.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:w.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var I=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var u=!1;if(null===e)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case i:case o:u=!0}}if(u)return a=a(u=e),e=""===r?"."+C(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(I,"$&/")+"/"),T(a,t,n,"",(function(e){return e}))):null!=a&&(x(a)&&(a=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(I,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var c=r+C(s=e[l],l);u+=T(s,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),l=0;!(s=e.next()).done;)u+=T(s=s.value,t,n,c=r+C(s,l++),a);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function _(e,t,n){if(null==e)return e;var r=[],i=0;return T(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var N={current:null};function P(){var e=N.current;if(null===e)throw Error(p(321));return e}var A={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:_,forEach:function(e,t,n){_(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return _(e,(function(){t++})),t},toArray:function(e){return _(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(p(143));return e}},t.Component=m,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),a=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)k.call(t,c)&&!S.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){l=Array(c);for(var f=0;f<c;f++)l[f]=arguments[f+2];o.children=l}return{$$typeof:i,type:e.type,key:a,ref:s,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return P().useCallback(e,t)},t.useContext=function(e,t){return P().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return P().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return P().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return P().useLayoutEffect(e,t)},t.useMemo=function(e,t){return P().useMemo(e,t)},t.useReducer=function(e,t,n){return P().useReducer(e,t,n)},t.useRef=function(e){return P().useRef(e)},t.useState=function(e){return P().useState(e)},t.version="17.0.1"},294:(e,t,n)=>{"use strict";e.exports=n(408)},666:e=>{var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var i=t&&t.prototype instanceof m?t:m,o=Object.create(i.prototype),a=new _(r||[]);return o._invoke=function(e,t,n){var r=f;return function(i,o){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===i)throw o;return N()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=I(a,n);if(s){if(s===g)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=d,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var u=c(e,t,n);if("normal"===u.type){if(r=n.done?d:h,u.arg===g)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=d,n.method="throw",n.arg=u.arg)}}}(e,n,a),o}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var f="suspendedStart",h="suspendedYield",p="executing",d="completed",g={};function m(){}function v(){}function y(){}var b={};b[o]=function(){return this};var w=Object.getPrototypeOf,k=w&&w(w(O([])));k&&k!==n&&r.call(k,o)&&(b=k);var S=y.prototype=m.prototype=Object.create(b);function E(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function n(i,o,a,s){var u=c(e[i],e,o);if("throw"!==u.type){var l=u.arg,f=l.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,a,s)}),(function(e){n("throw",e,a,s)})):t.resolve(f).then((function(e){l.value=e,a(l)}),(function(e){return n("throw",e,a,s)}))}s(u.arg)}var i;this._invoke=function(e,r){function o(){return new t((function(t,i){n(e,r,t,i)}))}return i=i?i.then(o,o):o()}}function I(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,I(e,n),"throw"===n.method))return g;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return g}var i=c(r,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,g;var o=i.arg;return o?o.done?(n[e.resultName]=o.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,g):o:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,g)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function _(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function O(e){if(e){var n=e[o];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var i=-1,a=function n(){for(;++i<e.length;)if(r.call(e,i))return n.value=e[i],n.done=!1,n;return n.value=t,n.done=!0,n};return a.next=a}}return{next:N}}function N(){return{value:t,done:!0}}return v.prototype=S.constructor=y,y.constructor=v,v.displayName=u(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,s,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},E(x.prototype),x.prototype[a]=function(){return this},e.AsyncIterator=x,e.async=function(t,n,r,i,o){void 0===o&&(o=Promise);var a=new x(l(t,n,r,i),o);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},E(S),u(S,s,"Generator"),S[o]=function(){return this},S.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=O,_.prototype={constructor:_,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(T),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function i(r,i){return s.type="throw",s.arg=e,n.next=r,i&&(n.method="next",n.arg=t),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var u=r.call(a,"catchLoc"),l=r.call(a,"finallyLoc");if(u&&l){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,g):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),g},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),g}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;T(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:O(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),g}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}},53:(e,t)=>{"use strict";var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,u=s.now();t.unstable_now=function(){return s.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,f=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==l?setTimeout(n,0,e):(l=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},i=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var h=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var d=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof d&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,v=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,k=w.port2;w.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();b=e+y;try{m(!0,e)?k.postMessage(null):(g=!1,m=null)}catch(e){throw k.postMessage(null),e}}else g=!1},n=function(e){m=e,g||(g=!0,k.postMessage(null))},r=function(e,n){v=h((function(){e(t.unstable_now())}),n)},i=function(){p(v),v=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<I(i,t)))break e;e[r]=t,e[n]=i,n=r}}function E(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,u=e[s];if(void 0!==a&&0>I(a,n))void 0!==u&&0>I(u,a)?(e[r]=u,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==u&&0>I(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function I(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],T=[],_=1,O=null,N=3,P=!1,A=!1,L=!1;function R(e){for(var t=E(T);null!==t;){if(null===t.callback)x(T);else{if(!(t.startTime<=e))break;x(T),t.sortIndex=t.expirationTime,S(C,t)}t=E(T)}}function D(e){if(L=!1,R(e),!A)if(null!==E(C))A=!0,n(j);else{var t=E(T);null!==t&&r(D,t.startTime-e)}}function j(e,n){A=!1,L&&(L=!1,i()),P=!0;var o=N;try{for(R(n),O=E(C);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=O.callback;if("function"==typeof a){O.callback=null,N=O.priorityLevel;var s=a(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?O.callback=s:O===E(C)&&x(C),R(n)}else x(C);O=E(C)}if(null!==O)var u=!0;else{var l=E(T);null!==l&&r(D,l.startTime-n),u=!1}return u}finally{O=null,N=o,P=!1}}var M=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||P||(A=!0,n(j))},t.unstable_getCurrentPriorityLevel=function(){return N},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(N){case 1:case 2:case 3:var t=3;break;default:t=N}var n=N;N=t;try{return e()}finally{N=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=M,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=N;N=e;try{return t()}finally{N=n}},t.unstable_scheduleCallback=function(e,o,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:_++,callback:o,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>s?(e.sortIndex=a,S(T,e),null===E(C)&&e===E(T)&&(L?i():L=!0,r(D,a-s))):(e.sortIndex=u,S(C,e),A||P||(A=!0,n(j))),e},t.unstable_wrapCallback=function(e){var t=N;return function(){var n=N;N=t;try{return e.apply(this,arguments)}finally{N=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=n(294),t=n(935);function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var l,c={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0},f=e.createContext();function h(){return c}var p=function(){function e(){r(this,e),this.usedNamespaces={}}return o(e,[{key:"addUsedNamespaces",value:function(e){var t=this;e.forEach((function(e){t.usedNamespaces[e]||(t.usedNamespaces[e]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),e}();function d(){return l}var g={type:"3rdParty",init:function(e){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};c=u(u({},c),e)}(e.options.react),function(e){l=e}(e)}};function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function v(e,t){if(e){if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(e,t):void 0}}function y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(r=(a=s.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}return n}}(e,t)||v(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function b(){if(console&&console.warn){for(var e,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];"string"==typeof n[0]&&(n[0]="react-i18next:: ".concat(n[0])),(e=console).warn.apply(e,n)}}var w={};function k(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];"string"==typeof t[0]&&w[t[0]]||("string"==typeof t[0]&&(w[t[0]]=new Date),b.apply(void 0,t))}function S(e,t,n){e.loadNamespaces(t,(function(){e.isInitialized?n():e.on("initialized",(function t(){setTimeout((function(){e.off("initialized",t)}),0),n()}))}))}function E(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!t.languages||!t.languages.length)return k("i18n.languages were undefined or empty",t.languages),!0;var r=t.languages[0],i=!!t.options&&t.options.fallbackLng,o=t.languages[t.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};return!(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&t.services.backendConnector.backend&&t.isLanguageChangingTo&&!a(t.isLanguageChangingTo,e)||!t.hasResourceBundle(r,e)&&t.services.backendConnector.backend&&(!a(r,e)||i&&!a(o,e)))}function x(e){return e.displayName||e.name||("string"==typeof e&&e.length>0?e:"Unknown")}function I(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?I(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):I(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function T(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.i18n,i=(0,e.useContext)(f)||{},o=i.i18n,a=i.defaultNS,s=r||o||d();if(s&&!s.reportNamespaces&&(s.reportNamespaces=new p),!s){k("You will need to pass in an i18next instance by using initReactI18next");var u=function(e){return Array.isArray(e)?e[e.length-1]:e},l=[u,{},!1];return l.t=u,l.i18n={},l.ready=!1,l}var c=C(C(C({},h()),s.options.react),n),g=c.useSuspense,m=t||a||s.options&&s.options.defaultNS;m="string"==typeof m?[m]:m||["translation"],s.reportNamespaces.addUsedNamespaces&&s.reportNamespaces.addUsedNamespaces(m);var v=(s.isInitialized||s.initializedStoreOnce)&&m.every((function(e){return E(e,s,c)}));function b(){return{t:s.getFixedT(null,"fallback"===c.nsMode?m:m[0])}}var w=(0,e.useState)(b()),x=y(w,2),I=x[0],T=x[1],_=(0,e.useRef)(!0);(0,e.useEffect)((function(){var e=c.bindI18n,t=c.bindI18nStore;function n(){_.current&&T(b())}return _.current=!0,v||g||S(s,m,(function(){_.current&&T(b())})),e&&s&&s.on(e,n),t&&s&&s.store.on(t,n),function(){_.current=!1,e&&s&&e.split(" ").forEach((function(e){return s.off(e,n)})),t&&s&&t.split(" ").forEach((function(e){return s.store.off(e,n)}))}}),[m.join()]);var O=[I.t,s,v];if(O.t=I.t,O.i18n=s,O.ready=v,v)return O;if(!v&&!g)return O;throw new Promise((function(e){S(s,m,(function(){e()}))}))}function _(){return(_=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}const O=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var N=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const P=O((function(e){return N.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var A=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),L=Math.abs,R=String.fromCharCode;function D(e){return e.trim()}function j(e,t,n){return e.replace(t,n)}function M(e,t){return e.indexOf(t)}function F(e,t){return 0|e.charCodeAt(t)}function U(e,t,n){return e.slice(t,n)}function z(e){return e.length}function V(e){return e.length}function H(e,t){return t.push(e),e}var B=1,W=1,$=0,q=0,K=0,G="";function X(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:B,column:W,length:a,return:""}}function Y(e,t,n){return X(e,t.root,t.parent,n,t.props,t.children,0)}function J(){return K=q<$?F(G,q++):0,W++,10===K&&(W=1,B++),K}function Q(){return F(G,q)}function Z(){return q}function ee(e,t){return U(G,e,t)}function te(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function ne(e){return B=W=1,$=z(G=e),q=0,[]}function re(e){return G="",e}function ie(e){return D(ee(q-1,ae(91===e?e+2:40===e?e+1:e)))}function oe(e){for(;(K=Q())&&K<33;)J();return te(e)>2||te(K)>3?"":" "}function ae(e){for(;J();)switch(K){case e:return q;case 34:case 39:return ae(34===e||39===e?e:K);case 40:41===e&&ae(e);break;case 92:J()}return q}function se(e,t){for(;J()&&e+K!==57&&(e+K!==84||47!==Q()););return"/*"+ee(t,q-1)+"*"+R(47===e?e:J())}function ue(e){for(;!te(Q());)J();return ee(e,q)}var le="-ms-",ce="-moz-",fe="-webkit-",he="comm",pe="rule",de="decl";function ge(e,t){for(var n="",r=V(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function me(e,t,n,r){switch(e.type){case"@import":case de:return e.return=e.return||e.value;case he:return"";case pe:e.value=e.props.join(",")}return z(n=ge(e.children,r))?e.return=e.value+"{"+n+"}":""}function ve(e,t){switch(function(e,t){return(((t<<2^F(e,0))<<2^F(e,1))<<2^F(e,2))<<2^F(e,3)}(e,t)){case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return fe+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return fe+e+ce+e+le+e+e;case 6828:case 4268:return fe+e+le+e+e;case 6165:return fe+e+le+"flex-"+e+e;case 5187:return fe+e+j(e,/(\w+).+(:[^]+)/,"-webkit-box-$1$2-ms-flex-$1$2")+e;case 5443:return fe+e+le+"flex-item-"+j(e,/flex-|-self/,"")+e;case 4675:return fe+e+le+"flex-line-pack"+j(e,/align-content|flex-|-self/,"")+e;case 5548:return fe+e+le+j(e,"shrink","negative")+e;case 5292:return fe+e+le+j(e,"basis","preferred-size")+e;case 6060:return fe+"box-"+j(e,"-grow","")+fe+e+le+j(e,"grow","positive")+e;case 4554:return fe+j(e,/([^-])(transform)/g,"$1-webkit-$2")+e;case 6187:return j(j(j(e,/(zoom-|grab)/,fe+"$1"),/(image-set)/,fe+"$1"),e,"")+e;case 5495:case 3959:return j(e,/(image-set\([^]*)/,fe+"$1$`$1");case 4968:return j(j(e,/(.+:)(flex-)?(.*)/,"-webkit-box-pack:$3-ms-flex-pack:$3"),/s.+-b[^;]+/,"justify")+fe+e+e;case 4095:case 3583:case 4068:case 2532:return j(e,/(.+)-inline(.+)/,fe+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(z(e)-1-t>6)switch(F(e,t+1)){case 102:t=F(e,t+3);case 109:return j(e,/(.+:)(.+)-([^]+)/,"$1-webkit-$2-$3$1"+ce+(108==t?"$3":"$2-$3"))+e;case 115:return~M(e,"stretch")?ve(j(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==F(e,t+1))break;case 6444:switch(F(e,z(e)-3-(~M(e,"!important")&&10))){case 107:case 111:return j(e,e,fe+e)+e;case 101:return j(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+fe+(45===F(e,14)?"inline-":"")+"box$3$1"+fe+"$2$3$1"+le+"$2box$3")+e}break;case 5936:switch(F(e,t+11)){case 114:return fe+e+le+j(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return fe+e+le+j(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return fe+e+le+j(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return fe+e+le+e+e}return e}function ye(e){return re(be("",null,null,null,[""],e=ne(e),0,[0],e))}function be(e,t,n,r,i,o,a,s,u){for(var l=0,c=0,f=a,h=0,p=0,d=0,g=1,m=1,v=1,y=0,b="",w=i,k=o,S=r,E=b;m;)switch(d=y,y=J()){case 34:case 39:case 91:case 40:E+=ie(y);break;case 9:case 10:case 13:case 32:E+=oe(d);break;case 47:switch(Q()){case 42:case 47:H(ke(se(J(),Z()),t,n),u);break;default:E+="/"}break;case 123*g:s[l++]=z(E)*v;case 125*g:case 59:case 0:switch(y){case 0:case 125:m=0;case 59+c:p>0&&z(E)-f&&H(p>32?Se(E+";",r,n,f-1):Se(j(E," ","")+";",r,n,f-2),u);break;case 59:E+=";";default:if(H(S=we(E,t,n,l,c,i,s,b,w=[],k=[],f),o),123===y)if(0===c)be(E,t,S,S,w,o,f,s,k);else switch(h){case 100:case 109:case 115:be(e,S,S,r&&H(we(e,S,S,0,0,i,s,b,i,w=[],f),k),i,k,f,s,r?w:k);break;default:be(E,S,S,S,[""],k,f,s,k)}}l=c=p=0,g=v=1,b=E="",f=a;break;case 58:f=1+z(E),p=d;default:switch(E+=R(y),y*g){case 38:v=c>0?1:(E+="\f",-1);break;case 44:s[l++]=(z(E)-1)*v,v=1;break;case 64:45===Q()&&(E+=ie(J())),h=Q(),c=z(b=E+=ue(Z())),y++;break;case 45:45===d&&2==z(E)&&(g=0)}}return o}function we(e,t,n,r,i,o,a,s,u,l,c){for(var f=i-1,h=0===i?o:[""],p=V(h),d=0,g=0,m=0;d<r;++d)for(var v=0,y=U(e,f+1,f=L(g=a[d])),b=e;v<p;++v)(b=D(g>0?h[v]+" "+y:j(y,/&\f/g,h[v])))&&(u[m++]=b);return X(e,t,n,0===i?pe:s,u,l,c)}function ke(e,t,n){return X(e,t,n,he,R(K),U(e,2,-2),0)}function Se(e,t,n,r){return X(e,t,n,de,U(e,0,r),U(e,r+1,-1),r)}var Ee=new WeakMap,xe=function(e){if("rule"===e.type&&e.parent&&e.length){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||Ee.get(n))&&!r){Ee.set(e,!0);for(var i=[],o=function(e,t){return re(function(e,t){var n=-1,r=44;do{switch(te(r)){case 0:38===r&&12===Q()&&(t[n]=1),e[n]+=ue(q-1);break;case 2:e[n]+=ie(r);break;case 4:if(44===r){e[++n]=58===Q()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=R(r)}}while(r=J());return e}(ne(e),t))}(t,i),a=n.props,s=0,u=0;s<o.length;s++)for(var l=0;l<a.length;l++,u++)e.props[u]=i[s]?o[s].replace(/&\f/g,a[l]):a[l]+" "+o[s]}}},Ie=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}},Ce=[function(e,t,n,r){if(!e.return)switch(e.type){case de:e.return=ve(e.value,e.length);break;case"@keyframes":return ge([Y(j(e.value,"@","@"+fe),e,"")],r);case pe:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return ge([Y(j(t,/:(read-\w+)/,":-moz-$1"),e,"")],r);case"::placeholder":return ge([Y(j(t,/:(plac\w+)/,":-webkit-input-$1"),e,""),Y(j(t,/:(plac\w+)/,":-moz-$1"),e,""),Y(j(t,/:(plac\w+)/,le+"input-$1"),e,"")],r)}return""}))}}];const Te=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){document.head.appendChild(e),e.setAttribute("data-s","")}))}var r,i,o=e.stylisPlugins||Ce,a={},s=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll("style[data-emotion]"),(function(e){var n=e.getAttribute("data-emotion").split(" ");if(n[0]===t){for(var r=1;r<n.length;r++)a[n[r]]=!0;s.push(e)}}));var u,l,c,f,h=[me,(f=function(e){u.insert(e)},function(e){e.root||(e=e.return)&&f(e)})],p=(l=[xe,Ie].concat(o,h),c=V(l),function(e,t,n,r){for(var i="",o=0;o<c;o++)i+=l[o](e,t,n,r)||"";return i});i=function(e,t,n,r){u=n,ge(ye(e?e+"{"+t.styles+"}":t.styles),p),r&&(d.inserted[t.name]=!0)};var d={key:t,sheet:new A({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend}),nonce:e.nonce,inserted:a,registered:{},insert:i};return d.sheet.hydrate(s),d},_e=function(e){var t=new WeakMap;return function(n){if(t.has(n))return t.get(n);var r=e(n);return t.set(n,r),r}};function Oe(e,t,n){var r="";return n.split(" ").forEach((function(n){void 0!==e[n]?t.push(e[n]+";"):r+=n+" "})),r}var Ne=function(e,t,n){var r=e.key+"-"+t.name;if(!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles),void 0===e.inserted[t.name]){var i=t;do{e.insert(t===i?"."+r:"",i,e.sheet,!0),i=i.next}while(void 0!==i)}};const Pe=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},Ae={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var Le=/[A-Z]|^ms/g,Re=/_EMO_([^_]+?)_([^]*?)_EMO_/g,De=function(e){return 45===e.charCodeAt(1)},je=function(e){return null!=e&&"boolean"!=typeof e},Me=O((function(e){return De(e)?e:e.replace(Le,"-$&").toLowerCase()})),Fe=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Re,(function(e,t,n){return ze={name:t,styles:n,next:ze},t}))}return 1===Ae[e]||De(e)||"number"!=typeof t||0===t?t:t+"px"};function Ue(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return ze={name:n.name,styles:n.styles,next:ze},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)ze={name:r.name,styles:r.styles,next:ze},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=Ue(e,t,n[i])+";";else for(var o in n){var a=n[o];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=o+"{"+t[a]+"}":je(a)&&(r+=Me(o)+":"+Fe(o,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=Ue(e,t,a);switch(o){case"animation":case"animationName":r+=Me(o)+":"+s+";";break;default:r+=o+"{"+s+"}"}}else for(var u=0;u<a.length;u++)je(a[u])&&(r+=Me(o)+":"+Fe(o,a[u])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=ze,o=n(e);return ze=i,Ue(e,t,o)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var ze,Ve=/label:\s*([^\s;\n{]+)\s*;/g,He=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";ze=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,i+=Ue(n,t,o)):i+=o[0];for(var a=1;a<e.length;a++)i+=Ue(n,t,e[a]),r&&(i+=o[a]);Ve.lastIndex=0;for(var s,u="";null!==(s=Ve.exec(i));)u+="-"+s[1];return{name:Pe(i)+u,styles:i,next:ze}},Be=Object.prototype.hasOwnProperty,We=(0,e.createContext)("undefined"!=typeof HTMLElement?Te({key:"css"}):null),$e=(We.Provider,function(t){return(0,e.forwardRef)((function(n,r){var i=(0,e.useContext)(We);return t(n,i,r)}))}),qe=(0,e.createContext)({}),Ke=function(){return(0,e.useContext)(qe)},Ge=_e((function(e){return _e((function(t){return function(e,t){return"function"==typeof t?t(e):_({},e,{},t)}(e,t)}))})),Xe=function(t){var n=(0,e.useContext)(qe);return t.theme!==n&&(n=Ge(n)(t.theme)),(0,e.createElement)(qe.Provider,{value:n},t.children)},Ye="__EMOTION_TYPE_PLEASE_DO_NOT_USE__",Je=function(e,t){var n={};for(var r in t)Be.call(t,r)&&(n[r]=t[r]);return n[Ye]=e,n},Qe=$e((function(t,n,r){var i=t.css;"string"==typeof i&&void 0!==n.registered[i]&&(i=n.registered[i]);var o=t[Ye],a=[i],s="";"string"==typeof t.className?s=Oe(n.registered,a,t.className):null!=t.className&&(s=t.className+" ");var u=He(a,void 0,"function"==typeof i||Array.isArray(i)?(0,e.useContext)(qe):void 0);Ne(n,u,"string"==typeof o),s+=n.key+"-"+u.name;var l={};for(var c in t)Be.call(t,c)&&"css"!==c&&c!==Ye&&(l[c]=t[c]);return l.ref=r,l.className=s,(0,e.createElement)(o,l)})),Ze=P,et=function(e){return"theme"!==e},tt=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Ze:et},nt=function(e,t,n){var r;if(t){var i=t.shouldForwardProp;r=e.__emotion_forwardProp&&i?function(t){return e.__emotion_forwardProp(t)&&i(t)}:i}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r};const rt=function t(n,r){var i,o,a=n.__emotion_real===n,s=a&&n.__emotion_base||n;void 0!==r&&(i=r.label,o=r.target);var u=nt(n,r,a),l=u||tt(s),c=!l("as");return function(){var f=arguments,h=a&&void 0!==n.__emotion_styles?n.__emotion_styles.slice(0):[];if(void 0!==i&&h.push("label:"+i+";"),null==f[0]||void 0===f[0].raw)h.push.apply(h,f);else{h.push(f[0][0]);for(var p=f.length,d=1;d<p;d++)h.push(f[d],f[0][d])}var g=$e((function(t,n,r){var i=c&&t.as||s,a="",f=[],p=t;if(null==t.theme){for(var d in p={},t)p[d]=t[d];p.theme=(0,e.useContext)(qe)}"string"==typeof t.className?a=Oe(n.registered,f,t.className):null!=t.className&&(a=t.className+" ");var g=He(h.concat(f),n.registered,p);Ne(n,g,"string"==typeof i),a+=n.key+"-"+g.name,void 0!==o&&(a+=" "+o);var m=c&&void 0===u?tt(i):l,v={};for(var y in t)c&&"as"===y||m(y)&&(v[y]=t[y]);return v.className=a,v.ref=r,(0,e.createElement)(i,v)}));return g.displayName=void 0!==i?i:"Styled("+("string"==typeof s?s:s.displayName||s.name||"Component")+")",g.defaultProps=n.defaultProps,g.__emotion_real=g,g.__emotion_base=s,g.__emotion_styles=h,g.__emotion_forwardProp=u,Object.defineProperty(g,"toString",{value:function(){return"."+o}}),g.withComponent=function(e,n){return t(e,_({},r,{},n,{shouldForwardProp:nt(g,n,!0)})).apply(void 0,h)},g}};function it(){return(it=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var ot=function(e,t,n,r,i){for(t=t&&t.split?t.split("."):[t],r=0;r<t.length;r++)e=e?e[t[r]]:i;return e===i?n:e},at=[40,52,64].map((function(e){return e+"em"})),st={space:[0,4,8,16,32,64,128,256,512],fontSizes:[12,14,16,20,24,32,48,64,72]},ut={bg:"backgroundColor",m:"margin",mt:"marginTop",mr:"marginRight",mb:"marginBottom",ml:"marginLeft",mx:"marginX",my:"marginY",p:"padding",pt:"paddingTop",pr:"paddingRight",pb:"paddingBottom",pl:"paddingLeft",px:"paddingX",py:"paddingY"},lt={marginX:["marginLeft","marginRight"],marginY:["marginTop","marginBottom"],paddingX:["paddingLeft","paddingRight"],paddingY:["paddingTop","paddingBottom"],size:["width","height"]},ct={color:"colors",backgroundColor:"colors",borderColor:"colors",margin:"space",marginTop:"space",marginRight:"space",marginBottom:"space",marginLeft:"space",marginX:"space",marginY:"space",padding:"space",paddingTop:"space",paddingRight:"space",paddingBottom:"space",paddingLeft:"space",paddingX:"space",paddingY:"space",top:"space",right:"space",bottom:"space",left:"space",gridGap:"space",gridColumnGap:"space",gridRowGap:"space",gap:"space",columnGap:"space",rowGap:"space",fontFamily:"fonts",fontSize:"fontSizes",fontWeight:"fontWeights",lineHeight:"lineHeights",letterSpacing:"letterSpacings",border:"borders",borderTop:"borders",borderRight:"borders",borderBottom:"borders",borderLeft:"borders",borderWidth:"borderWidths",borderStyle:"borderStyles",borderRadius:"radii",borderTopRightRadius:"radii",borderTopLeftRadius:"radii",borderBottomRightRadius:"radii",borderBottomLeftRadius:"radii",borderTopWidth:"borderWidths",borderTopColor:"colors",borderTopStyle:"borderStyles",borderBottomWidth:"borderWidths",borderBottomColor:"colors",borderBottomStyle:"borderStyles",borderLeftWidth:"borderWidths",borderLeftColor:"colors",borderLeftStyle:"borderStyles",borderRightWidth:"borderWidths",borderRightColor:"colors",borderRightStyle:"borderStyles",outlineColor:"colors",boxShadow:"shadows",textShadow:"shadows",zIndex:"zIndices",width:"sizes",minWidth:"sizes",maxWidth:"sizes",height:"sizes",minHeight:"sizes",maxHeight:"sizes",flexBasis:"sizes",size:"sizes",fill:"colors",stroke:"colors"},ft=function(e,t){if("number"!=typeof t||t>=0)return ot(e,t,t);var n=Math.abs(t),r=ot(e,n,n);return"string"==typeof r?"-"+r:-1*r},ht=["margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","top","bottom","left","right"].reduce((function(e,t){var n;return it({},e,((n={})[t]=ft,n))}),{}),pt=function e(t){return function(n){void 0===n&&(n={});var r=it({},st,{},n.theme||n),i={},o=function(e){return function(t){var n={},r=ot(t,"breakpoints",at),i=[null].concat(r.map((function(e){return"@media screen and (min-width: "+e+")"})));for(var o in e){var a="function"==typeof e[o]?e[o](t):e[o];if(null!=a)if(Array.isArray(a))for(var s=0;s<a.slice(0,i.length).length;s++){var u=i[s];u?(n[u]=n[u]||{},null!=a[s]&&(n[u][o]=a[s])):n[o]=a[s]}else n[o]=a}return n}}("function"==typeof t?t(r):t)(r);for(var a in o){var s=o[a],u="function"==typeof s?s(r):s;if("variant"!==a)if(u&&"object"==typeof u)i[a]=e(u)(r);else{var l=ot(ut,a,a),c=ot(ct,l),f=ot(r,c,ot(r,l,{})),h=ot(ht,l,ot)(f,u,u);if(lt[l])for(var p=lt[l],d=0;d<p.length;d++)i[p[d]]=h;else i[l]=h}else i=it({},i,{},e(ot(r,u))(r))}return i}};const dt=pt;function gt(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}function mt(e,t){if(null==e)return{};var n,r,i=gt(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function vt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function yt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?vt(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):vt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}n(679);var bt=function(t,n){var r=arguments;if(null==n||!Be.call(n,"css"))return e.createElement.apply(void 0,r);var i=r.length,o=new Array(i);o[0]=Qe,o[1]=Je(t,n);for(var a=2;a<i;a++)o[a]=r[a];return e.createElement.apply(null,o)};function wt(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return He(t)}var kt=rt("div",{target:"e1dxxirb0"})(pt({height:"644px",backgroundImage:'url("https://cdn.pixabay.com/photo/2016/10/16/10/30/office-space-1744803_960_720.jpg")',backgroundRepeat:"no-repeat",backgroundPosition:"center",margin:"0 auto"}),""),St={name:"1uw8buf",styles:"padding:40px 80px"},Et={name:"m9ysy4",styles:"font-size:60px;font-weight:200;text-align:center;max-width:800px;margin:0 auto;padding-bottom:40px"},xt={name:"2vjjex",styles:"font-size:30px;font-weight:200;text-align:center;max-width:800px;margin:0 auto;padding:40px 0"};const It=function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(r){function i(i){var o=i.forwardedRef,a=mt(i,["forwardedRef"]),s=y(T(t,a),3),u=s[0],l=s[1],c=s[2],f=yt(yt({},a),{},{t:u,i18n:l,tReady:c});return n.withRef&&o?f.ref=o:!n.withRef&&o&&(f.forwardedRef=o),e.createElement(r,f)}return i.displayName="withI18nextTranslation(".concat(x(r),")"),i.WrappedComponent=r,n.withRef?e.forwardRef((function(t,n){return e.createElement(i,Object.assign({},t,{forwardedRef:n}))})):i}}()((function(e){var t=e.content;return bt("div",{css:St},bt("div",{css:Et},t.valueProp),bt(kt,null),bt("div",{css:xt},t.youWillKnowMoreShortly))}));var Ct=function(e,t){return(Ct=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},Tt=function(){return(Tt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function _t(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function Ot(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(_t(arguments[t]));return e}function Nt(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&"__proto__"!==n&&(e[n]=Nt(e[n],t[n]));return e}var Pt=function(){function e(){var e=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch((function(){})),1===e.length?e(n):e(n,r))}},e}();function At(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(e){return!1}}var Lt=function(e){function t(n,r,i){var o=e.call(this,r)||this;return o.code=n,o.customData=i,o.name="FirebaseError",Object.setPrototypeOf(o,t.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,Rt.prototype.create),o}return function(e,t){function n(){this.constructor=e}Ct(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(t,e),t}(Error),Rt=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n}return e.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=t[0]||{},i=this.service+"/"+e,o=this.errors[e],a=o?Dt(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",u=new Lt(i,s,r);return u},e}();function Dt(e,t){return e.replace(jt,(function(e,n){var r=t[n];return null!=r?String(r):"<"+n+"?>"}))}var jt=/\{\$([^}]+)}/g;function Mt(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Ft(e,t){var n=new Ut(e,t);return n.subscribe.bind(n)}!function(){function e(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],l=this.chain_[2],c=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(o=c^u&(l^c),a=1518500249):(o=u^l^c,a=1859775393):r<60?(o=u&l|c&(u|l),a=2400959708):(o=u^l^c,a=3395469782),i=(s<<5|s>>>27)+o+f+a+n[r]&4294967295,f=c,c=l,l=4294967295&(u<<30|u>>>2),u=s,s=i;this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+l&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},e.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<t;){if(0===o)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(i[o]=e.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<t;)if(i[o]=e[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=t}},e.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)e[r]=this.chain_[n]>>i&255,++r;return e}}();var Ut=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((function(){e(n)})).catch((function(e){n.error(e)}))}return e.prototype.next=function(e){this.forEachObserver((function(t){t.next(e)}))},e.prototype.error=function(e){this.forEachObserver((function(t){t.error(e)})),this.close(e)},e.prototype.complete=function(){this.forEachObserver((function(e){e.complete()})),this.close()},e.prototype.subscribe=function(e,t,n){var r,i=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var i=r[n];if(i in e&&"function"==typeof e[i])return!0}return!1}(e)?e:{next:e,error:t,complete:n}).next&&(r.next=zt),void 0===r.error&&(r.error=zt),void 0===r.complete&&(r.complete=zt);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(e){}})),this.observers.push(r),o},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((function(){t.observers=void 0,t.onNoObservers=void 0})))},e}();function zt(){}var Vt,Ht=function(){function e(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e}(),Bt="[DEFAULT]",Wt=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return e.prototype.get=function(e){void 0===e&&(e=Bt);var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new Pt;this.instancesDeferred.set(t,n);try{var r=this.getOrInitializeService(t);r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t=Tt({identifier:Bt,optional:!1},e),n=t.identifier,r=t.optional,i=this.normalizeInstanceIdentifier(n);try{var o=this.getOrInitializeService(i);if(!o){if(r)return null;throw Error("Service "+this.name+" is not available")}return o}catch(e){if(r)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=e,function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService(Bt)}catch(e){}try{for(var r=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(this.instancesDeferred.entries()),i=r.next();!i.done;i=r.next()){var o=_t(i.value,2),a=o[0],s=o[1],u=this.normalizeInstanceIdentifier(a);try{var l=this.getOrInitializeService(u);s.resolve(l)}catch(e){}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}},e.prototype.clearInstance=function(e){void 0===e&&(e=Bt),this.instancesDeferred.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return e=this,t=void 0,r=function(){var e;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(Ot(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()})),e.filter((function(e){return"_delete"in e})).map((function(e){return e._delete()}))))];case 1:return t.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.isInitialized=function(e){return void 0===e&&(e=Bt),this.instances.has(e)},e.prototype.getOrInitializeService=function(e){var t=this.instances.get(e);return!t&&this.component&&(t=this.component.instanceFactory(this.container,function(e){return e===Bt?void 0:e}(e)),this.instances.set(e,t)),t||null},e.prototype.normalizeInstanceIdentifier=function(e){return this.component?this.component.multipleInstances?e:Bt:e},e}(),$t=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new Wt(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}();function qt(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}var Kt,Gt=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(Kt||(Kt={}));var Xt,Yt={debug:Kt.DEBUG,verbose:Kt.VERBOSE,info:Kt.INFO,warn:Kt.WARN,error:Kt.ERROR,silent:Kt.SILENT},Jt=Kt.INFO,Qt=((Vt={})[Kt.DEBUG]="log",Vt[Kt.VERBOSE]="log",Vt[Kt.INFO]="info",Vt[Kt.WARN]="warn",Vt[Kt.ERROR]="error",Vt),Zt=function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];if(!(t<e.logLevel)){var i=(new Date).toISOString(),o=Qt[t];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+t+")");console[o].apply(console,qt(["["+i+"]  "+e.name+":"],n))}},en=function(){function e(e){this.name=e,this._logLevel=Jt,this._logHandler=Zt,this._userLogHandler=null,Gt.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in Kt))throw new TypeError('Invalid value "'+e+'" assigned to `logLevel`');this._logLevel=e},enumerable:!1,configurable:!0}),e.prototype.setLogLevel=function(e){this._logLevel="string"==typeof e?Yt[e]:e},Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(e){this._userLogHandler=e},enumerable:!1,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,qt([this,Kt.DEBUG],e)),this._logHandler.apply(this,qt([this,Kt.DEBUG],e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,qt([this,Kt.VERBOSE],e)),this._logHandler.apply(this,qt([this,Kt.VERBOSE],e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,qt([this,Kt.INFO],e)),this._logHandler.apply(this,qt([this,Kt.INFO],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,qt([this,Kt.WARN],e)),this._logHandler.apply(this,qt([this,Kt.WARN],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._userLogHandler&&this._userLogHandler.apply(this,qt([this,Kt.ERROR],e)),this._logHandler.apply(this,qt([this,Kt.ERROR],e))},e}();function tn(e){Gt.forEach((function(t){t.setLogLevel(e)}))}var nn,rn=((Xt={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",Xt["bad-app-name"]="Illegal App name: '{$appName}",Xt["duplicate-app"]="Firebase App named '{$appName}' already exists",Xt["app-deleted"]="Firebase App named '{$appName}' already deleted",Xt["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",Xt["invalid-log-argument"]="First argument to `onLog` must be null or a function.",Xt),on=new Rt("app","Firebase",rn),an="@firebase/app",sn="[DEFAULT]",un=((nn={})[an]="fire-core",nn["@firebase/analytics"]="fire-analytics",nn["@firebase/auth"]="fire-auth",nn["@firebase/database"]="fire-rtdb",nn["@firebase/functions"]="fire-fn",nn["@firebase/installations"]="fire-iid",nn["@firebase/messaging"]="fire-fcm",nn["@firebase/performance"]="fire-perf",nn["@firebase/remote-config"]="fire-rc",nn["@firebase/storage"]="fire-gcs",nn["@firebase/firestore"]="fire-fst",nn["fire-js"]="fire-js",nn["firebase-wrapper"]="fire-js-all",nn),ln=new en("@firebase/app"),cn=function(){function e(e,t,n){var r=this;this.firebase_=n,this.isDeleted_=!1,this.name_=t.name,this.automaticDataCollectionEnabled_=t.automaticDataCollectionEnabled||!1,this.options_=Nt(void 0,e),this.container=new $t(t.name),this._addComponent(new Ht("app",(function(){return r}),"PUBLIC")),this.firebase_.INTERNAL.components.forEach((function(e){return r._addComponent(e)}))}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(e){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise((function(t){e.checkDestroyed_(),t()})).then((function(){return e.firebase_.INTERNAL.removeApp(e.name_),Promise.all(e.container.getProviders().map((function(e){return e.delete()})))})).then((function(){e.isDeleted_=!0}))},e.prototype._getService=function(e,t){return void 0===t&&(t=sn),this.checkDestroyed_(),this.container.getProvider(e).getImmediate({identifier:t})},e.prototype._removeServiceInstance=function(e,t){void 0===t&&(t=sn),this.container.getProvider(e).clearInstance(t)},e.prototype._addComponent=function(e){try{this.container.addComponent(e)}catch(t){ln.debug("Component "+e.name+" failed to register with FirebaseApp "+this.name,t)}},e.prototype._addOrOverwriteComponent=function(e){this.container.addOrOverwriteComponent(e)},e.prototype.toJSON=function(){return{name:this.name,automaticDataCollectionEnabled:this.automaticDataCollectionEnabled,options:this.options}},e.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw on.create("app-deleted",{appName:this.name_})},e}();cn.prototype.name&&cn.prototype.options||cn.prototype.delete||console.log("dc");var fn=function e(){var t=function(e){var t={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={}),"object"==typeof i&&null!==i||(i={name:i});var o=i;void 0===o.name&&(o.name=sn);var a=o.name;if("string"!=typeof a||!a)throw on.create("bad-app-name",{appName:String(a)});if(Mt(t,a))throw on.create("duplicate-app",{appName:a});var s=new e(n,o,r);return t[a]=s,s},app:i,registerVersion:function(e,t,n){var r,i=null!==(r=un[e])&&void 0!==r?r:e;n&&(i+="-"+n);var a=i.match(/\s|\//),s=t.match(/\s|\//);if(a||s){var u=['Unable to register library "'+i+'" with version "'+t+'":'];return a&&u.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),a&&s&&u.push("and"),s&&u.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void ln.warn(u.join(" "))}o(new Ht(i+"-version",(function(){return{library:i,version:t}}),"VERSION"))},setLogLevel:tn,onLog:function(e,t){if(null!==e&&"function"!=typeof e)throw on.create("invalid-log-argument");!function(e,t){for(var n=function(n){var r=null;t&&t.level&&(r=Yt[t.level]),n.userLogHandler=null===e?null:function(t,n){for(var i=[],o=2;o<arguments.length;o++)i[o-2]=arguments[o];var a=i.map((function(e){if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((function(e){return e})).join(" ");n>=(null!=r?r:t.logLevel)&&e({level:Kt[n].toLowerCase(),message:a,args:i,type:t.name})}},r=0,i=Gt;r<i.length;r++)n(i[r])}(e,t)},apps:null,SDK_VERSION:"8.2.9",INTERNAL:{registerComponent:o,removeApp:function(e){delete t[e]},components:n,useAsService:function(e,t){return"serverAuth"===t?null:t}}};function i(e){if(!Mt(t,e=e||sn))throw on.create("no-app",{appName:e});return t[e]}function o(o){var a=o.name;if(n.has(a))return ln.debug("There were multiple attempts to register component "+a+"."),"PUBLIC"===o.type?r[a]:null;if(n.set(a,o),"PUBLIC"===o.type){var s=function(e){if(void 0===e&&(e=i()),"function"!=typeof e[a])throw on.create("invalid-app-argument",{appName:a});return e[a]()};void 0!==o.serviceProps&&Nt(s,o.serviceProps),r[a]=s,e.prototype[a]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this._getService.bind(this,a).apply(this,o.multipleInstances?e:[])}}for(var u=0,l=Object.keys(t);u<l.length;u++){var c=l[u];t[c]._addComponent(o)}return"PUBLIC"===o.type?r[a]:null}return r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(t).map((function(e){return t[e]}))}}),i.App=e,r}(cn);return t.INTERNAL=Tt(Tt({},t.INTERNAL),{createFirebaseNamespace:e,extendNamespace:function(e){Nt(t,e)},createSubscribe:Ft,ErrorFactory:Rt,deepExtend:Nt}),t}(),hn=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){var t=e.getImmediate();return t.library+"/"+t.version}return null})).filter((function(e){return e})).join(" ")},e}();if("object"==typeof self&&self.self===self&&void 0!==self.firebase){ln.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var pn=self.firebase.SDK_VERSION;pn&&pn.indexOf("LITE")>=0&&ln.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var dn=fn.initializeApp;fn.initializeApp=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return At()&&ln.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),dn.apply(void 0,e)};var gn=fn;!function(e,t){e.INTERNAL.registerComponent(new Ht("platform-logger",(function(e){return new hn(e)}),"PRIVATE")),e.registerVersion(an,"0.6.15",void 0),e.registerVersion("fire-js","")}(gn);const mn=gn;(function(){var e,t="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){e!=Array.prototype&&e!=Object.prototype&&(e[t]=n.value)},r=function(e){e=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g,e];for(var t=0;t<e.length;++t){var r=e[t];if(r&&r.Math==Math)return r}return globalThis}(this);function i(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function o(e){var t="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return t?t.call(e):{next:i(e)}}!function(e,n){if(n){var i=r;e=e.split(".");for(var o=0;o<e.length-1;o++){var a=e[o];a in i||(i[a]={}),i=i[a]}(n=n(o=i[e=e[e.length-1]]))!=o&&null!=n&&t(i,e,{configurable:!0,writable:!0,value:n})}}("Promise",(function(e){function t(e){this.b=0,this.c=void 0,this.a=[];var t=this.f();try{e(t.resolve,t.reject)}catch(e){t.reject(e)}}function n(){this.a=null}function i(e){return e instanceof t?e:new t((function(t){t(e)}))}if(e)return e;n.prototype.b=function(e){if(null==this.a){this.a=[];var t=this;this.c((function(){t.g()}))}this.a.push(e)};var a=r.setTimeout;n.prototype.c=function(e){a(e,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var e=this.a;this.a=[];for(var t=0;t<e.length;++t){var n=e[t];e[t]=null;try{n()}catch(e){this.f(e)}}}this.a=null},n.prototype.f=function(e){this.c((function(){throw e}))},t.prototype.f=function(){function e(e){return function(r){n||(n=!0,e.call(t,r))}}var t=this,n=!1;return{resolve:e(this.m),reject:e(this.g)}},t.prototype.m=function(e){if(e===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof t)this.s(e);else{e:switch(typeof e){case"object":var n=null!=e;break e;case"function":n=!0;break e;default:n=!1}n?this.v(e):this.h(e)}},t.prototype.v=function(e){var t=void 0;try{t=e.then}catch(e){return void this.g(e)}"function"==typeof t?this.u(t,e):this.h(e)},t.prototype.g=function(e){this.i(2,e)},t.prototype.h=function(e){this.i(1,e)},t.prototype.i=function(e,t){if(0!=this.b)throw Error("Cannot settle("+e+", "+t+"): Promise already settled in state"+this.b);this.b=e,this.c=t,this.l()},t.prototype.l=function(){if(null!=this.a){for(var e=0;e<this.a.length;++e)s.b(this.a[e]);this.a=null}};var s=new n;return t.prototype.s=function(e){var t=this.f();e.Qa(t.resolve,t.reject)},t.prototype.u=function(e,t){var n=this.f();try{e.call(t,n.resolve,n.reject)}catch(e){n.reject(e)}},t.prototype.then=function(e,n){function r(e,t){return"function"==typeof e?function(t){try{i(e(t))}catch(e){o(e)}}:t}var i,o,a=new t((function(e,t){i=e,o=t}));return this.Qa(r(e,i),r(n,o)),a},t.prototype.catch=function(e){return this.then(void 0,e)},t.prototype.Qa=function(e,t){function n(){switch(r.b){case 1:e(r.c);break;case 2:t(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?s.b(n):this.a.push(n)},t.resolve=i,t.reject=function(e){return new t((function(t,n){n(e)}))},t.race=function(e){return new t((function(t,n){for(var r=o(e),a=r.next();!a.done;a=r.next())i(a.value).Qa(t,n)}))},t.all=function(e){var n=o(e),r=n.next();return r.done?i([]):new t((function(e,t){function o(t){return function(n){a[t]=n,0==--s&&e(a)}}var a=[],s=0;do{a.push(void 0),s++,i(r.value).Qa(o(a.length-1),t),r=n.next()}while(!r.done)}))},t}));var a=a||{},s=this||self,u=/^[\w+/_-]+[=]{0,2}$/,l=null;function c(e){return(e=e.querySelector&&e.querySelector("script[nonce]"))&&(e=e.nonce||e.getAttribute("nonce"))&&u.test(e)?e:""}function f(){}function h(e){var t=typeof e;return"object"!=t?t:e?Array.isArray(e)?"array":t:"null"}function p(e){var t=h(e);return"array"==t||"object"==t&&"number"==typeof e.length}function d(e){return"function"==h(e)}function g(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}function m(e){return Object.prototype.hasOwnProperty.call(e,v)&&e[v]||(e[v]=++y)}var v="closure_uid_"+(1e9*Math.random()>>>0),y=0;function b(e,t,n){return e.call.apply(e.bind,arguments)}function w(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function k(e,t,n){return(k=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?b:w).apply(null,arguments)}function S(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}var E=Date.now;function x(e,t){function n(){}n.prototype=t.prototype,e.ab=t.prototype,e.prototype=new n,e.prototype.constructor=e}function I(e){return e}function C(e,t,n){this.code=O+e,this.message=t||N[e]||"",this.a=n||null}function T(e){var t=e&&e.code;return t?new C(t.substring(O.length),e.message,e.serverResponse):null}x(C,Error),C.prototype.w=function(){var e={code:this.code,message:this.message};return this.a&&(e.serverResponse=this.a),e},C.prototype.toJSON=function(){return this.w()};var _,O="auth/",N={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},P={ld:{Ta:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Za:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Wa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},sd:{Ta:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Za:"https://securetoken.googleapis.com/v1/token",Wa:"https://identitytoolkit.googleapis.com/v2/",id:"p"},ud:{Ta:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Za:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Wa:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},vd:{Ta:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Za:"https://test-securetoken.sandbox.googleapis.com/v1/token",Wa:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function A(e){for(var t in P)if(P[t].id===e)return{firebaseEndpoint:(e=P[t]).Ta,secureTokenEndpoint:e.Za,identityPlatformEndpoint:e.Wa};return null}function L(e){if(!e)return!1;try{return!!e.$goog_Thenable}catch(e){return!1}}function R(e){if(Error.captureStackTrace)Error.captureStackTrace(this,R);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e))}function D(e,t){for(var n="",r=(e=e.split("%s")).length-1,i=0;i<r;i++)n+=e[i]+(i<t.length?t[i]:"%s");R.call(this,n+e[r])}function j(e,t){throw new D("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1))}function M(e,t){this.c=e,this.f=t,this.b=0,this.a=null}function F(e,t){e.f(t),100>e.b&&(e.b++,t.next=e.a,e.a=t)}function U(){this.b=this.a=null}_=A("__EID__")?"__EID__":void 0,x(R,Error),R.prototype.name="CustomError",x(D,R),D.prototype.name="AssertionError",M.prototype.get=function(){if(0<this.b){this.b--;var e=this.a;this.a=e.next,e.next=null}else e=this.c();return e};var z=new M((function(){return new H}),(function(e){e.reset()}));function V(){var e=bt,t=null;return e.a&&(t=e.a,e.a=e.a.next,e.a||(e.b=null),t.next=null),t}function H(){this.next=this.b=this.a=null}U.prototype.add=function(e,t){var n=z.get();n.set(e,t),this.b?this.b.next=n:this.a=n,this.b=n},H.prototype.set=function(e,t){this.a=e,this.b=t,this.next=null},H.prototype.reset=function(){this.next=this.b=this.a=null};var B=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if("string"==typeof e)return"string"!=typeof t||1!=t.length?-1:e.indexOf(t,0);for(var n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},W=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){for(var r=e.length,i="string"==typeof e?e.split(""):e,o=0;o<r;o++)o in i&&t.call(n,i[o],o,e)},$=Array.prototype.filter?function(e,t){return Array.prototype.filter.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=[],i=0,o="string"==typeof e?e.split(""):e,a=0;a<n;a++)if(a in o){var s=o[a];t.call(void 0,s,a,e)&&(r[i++]=s)}return r},q=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=Array(n),i="string"==typeof e?e.split(""):e,o=0;o<n;o++)o in i&&(r[o]=t.call(void 0,i[o],o,e));return r},K=Array.prototype.some?function(e,t){return Array.prototype.some.call(e,t,void 0)}:function(e,t){for(var n=e.length,r="string"==typeof e?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e))return!0;return!1};function G(e,t){return 0<=B(e,t)}function X(e,t){var n;return(n=0<=(t=B(e,t)))&&Array.prototype.splice.call(e,t,1),n}function Y(e,t){!function(e,t){for(var n="string"==typeof e?e.split(""):e,r=e.length-1;0<=r;--r)r in n&&t.call(void 0,n[r],r,e)}(e,(function(n,r){t.call(void 0,n,r,e)&&Array.prototype.splice.call(e,r,1).length}))}function J(e){return Array.prototype.concat.apply([],arguments)}function Q(e){var t=e.length;if(0<t){for(var n=Array(t),r=0;r<t;r++)n[r]=e[r];return n}return[]}var Z,ee=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]},te=/&/g,ne=/</g,re=/>/g,ie=/"/g,oe=/'/g,ae=/\x00/g,se=/[\x00&<>"']/;function ue(e,t){return-1!=e.indexOf(t)}function le(e,t){return e<t?-1:e>t?1:0}e:{var ce=s.navigator;if(ce){var fe=ce.userAgent;if(fe){Z=fe;break e}}Z=""}function he(e){return ue(Z,e)}function pe(e,t){for(var n in e)t.call(void 0,e[n],n,e)}function de(e){for(var t in e)return!1;return!0}function ge(e){var t,n={};for(t in e)n[t]=e[t];return n}var me="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function ve(e,t){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])e[n]=r[n];for(var o=0;o<me.length;o++)n=me[o],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function ye(e,t){e:{try{var n=e&&e.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||s).Element&&r.Location){var i=r;break e}}catch(e){}i=null}if(i&&void 0!==i[t]&&(!e||!(e instanceof i[t])&&(e instanceof i.Location||e instanceof i.Element))){if(g(e))try{var o=e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e)}catch(e){o="<object could not be stringified>"}else o=void 0===e?"undefined":null===e?"null":typeof e;j("Argument is not a %s (or a non-Element, non-Location mock); got: %s",t,o)}}function be(e,t){this.a=e===Ee&&t||"",this.b=Se}function we(e){return e instanceof be&&e.constructor===be&&e.b===Se?e.a:(j("expected object of type Const, got '"+e+"'"),"type_error:Const")}be.prototype.sa=!0,be.prototype.ra=function(){return this.a},be.prototype.toString=function(){return"Const{"+this.a+"}"};var ke,Se={},Ee={};function xe(){if(void 0===ke){var e=null,t=s.trustedTypes;if(t&&t.createPolicy){try{e=t.createPolicy("goog#html",{createHTML:I,createScript:I,createScriptURL:I})}catch(e){s.console&&s.console.error(e.message)}ke=e}else ke=e}return ke}function Ie(e,t){this.a=t===Ne?e:""}function Ce(e){return e instanceof Ie&&e.constructor===Ie?e.a:(j("expected object of type TrustedResourceUrl, got '"+e+"' of type "+h(e)),"type_error:TrustedResourceUrl")}function Te(e,t){var n=we(e);if(!Oe.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(e){var t=xe();return new Ie(e=t?t.createScriptURL(e):e,Ne)}(e=n.replace(_e,(function(e,r){if(!Object.prototype.hasOwnProperty.call(t,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[r])instanceof be?we(e):encodeURIComponent(String(e))})))}Ie.prototype.sa=!0,Ie.prototype.ra=function(){return this.a.toString()},Ie.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var _e=/%{(\w+)}/g,Oe=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Ne={};function Pe(e,t){this.a=t===Fe?e:""}function Ae(e){return e instanceof Pe&&e.constructor===Pe?e.a:(j("expected object of type SafeUrl, got '"+e+"' of type "+h(e)),"type_error:SafeUrl")}Pe.prototype.sa=!0,Pe.prototype.ra=function(){return this.a.toString()},Pe.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Le=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,Re=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,De=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function je(e){if(e instanceof Pe)return e;if(e="object"==typeof e&&e.sa?e.ra():String(e),De.test(e))e=new Pe(e,Fe);else{var t=(e=(e=String(e)).replace(/(%0A|%0D)/g,"")).match(Re);e=t&&Le.test(t[1])?new Pe(e,Fe):null}return e}function Me(e){return e instanceof Pe?e:(e="object"==typeof e&&e.sa?e.ra():String(e),De.test(e)||(e="about:invalid#zClosurez"),new Pe(e,Fe))}var Fe={},Ue=new Pe("about:invalid#zClosurez",Fe);function ze(e,t,n){this.a=n===Ve?e:""}ze.prototype.sa=!0,ze.prototype.ra=function(){return this.a.toString()},ze.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Ve={};function He(e,t,n,r){return e=e instanceof Pe?e:Me(e),t=t||s,n=n instanceof be?we(n):n||"",t.open(Ae(e),n,r,void 0)}function Be(e,t){for(var n=e.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function We(e){return se.test(e)&&(-1!=e.indexOf("&")&&(e=e.replace(te,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(ne,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(re,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(ie,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace(oe,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace(ae,"&#0;"))),e}function $e(e){return $e[" "](e),e}$e[" "]=f;var qe,Ke,Ge=he("Opera"),Xe=he("Trident")||he("MSIE"),Ye=he("Edge"),Je=Ye||Xe,Qe=he("Gecko")&&!(ue(Z.toLowerCase(),"webkit")&&!he("Edge"))&&!(he("Trident")||he("MSIE"))&&!he("Edge"),Ze=ue(Z.toLowerCase(),"webkit")&&!he("Edge");function et(){var e=s.document;return e?e.documentMode:void 0}e:{var tt="",nt=(Ke=Z,Qe?/rv:([^\);]+)(\)|;)/.exec(Ke):Ye?/Edge\/([\d\.]+)/.exec(Ke):Xe?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Ke):Ze?/WebKit\/(\S+)/.exec(Ke):Ge?/(?:Version)[ \/]?(\S+)/.exec(Ke):void 0);if(nt&&(tt=nt?nt[1]:""),Xe){var rt=et();if(null!=rt&&rt>parseFloat(tt)){qe=String(rt);break e}}qe=tt}var it,ot={};function at(e){return function(e,t){var n=ot;return Object.prototype.hasOwnProperty.call(n,e)?n[e]:n[e]=t()}(e,(function(){for(var t=0,n=ee(String(qe)).split("."),r=ee(String(e)).split("."),i=Math.max(n.length,r.length),o=0;0==t&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;t=le(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||le(0==a[2].length,0==s[2].length)||le(a[2],s[2]),a=a[3],s=s[3]}while(0==t)}return 0<=t}))}s.document&&Xe?it=et()||parseInt(qe,10)||void 0:it=void 0;var st=it;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Ke){}var ut=!Xe||9<=Number(st);function lt(e){var t=document;return"string"==typeof e?t.getElementById(e):e}function ct(e,t){pe(t,(function(t,n){t&&"object"==typeof t&&t.sa&&(t=t.ra()),"style"==n?e.style.cssText=t:"class"==n?e.className=t:"for"==n?e.htmlFor=t:pt.hasOwnProperty(n)?e.setAttribute(pt[n],t):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?e.setAttribute(n,t):e[n]=t}))}var ft,ht,pt={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function dt(e,t,n){function r(n){n&&t.appendChild("string"==typeof n?e.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];if(!p(o)||g(o)&&0<o.nodeType)r(o);else{e:{if(o&&"number"==typeof o.length){if(g(o)){var a="function"==typeof o.item||"string"==typeof o.item;break e}if(d(o)){a="function"==typeof o.item;break e}}a=!1}W(a?Q(o):o,r)}}}function gt(e,t){return t=String(t),"application/xhtml+xml"===e.contentType&&(t=t.toLowerCase()),e.createElement(t)}function mt(e){s.setTimeout((function(){throw e}),0)}function vt(e,t){ht||function(){if(s.Promise&&s.Promise.resolve){var e=s.Promise.resolve(void 0);ht=function(){e.then(wt)}}else ht=function(){var e=wt;!d(s.setImmediate)||s.Window&&s.Window.prototype&&!he("Edge")&&s.Window.prototype.setImmediate==s.setImmediate?(ft||(ft=function(){var e=s.MessageChannel;if(void 0===e&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!he("Presto")&&(e=function(){var e=gt(document,"IFRAME");e.style.display="none",document.documentElement.appendChild(e);var t=e.contentWindow;(e=t.document).open(),e.close();var n="callImmediate"+Math.random(),r="file:"==t.location.protocol?"*":t.location.protocol+"//"+t.location.host;e=k((function(e){"*"!=r&&e.origin!=r||e.data!=n||this.port1.onmessage()}),this),t.addEventListener("message",e,!1),this.port1={},this.port2={postMessage:function(){t.postMessage(n,r)}}}),void 0!==e&&!he("Trident")&&!he("MSIE")){var t=new e,n={},r=n;return t.port1.onmessage=function(){if(void 0!==n.next){var e=(n=n.next).Gb;n.Gb=null,e()}},function(e){r.next={Gb:e},r=r.next,t.port2.postMessage(0)}}return function(e){s.setTimeout(e,0)}}()),ft(e)):s.setImmediate(e)}}(),yt||(ht(),yt=!0),bt.add(e,t)}var yt=!1,bt=new U;function wt(){for(var e;e=V();){try{e.a.call(e.b)}catch(e){mt(e)}F(z,e)}yt=!1}function kt(e,t){if(this.a=St,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,e!=f)try{var n=this;e.call(t,(function(e){Dt(n,Et,e)}),(function(e){if(!(e instanceof Ht))try{if(e instanceof Error)throw e;throw Error("Promise rejected.")}catch(e){}Dt(n,xt,e)}))}catch(e){Dt(this,xt,e)}}var St=0,Et=2,xt=3;function It(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}It.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Ct=new M((function(){return new It}),(function(e){e.reset()}));function Tt(e,t,n){var r=Ct.get();return r.g=e,r.b=t,r.f=n,r}function _t(e){if(e instanceof kt)return e;var t=new kt(f);return Dt(t,Et,e),t}function Ot(e){return new kt((function(t,n){n(e)}))}function Nt(e,t,n){jt(e,t,n,null)||vt(S(t,e))}function Pt(e){return new kt((function(t){var n=e.length,r=[];if(n)for(var i=function(e,i,o){n--,r[e]=i?{Pb:!0,value:o}:{Pb:!1,reason:o},0==n&&t(r)},o=0;o<e.length;o++)Nt(e[o],S(i,o,!0),S(i,o,!1));else t(r)}))}function At(e,t){if(e.a==St)if(e.c){var n=e.c;if(n.b){for(var r=0,i=null,o=null,a=n.b;a&&(a.c||(r++,a.a==e&&(i=a),!(i&&1<r)));a=a.next)i||(o=a);i&&(n.a==St&&1==r?At(n,t):(o?((r=o).next==n.f&&(n.f=r),r.next=r.next.next):Ft(n),Ut(n,i,xt,t)))}e.c=null}else Dt(e,xt,t)}function Lt(e,t){e.b||e.a!=Et&&e.a!=xt||Mt(e),e.f?e.f.next=t:e.b=t,e.f=t}function Rt(e,t,n,r){var i=Tt(null,null,null);return i.a=new kt((function(e,o){i.g=t?function(n){try{var i=t.call(r,n);e(i)}catch(e){o(e)}}:e,i.b=n?function(t){try{var i=n.call(r,t);void 0===i&&t instanceof Ht?o(t):e(i)}catch(e){o(e)}}:o})),i.a.c=e,Lt(e,i),i.a}function Dt(e,t,n){e.a==St&&(e===n&&(t=xt,n=new TypeError("Promise cannot resolve to itself")),e.a=1,jt(n,e.$c,e.ad,e)||(e.i=n,e.a=t,e.c=null,Mt(e),t!=xt||n instanceof Ht||function(e,t){e.g=!0,vt((function(){e.g&&Vt.call(null,t)}))}(e,n)))}function jt(e,t,n,r){if(e instanceof kt)return Lt(e,Tt(t||f,n||null,r)),!0;if(L(e))return e.then(t,n,r),!0;if(g(e))try{var i=e.then;if(d(i))return function(e,t,n,r,i){function o(e){a||(a=!0,r.call(i,e))}var a=!1;try{t.call(e,(function(e){a||(a=!0,n.call(i,e))}),o)}catch(e){o(e)}}(e,i,t,n,r),!0}catch(e){return n.call(r,e),!0}return!1}function Mt(e){e.h||(e.h=!0,vt(e.gc,e))}function Ft(e){var t=null;return e.b&&(t=e.b,e.b=t.next,t.next=null),e.b||(e.f=null),t}function Ut(e,t,n,r){if(n==xt&&t.b&&!t.c)for(;e&&e.g;e=e.c)e.g=!1;if(t.a)t.a.c=null,zt(t,n,r);else try{t.c?t.g.call(t.f):zt(t,n,r)}catch(e){Vt.call(null,e)}F(Ct,t)}function zt(e,t,n){t==Et?e.g.call(e.f,n):e.b&&e.b.call(e.f,n)}kt.prototype.then=function(e,t,n){return Rt(this,d(e)?e:null,d(t)?t:null,n)},kt.prototype.$goog_Thenable=!0,(e=kt.prototype).oa=function(e,t){return(e=Tt(e,e,t)).c=!0,Lt(this,e),this},e.o=function(e,t){return Rt(this,null,e,t)},e.cancel=function(e){if(this.a==St){var t=new Ht(e);vt((function(){At(this,t)}),this)}},e.$c=function(e){this.a=St,Dt(this,Et,e)},e.ad=function(e){this.a=St,Dt(this,xt,e)},e.gc=function(){for(var e;e=Ft(this);)Ut(this,e,this.a,this.i);this.h=!1};var Vt=mt;function Ht(e){R.call(this,e)}function Bt(){0!=Wt&&($t[m(this)]=this),this.xa=this.xa,this.pa=this.pa}x(Ht,R),Ht.prototype.name="cancel";var Wt=0,$t={};function qt(e){if(!e.xa&&(e.xa=!0,e.Da(),0!=Wt)){var t=m(e);if(0!=Wt&&e.pa&&0<e.pa.length)throw Error(e+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete $t[t]}}Bt.prototype.xa=!1,Bt.prototype.Da=function(){if(this.pa)for(;this.pa.length;)this.pa.shift()()};var Kt=Object.freeze||function(e){return e},Gt=!Xe||9<=Number(st),Xt=Xe&&!at("9"),Yt=function(){if(!s.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{s.addEventListener("test",f,t),s.removeEventListener("test",f,t)}catch(e){}return e}();function Jt(e,t){this.type=e,this.b=this.target=t,this.defaultPrevented=!1}function Qt(e,t){if(Jt.call(this,e?e.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,e){var n=this.type=e.type,r=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.b=t,t=e.relatedTarget){if(Qe){e:{try{$e(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType="string"==typeof e.pointerType?e.pointerType:Zt[e.pointerType]||"",this.a=e,e.defaultPrevented&&this.preventDefault()}}Jt.prototype.preventDefault=function(){this.defaultPrevented=!0},x(Qt,Jt);var Zt=Kt({2:"touch",3:"pen",4:"mouse"});Qt.prototype.preventDefault=function(){Qt.ab.preventDefault.call(this);var e=this.a;if(e.preventDefault)e.preventDefault();else if(e.returnValue=!1,Xt)try{(e.ctrlKey||112<=e.keyCode&&123>=e.keyCode)&&(e.keyCode=-1)}catch(e){}},Qt.prototype.g=function(){return this.a};var en="closure_listenable_"+(1e6*Math.random()|0),tn=0;function nn(e,t,n,r,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.Va=i,this.key=++tn,this.va=this.Pa=!1}function rn(e){e.va=!0,e.listener=null,e.proxy=null,e.src=null,e.Va=null}function on(e){this.src=e,this.a={},this.b=0}function an(e,t){var n=t.type;n in e.a&&X(e.a[n],t)&&(rn(t),0==e.a[n].length&&(delete e.a[n],e.b--))}function sn(e,t,n,r){for(var i=0;i<e.length;++i){var o=e[i];if(!o.va&&o.listener==t&&o.capture==!!n&&o.Va==r)return i}return-1}on.prototype.add=function(e,t,n,r,i){var o=e.toString();(e=this.a[o])||(e=this.a[o]=[],this.b++);var a=sn(e,t,r,i);return-1<a?(t=e[a],n||(t.Pa=!1)):((t=new nn(t,this.src,o,!!r,i)).Pa=n,e.push(t)),t};var un="closure_lm_"+(1e6*Math.random()|0),ln={};function cn(e,t,n,r,i){if(r&&r.once)hn(e,t,n,r,i);else if(Array.isArray(t))for(var o=0;o<t.length;o++)cn(e,t[o],n,r,i);else n=Sn(n),e&&e[en]?xn(e,t,n,g(r)?!!r.capture:!!r,i):fn(e,t,n,!1,r,i)}function fn(e,t,n,r,i,o){if(!t)throw Error("Invalid event type");var a=g(i)?!!i.capture:!!i,s=wn(e);if(s||(e[un]=s=new on(e)),!(n=s.add(t,n,r,a,o)).proxy)if(r=function(){var e=bn,t=Gt?function(n){return e.call(t.src,t.listener,n)}:function(n){if(!(n=e.call(t.src,t.listener,n)))return n};return t}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)Yt||(i=a),void 0===i&&(i=!1),e.addEventListener(t.toString(),r,i);else if(e.attachEvent)e.attachEvent(gn(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}}function hn(e,t,n,r,i){if(Array.isArray(t))for(var o=0;o<t.length;o++)hn(e,t[o],n,r,i);else n=Sn(n),e&&e[en]?In(e,t,n,g(r)?!!r.capture:!!r,i):fn(e,t,n,!0,r,i)}function pn(e,t,n,r,i){if(Array.isArray(t))for(var o=0;o<t.length;o++)pn(e,t[o],n,r,i);else r=g(r)?!!r.capture:!!r,n=Sn(n),e&&e[en]?(e=e.v,(t=String(t).toString())in e.a&&-1<(n=sn(o=e.a[t],n,r,i))&&(rn(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete e.a[t],e.b--))):e&&(e=wn(e))&&(t=e.a[t.toString()],e=-1,t&&(e=sn(t,n,r,i)),(n=-1<e?t[e]:null)&&dn(n))}function dn(e){if("number"!=typeof e&&e&&!e.va){var t=e.src;if(t&&t[en])an(t.v,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(gn(n),r):t.addListener&&t.removeListener&&t.removeListener(r),(n=wn(t))?(an(n,e),0==n.b&&(n.src=null,t[un]=null)):rn(e)}}}function gn(e){return e in ln?ln[e]:ln[e]="on"+e}function vn(e,t,n,r){var i=!0;if((e=wn(e))&&(t=e.a[t.toString()]))for(t=t.concat(),e=0;e<t.length;e++){var o=t[e];o&&o.capture==n&&!o.va&&(o=yn(o,r),i=i&&!1!==o)}return i}function yn(e,t){var n=e.listener,r=e.Va||e.src;return e.Pa&&dn(e),n.call(r,t)}function bn(e,t){if(e.va)return!0;if(!Gt){if(!t)e:{t=["window","event"];for(var n=s,r=0;r<t.length;r++)if(null==(n=n[t[r]])){t=null;break e}t=n}if(t=new Qt(r=t,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){e:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break e}catch(e){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=t.b;i;i=i.parentNode)r.push(i);for(e=e.type,i=r.length-1;0<=i;i--){t.b=r[i];var o=vn(r[i],e,!0,t);n=n&&o}for(i=0;i<r.length;i++)t.b=r[i],o=vn(r[i],e,!1,t),n=n&&o}return n}return yn(e,new Qt(t,this))}function wn(e){return(e=e[un])instanceof on?e:null}var kn="__closure_events_fn_"+(1e9*Math.random()>>>0);function Sn(e){return d(e)?e:(e[kn]||(e[kn]=function(t){return e.handleEvent(t)}),e[kn])}function En(){Bt.call(this),this.v=new on(this),this.ac=this,this.gb=null}function xn(e,t,n,r,i){e.v.add(String(t),n,!1,r,i)}function In(e,t,n,r,i){e.v.add(String(t),n,!0,r,i)}function Cn(e,t,n,r){if(!(t=e.v.a[String(t)]))return!0;t=t.concat();for(var i=!0,o=0;o<t.length;++o){var a=t[o];if(a&&!a.va&&a.capture==n){var s=a.listener,u=a.Va||a.src;a.Pa&&an(e.v,a),i=!1!==s.call(u,r)&&i}}return i&&!r.defaultPrevented}function Tn(e,t,n){if(d(e))n&&(e=k(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=k(e.handleEvent,e)}return 2147483647<Number(t)?-1:s.setTimeout(e,t||0)}function _n(e){var t=null;return new kt((function(n,r){-1==(t=Tn((function(){n(void 0)}),e))&&r(Error("Failed to schedule timer."))})).o((function(e){throw s.clearTimeout(t),e}))}function On(e){if(e.W&&"function"==typeof e.W)return e.W();if("string"==typeof e)return e.split("");if(p(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}function Nn(e){if(e.Y&&"function"==typeof e.Y)return e.Y();if(!e.W||"function"!=typeof e.W){if(p(e)||"string"==typeof e){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}for(var r in t=[],n=0,e)t[n++]=r;return t}}function Pn(e,t){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(e)if(e instanceof Pn)for(n=e.Y(),r=0;r<n.length;r++)this.set(n[r],e.get(n[r]));else for(r in e)this.set(r,e[r])}function An(e){if(e.c!=e.a.length){for(var t=0,n=0;t<e.a.length;){var r=e.a[t];Ln(e.b,r)&&(e.a[n++]=r),t++}e.a.length=n}if(e.c!=e.a.length){var i={};for(n=t=0;t<e.a.length;)Ln(i,r=e.a[t])||(e.a[n++]=r,i[r]=1),t++;e.a.length=n}}function Ln(e,t){return Object.prototype.hasOwnProperty.call(e,t)}x(En,Bt),En.prototype[en]=!0,En.prototype.addEventListener=function(e,t,n,r){cn(this,e,t,n,r)},En.prototype.removeEventListener=function(e,t,n,r){pn(this,e,t,n,r)},En.prototype.dispatchEvent=function(e){var t,n=this.gb;if(n)for(t=[];n;n=n.gb)t.push(n);n=this.ac;var r=e.type||e;if("string"==typeof e)e=new Jt(e,n);else if(e instanceof Jt)e.target=e.target||n;else{var i=e;ve(e=new Jt(r,n),i)}if(i=!0,t)for(var o=t.length-1;0<=o;o--){var a=e.b=t[o];i=Cn(a,r,!0,e)&&i}if(i=Cn(a=e.b=n,r,!0,e)&&i,i=Cn(a,r,!1,e)&&i,t)for(o=0;o<t.length;o++)i=Cn(a=e.b=t[o],r,!1,e)&&i;return i},En.prototype.Da=function(){if(En.ab.Da.call(this),this.v){var e,t=this.v;for(e in t.a){for(var n=t.a[e],r=0;r<n.length;r++)rn(n[r]);delete t.a[e],t.b--}}this.gb=null},(e=Pn.prototype).W=function(){An(this);for(var e=[],t=0;t<this.a.length;t++)e.push(this.b[this.a[t]]);return e},e.Y=function(){return An(this),this.a.concat()},e.clear=function(){this.b={},this.c=this.a.length=0},e.get=function(e,t){return Ln(this.b,e)?this.b[e]:t},e.set=function(e,t){Ln(this.b,e)||(this.c++,this.a.push(e)),this.b[e]=t},e.forEach=function(e,t){for(var n=this.Y(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);e.call(t,o,i,this)}};var Rn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Dn(e,t){var n;this.a=this.l=this.c="",this.g=null,this.h=this.f="",this.i=!1,e instanceof Dn?(this.i=void 0!==t?t:e.i,jn(this,e.c),this.l=e.l,this.a=e.a,Mn(this,e.g),this.f=e.f,Fn(this,rr(e.b)),this.h=e.h):e&&(n=String(e).match(Rn))?(this.i=!!t,jn(this,n[1]||"",!0),this.l=Bn(n[2]||""),this.a=Bn(n[3]||"",!0),Mn(this,n[4]),this.f=Bn(n[5]||"",!0),Fn(this,n[6]||"",!0),this.h=Bn(n[7]||"")):(this.i=!!t,this.b=new Jn(null,this.i))}function jn(e,t,n){e.c=n?Bn(t,!0):t,e.c&&(e.c=e.c.replace(/:$/,""))}function Mn(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.g=t}else e.g=null}function Fn(e,t,n){t instanceof Jn?(e.b=t,function(e,t){t&&!e.f&&(Qn(e),e.c=null,e.a.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(er(this,t),nr(this,n,e))}),e)),e.f=t}(e.b,e.i)):(n||(t=Wn(t,Xn)),e.b=new Jn(t,e.i))}function Un(e,t,n){e.b.set(t,n)}function zn(e,t){return e.b.get(t)}function Vn(e){return e instanceof Dn?new Dn(e):new Dn(e,void 0)}function Hn(e,t,n,r){var i=new Dn(null,void 0);return e&&jn(i,e),t&&(i.a=t),n&&Mn(i,n),r&&(i.f=r),i}function Bn(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Wn(e,t,n){return"string"==typeof e?(e=encodeURI(e).replace(t,$n),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function $n(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Dn.prototype.toString=function(){var e=[],t=this.c;t&&e.push(Wn(t,qn,!0),":");var n=this.a;return(n||"file"==t)&&(e.push("//"),(t=this.l)&&e.push(Wn(t,qn,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.g)&&e.push(":",String(n))),(n=this.f)&&(this.a&&"/"!=n.charAt(0)&&e.push("/"),e.push(Wn(n,"/"==n.charAt(0)?Gn:Kn,!0))),(n=this.b.toString())&&e.push("?",n),(n=this.h)&&e.push("#",Wn(n,Yn)),e.join("")},Dn.prototype.resolve=function(e){var t=new Dn(this),n=!!e.c;n?jn(t,e.c):n=!!e.l,n?t.l=e.l:n=!!e.a,n?t.a=e.a:n=null!=e.g;var r=e.f;if(n)Mn(t,e.g);else if(n=!!e.f){if("/"!=r.charAt(0))if(this.a&&!this.f)r="/"+r;else{var i=t.f.lastIndexOf("/");-1!=i&&(r=t.f.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(ue(i,"./")||ue(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?t.f=r:n=""!==e.b.toString(),n?Fn(t,rr(e.b)):n=!!e.h,n&&(t.h=e.h),t};var qn=/[#\/\?@]/g,Kn=/[#\?:]/g,Gn=/[#\?]/g,Xn=/[#\?@]/g,Yn=/#/g;function Jn(e,t){this.b=this.a=null,this.c=e||null,this.f=!!t}function Qn(e){e.a||(e.a=new Pn,e.b=0,e.c&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),i=null;if(0<=r){var o=e[n].substring(0,r);i=e[n].substring(r+1)}else o=e[n];t(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.c,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function Zn(e){var t=Nn(e);if(void 0===t)throw Error("Keys are undefined");var n=new Jn(null,void 0);e=On(e);for(var r=0;r<t.length;r++){var i=t[r],o=e[r];Array.isArray(o)?nr(n,i,o):n.add(i,o)}return n}function er(e,t){Qn(e),t=ir(e,t),Ln(e.a.b,t)&&(e.c=null,e.b-=e.a.get(t).length,Ln((e=e.a).b,t)&&(delete e.b[t],e.c--,e.a.length>2*e.c&&An(e)))}function tr(e,t){return Qn(e),t=ir(e,t),Ln(e.a.b,t)}function nr(e,t,n){er(e,t),0<n.length&&(e.c=null,e.a.set(ir(e,t),Q(n)),e.b+=n.length)}function rr(e){var t=new Jn;return t.c=e.c,e.a&&(t.a=new Pn(e.a),t.b=e.b),t}function ir(e,t){return t=String(t),e.f&&(t=t.toLowerCase()),t}function or(e){var t=[];return sr(new ar,e,t),t.join("")}function ar(){}function sr(e,t,n){if(null==t)n.push("null");else{if("object"==typeof t){if(Array.isArray(t)){var r=t;t=r.length,n.push("[");for(var i="",o=0;o<t;o++)n.push(i),sr(e,r[o],n),i=",";return void n.push("]")}if(!(t instanceof String||t instanceof Number||t instanceof Boolean)){for(r in n.push("{"),i="",t)Object.prototype.hasOwnProperty.call(t,r)&&"function"!=typeof(o=t[r])&&(n.push(i),cr(r,n),n.push(":"),sr(e,o,n),i=",");return void n.push("}")}t=t.valueOf()}switch(typeof t){case"string":cr(t,n);break;case"number":n.push(isFinite(t)&&!isNaN(t)?String(t):"null");break;case"boolean":n.push(String(t));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof t)}}}(e=Jn.prototype).add=function(e,t){Qn(this),this.c=null,e=ir(this,e);var n=this.a.get(e);return n||this.a.set(e,n=[]),n.push(t),this.b+=1,this},e.clear=function(){this.a=this.c=null,this.b=0},e.forEach=function(e,t){Qn(this),this.a.forEach((function(n,r){W(n,(function(n){e.call(t,n,r,this)}),this)}),this)},e.Y=function(){Qn(this);for(var e=this.a.W(),t=this.a.Y(),n=[],r=0;r<t.length;r++)for(var i=e[r],o=0;o<i.length;o++)n.push(t[r]);return n},e.W=function(e){Qn(this);var t=[];if("string"==typeof e)tr(this,e)&&(t=J(t,this.a.get(ir(this,e))));else{e=this.a.W();for(var n=0;n<e.length;n++)t=J(t,e[n])}return t},e.set=function(e,t){return Qn(this),this.c=null,tr(this,e=ir(this,e))&&(this.b-=this.a.get(e).length),this.a.set(e,[t]),this.b+=1,this},e.get=function(e,t){return e&&0<(e=this.W(e)).length?String(e[0]):t},e.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var e=[],t=this.a.Y(),n=0;n<t.length;n++){var r=t[n],i=encodeURIComponent(String(r));r=this.W(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),e.push(a)}}return this.c=e.join("&")};var ur={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},lr=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function cr(e,t){t.push('"',e.replace(lr,(function(e){var t=ur[e];return t||(t="\\u"+(65536|e.charCodeAt(0)).toString(16).substr(1),ur[e]=t),t})),'"')}function fr(){var e=Pr();return Xe&&!!st&&11==st||/Edge\/\d+/.test(e)}function hr(){return s.window&&s.window.location.href||self&&self.location&&self.location.href||""}function pr(e,t){t=t||s.window;var n="about:blank";e&&(n=Ae(je(e)||Ue)),t.location.href=n}function dr(e,t){var n,r=[];for(n in e)n in t?typeof e[n]!=typeof t[n]?r.push(n):"object"==typeof e[n]&&null!=e[n]&&null!=t[n]?0<dr(e[n],t[n]).length&&r.push(n):e[n]!==t[n]&&r.push(n):r.push(n);for(n in t)n in e||r.push(n);return r}function gr(e){return!!((e=(e||Pr()).toLowerCase()).match(/android/)||e.match(/webos/)||e.match(/iphone|ipad|ipod/)||e.match(/blackberry/)||e.match(/windows phone/)||e.match(/iemobile/))}function mr(e){e=e||s.window;try{e.close()}catch(e){}}function vr(e,t,n){var r=Math.floor(1e9*Math.random()).toString();t=t||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-t)/2;for(a in t={width:t,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Pr().toLowerCase(),r&&(t.target=r,ue(n,"crios/")&&(t.target="_blank")),_r(Pr())==Cr&&(e=e||"http://localhost",t.scrollbars=!0),n=e||"",(e=t)||(e={}),r=window,t=n instanceof Pe?n:je(void 0!==n.href?n.href:String(n))||Ue,n=e.target||n.target,i=[],e)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+e[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(e[a]?1:0))}var a=i.join(",");if((he("iPhone")&&!he("iPod")&&!he("iPad")||he("iPad")||he("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(ye(a=gt(document,"A"),"HTMLAnchorElement"),t=t instanceof Pe?t:Me(t),a.href=Ae(t),a.setAttribute("target",n),e.noreferrer&&a.setAttribute("rel","noreferrer"),(e=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(e),a={}):e.noreferrer?(a=He("",r,n,a),e=Ae(t),a&&(Je&&ue(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),a.opener=null,e='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+We(e)+'">',e=new ze(e=(r=xe())?r.createHTML(e):e,null,Ve),r=a.document)&&(r.write(function(e){return e instanceof ze&&e.constructor===ze?e.a:(j("expected object of type SafeHtml, got '"+e+"' of type "+h(e)),"type_error:SafeHtml")}(e)),r.close())):(a=He(t,r,n,a))&&e.noopener&&(a.opener=null),a)try{a.focus()}catch(e){}return a}var yr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,br=/^[^@]+@[^@]+$/;function wr(){var e=null;return new kt((function(t){"complete"==s.document.readyState?t():(e=function(){t()},hn(window,"load",e))})).o((function(t){throw pn(window,"load",e),t}))}function kr(e){return e=e||Pr(),!("file:"!==jr()&&"ionic:"!==jr()||!e.toLowerCase().match(/iphone|ipad|ipod|android/))}function Sr(){var e=s.window;try{return!(!e||e==e.top)}catch(e){return!1}}function Er(){return void 0!==s.WorkerGlobalScope&&"function"==typeof s.importScripts}function xr(){return mn.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":mn.INTERNAL.hasOwnProperty("node")?"Node":Er()?"Worker":"Browser"}function Ir(){var e=xr();return"ReactNative"===e||"Node"===e}var Cr="Firefox",Tr="Chrome";function _r(e){var t=e.toLowerCase();return ue(t,"opera/")||ue(t,"opr/")||ue(t,"opios/")?"Opera":ue(t,"iemobile")?"IEMobile":ue(t,"msie")||ue(t,"trident/")?"IE":ue(t,"edge/")?"Edge":ue(t,"firefox/")?Cr:ue(t,"silk/")?"Silk":ue(t,"blackberry")?"Blackberry":ue(t,"webos")?"Webos":!ue(t,"safari/")||ue(t,"chrome/")||ue(t,"crios/")||ue(t,"android")?!ue(t,"chrome/")&&!ue(t,"crios/")||ue(t,"edge/")?ue(t,"android")?"Android":(e=e.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==e.length?e[1]:"Other":Tr:"Safari"}var Or={md:"FirebaseCore-web",od:"FirebaseUI-web"};function Nr(e,t){t=t||[];var n,r=[],i={};for(n in Or)i[Or[n]]=!0;for(n=0;n<t.length;n++)void 0!==i[t[n]]&&(delete i[t[n]],r.push(t[n]));return r.sort(),(t=r).length||(t=["FirebaseCore-web"]),"Browser"===(r=xr())?r=_r(i=Pr()):"Worker"===r&&(r=_r(i=Pr())+"-"+r),r+"/JsCore/"+e+"/"+t.join(",")}function Pr(){return s.navigator&&s.navigator.userAgent||""}function Ar(e,t){e=e.split("."),t=t||s;for(var n=0;n<e.length&&"object"==typeof t&&null!=t;n++)t=t[e[n]];return n!=e.length&&(t=void 0),t}function Lr(){try{var e=s.localStorage,t=Vr();if(e)return e.setItem(t,"1"),e.removeItem(t),!fr()||!!s.indexedDB}catch(e){return Er()&&!!s.indexedDB}return!1}function Rr(){return(Dr()||"chrome-extension:"===jr()||kr())&&!Ir()&&Lr()&&!Er()}function Dr(){return"http:"===jr()||"https:"===jr()}function jr(){return s.location&&s.location.protocol||null}function Mr(e){return!gr(e=e||Pr())&&_r(e)!=Cr}function Fr(e){return void 0===e?null:or(e)}function Ur(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&null!==e[t]&&void 0!==e[t]&&(n[t]=e[t]);return n}function zr(e){if(null!==e)return JSON.parse(e)}function Vr(e){return e||Math.floor(1e9*Math.random()).toString()}function Hr(e){return"Safari"!=_r(e=e||Pr())&&!e.toLowerCase().match(/iphone|ipad|ipod/)}function Br(){var e=s.___jsl;if(e&&e.H)for(var t in e.H)if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=e.H[t].L.concat(),e.CP)for(var n=0;n<e.CP.length;n++)e.CP[n]=null}function Wr(e,t){if(e>t)throw Error("Short delay should be less than long delay!");this.a=e,this.c=t,e=Pr(),t=xr(),this.b=gr(e)||"ReactNative"===t}function $r(){var e=s.document;return!e||void 0===e.visibilityState||"visible"==e.visibilityState}function qr(e){try{var t=new Date(parseInt(e,10));if(!isNaN(t.getTime())&&!/[^0-9]/.test(e))return t.toUTCString()}catch(e){}return null}function Kr(){return!(!Ar("fireauth.oauthhelper",s)&&!Ar("fireauth.iframe",s))}Wr.prototype.get=function(){var e=s.navigator;return!e||"boolean"!=typeof e.onLine||!Dr()&&"chrome-extension:"!==jr()&&void 0===e.connection||e.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Gr,Xr={};function Yr(e){Xr[e]||(Xr[e]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e))}try{var Jr={};Object.defineProperty(Jr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Jr,"abcd",{configurable:!0,enumerable:!0,value:2}),Gr=2==Jr.abcd}catch(Ke){Gr=!1}function Qr(e,t,n){Gr?Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:n}):e[t]=n}function Zr(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&Qr(e,n,t[n])}function ei(e){var t={};return Zr(t,e),t}function ti(e){var t=e;if("object"==typeof e&&null!=e)for(var n in t="length"in e?[]:{},e)Qr(t,n,ti(e[n]));return t}function ni(e){var t=e&&(e[si]?"phone":null);if(!(t&&e&&e[ai]))throw new C("internal-error","Internal assert: invalid MultiFactorInfo object");Qr(this,"uid",e[ai]),Qr(this,"displayName",e[ii]||null);var n=null;e[oi]&&(n=new Date(e[oi]).toUTCString()),Qr(this,"enrollmentTime",n),Qr(this,"factorId",t)}function ri(e){try{var t=new ui(e)}catch(e){t=null}return t}ni.prototype.w=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var ii="displayName",oi="enrolledAt",ai="mfaEnrollmentId",si="phoneInfo";function ui(e){ni.call(this,e),Qr(this,"phoneNumber",e[si])}function li(e){var t={},n=e[pi],r=e[gi],i=e[mi];if(e=ri(e[di]),!i||i!=fi&&i!=hi&&!n||i==hi&&!r||i==ci&&!e)throw Error("Invalid checkActionCode response!");i==hi?(t[yi]=n||null,t[wi]=n||null,t[vi]=r):(t[yi]=r||null,t[wi]=r||null,t[vi]=n||null),t[bi]=e||null,Qr(this,Si,i),Qr(this,ki,ti(t))}x(ui,ni),ui.prototype.w=function(){var e=ui.ab.w.call(this);return e.phoneNumber=this.phoneNumber,e};var ci="REVERT_SECOND_FACTOR_ADDITION",fi="EMAIL_SIGNIN",hi="VERIFY_AND_CHANGE_EMAIL",pi="email",di="mfaInfo",gi="newEmail",mi="requestType",vi="email",yi="fromEmail",bi="multiFactorInfo",wi="previousEmail",ki="data",Si="operation";function Ei(e){var t=zn(e=Vn(e),xi)||null,n=zn(e,Ii)||null,r=zn(e,_i)||null;if(r=r&&Ni[r]||null,!t||!n||!r)throw new C("argument-error",xi+", "+Ii+"and "+_i+" are required in a valid action code URL.");Zr(this,{apiKey:t,operation:r,code:n,continueUrl:zn(e,Ci)||null,languageCode:zn(e,Ti)||null,tenantId:zn(e,Oi)||null})}var xi="apiKey",Ii="oobCode",Ci="continueUrl",Ti="languageCode",_i="mode",Oi="tenantId",Ni={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:ci,signIn:fi,verifyAndChangeEmail:hi,verifyEmail:"VERIFY_EMAIL"};function Pi(e){try{return new Ei(e)}catch(e){return null}}function Ai(e){var t=e[Mi];if(void 0===t)throw new C("missing-continue-uri");if("string"!=typeof t||"string"==typeof t&&!t.length)throw new C("invalid-continue-uri");this.h=t,this.b=this.a=null,this.g=!1;var n=e[Li];if(n&&"object"==typeof n){t=n[zi];var r=n[Fi];if(n=n[Ui],"string"==typeof t&&t.length){if(this.a=t,void 0!==r&&"boolean"!=typeof r)throw new C("argument-error",Fi+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new C("argument-error",Ui+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==t)throw new C("argument-error",zi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new C("missing-android-pkg-name")}}else if(void 0!==n)throw new C("argument-error",Li+" property must be a non null object when specified.");if(this.f=null,(t=e[ji])&&"object"==typeof t){if("string"==typeof(t=t[Vi])&&t.length)this.f=t;else if(void 0!==t)throw new C("argument-error",Vi+" property must be a non empty string when specified.")}else if(void 0!==t)throw new C("argument-error",ji+" property must be a non null object when specified.");if(void 0!==(t=e[Di])&&"boolean"!=typeof t)throw new C("argument-error",Di+" property must be a boolean when specified.");if(this.c=!!t,void 0!==(e=e[Ri])&&("string"!=typeof e||"string"==typeof e&&!e.length))throw new C("argument-error",Ri+" property must be a non empty string when specified.");this.i=e||null}var Li="android",Ri="dynamicLinkDomain",Di="handleCodeInApp",ji="iOS",Mi="url",Fi="installApp",Ui="minimumVersion",zi="packageName",Vi="bundleId";function Hi(e){var t={};for(var n in t.continueUrl=e.h,t.canHandleCodeInApp=e.c,(t.androidPackageName=e.a)&&(t.androidMinimumVersion=e.b,t.androidInstallApp=e.g),t.iOSBundleId=e.f,t.dynamicLinkDomain=e.i,t)null===t[n]&&delete t[n];return t}var Bi=null;function Wi(e){var t=qi(e);if(!(t&&t.sub&&t.iss&&t.aud&&t.exp))throw Error("Invalid JWT");this.h=e,this.a=t.exp,this.i=t.sub,e=Date.now()/1e3,this.g=t.iat||(e>this.a?this.a:e),this.b=t.provider_id||t.firebase&&t.firebase.sign_in_provider||null,this.f=t.firebase&&t.firebase.tenant||null,this.c=!!t.is_anonymous||"anonymous"==this.b}function $i(e){try{return new Wi(e)}catch(e){return null}}function qi(e){if(!e)return null;if(3!=(e=e.split(".")).length)return null;for(var t=(4-(e=e[1]).length%4)%4,n=0;n<t;n++)e+=".";try{var r=function(e){var t=[];return function(e,t){function n(t){for(;r<e.length;){var n=e.charAt(r++),i=Bi[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return t}!function(){if(!Bi){Bi={};for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),t=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var r=e.concat(t[n].split("")),i=0;i<r.length;i++){var o=r[i];void 0===Bi[o]&&(Bi[o]=i)}}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;t(i<<2|o>>4),64!=a&&(t(o<<4&240|a>>2),64!=s&&t(a<<6&192|s))}}(e,(function(e){t.push(e)})),t}(e);for(e=[],n=t=0;t<r.length;){var i=r[t++];if(128>i)e[n++]=String.fromCharCode(i);else if(191<i&&224>i){var o=r[t++];e[n++]=String.fromCharCode((31&i)<<6|63&o)}else if(239<i&&365>i){o=r[t++];var a=r[t++],s=((7&i)<<18|(63&o)<<12|(63&a)<<6|63&r[t++])-65536;e[n++]=String.fromCharCode(55296+(s>>10)),e[n++]=String.fromCharCode(56320+(1023&s))}else o=r[t++],a=r[t++],e[n++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&a)}return JSON.parse(e.join(""))}catch(e){}return null}Wi.prototype.T=function(){return this.f},Wi.prototype.l=function(){return this.c},Wi.prototype.toString=function(){return this.h};var Ki="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Gi=["client_id","response_type","scope","redirect_uri","state"],Xi={nd:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Xa:Gi},pd:{Ja:null,ua:500,ta:750,fa:"github.com",Xa:Gi},qd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Xa:Gi},wd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Xa:Ki},kd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Xa:[]}};function Yi(e){for(var t in Xi)if(Xi[t].fa==e)return Xi[t];return null}function Ji(e){var t={};t["facebook.com"]=no,t["google.com"]=io,t["github.com"]=ro,t["twitter.com"]=oo;var n=e&&e[Zi];try{if(n)return t[n]?new t[n](e):new to(e);if(void 0!==e[Qi])return new eo(e)}catch(e){}return null}var Qi="idToken",Zi="providerId";function eo(e){var t=e[Zi];if(!t&&e[Qi]){var n=$i(e[Qi]);n&&n.b&&(t=n.b)}if(!t)throw Error("Invalid additional user info!");"anonymous"!=t&&"custom"!=t||(t=null),n=!1,void 0!==e.isNewUser?n=!!e.isNewUser:"identitytoolkit#SignupNewUserResponse"===e.kind&&(n=!0),Qr(this,"providerId",t),Qr(this,"isNewUser",n)}function to(e){eo.call(this,e),Qr(this,"profile",ti((e=zr(e.rawUserInfo||"{}"))||{}))}function no(e){if(to.call(this,e),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function ro(e){if(to.call(this,e),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Qr(this,"username",this.profile&&this.profile.login||null)}function io(e){if(to.call(this,e),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function oo(e){if(to.call(this,e),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Qr(this,"username",e.screenName||null)}function ao(e){var t=Vn(e),n=zn(t,"link"),r=zn(Vn(n),"link");return t=zn(t,"deep_link_id"),zn(Vn(t),"link")||t||r||n||e}function so(e,t){if(!e&&!t)throw new C("internal-error","Internal assert: no raw session string available");if(e&&t)throw new C("internal-error","Internal assert: unable to determine the session type");this.a=e||null,this.b=t||null,this.type=this.a?uo:lo}x(to,eo),x(no,to),x(ro,to),x(io,to),x(oo,to);var uo="enroll",lo="signin";function co(){}function fo(e,t){return e.then((function(e){if(e[Za]){var n=$i(e[Za]);if(!n||t!=n.i)throw new C("user-mismatch");return e}throw new C("user-mismatch")})).o((function(e){throw e&&e.code&&e.code==O+"user-not-found"?new C("user-mismatch"):e}))}function ho(e,t){if(!t)throw new C("internal-error","failed to construct a credential");this.a=t,Qr(this,"providerId",e),Qr(this,"signInMethod",e)}function po(e){return{pendingToken:e.a,requestUri:"http://localhost"}}function go(e){if(e&&e.providerId&&e.signInMethod&&0==e.providerId.indexOf("saml.")&&e.pendingToken)try{return new ho(e.providerId,e.pendingToken)}catch(e){}return null}function mo(e,t,n){if(this.a=null,t.idToken||t.accessToken)t.idToken&&Qr(this,"idToken",t.idToken),t.accessToken&&Qr(this,"accessToken",t.accessToken),t.nonce&&!t.pendingToken&&Qr(this,"nonce",t.nonce),t.pendingToken&&(this.a=t.pendingToken);else{if(!t.oauthToken||!t.oauthTokenSecret)throw new C("internal-error","failed to construct a credential");Qr(this,"accessToken",t.oauthToken),Qr(this,"secret",t.oauthTokenSecret)}Qr(this,"providerId",e),Qr(this,"signInMethod",n)}function vo(e){var t={};return e.idToken&&(t.id_token=e.idToken),e.accessToken&&(t.access_token=e.accessToken),e.secret&&(t.oauth_token_secret=e.secret),t.providerId=e.providerId,e.nonce&&!e.a&&(t.nonce=e.nonce),t={postBody:Zn(t).toString(),requestUri:"http://localhost"},e.a&&(delete t.postBody,t.pendingToken=e.a),t}function yo(e){if(e&&e.providerId&&e.signInMethod){var t={idToken:e.oauthIdToken,accessToken:e.oauthTokenSecret?null:e.oauthAccessToken,oauthTokenSecret:e.oauthTokenSecret,oauthToken:e.oauthTokenSecret&&e.oauthAccessToken,nonce:e.nonce,pendingToken:e.pendingToken};try{return new mo(e.providerId,t,e.signInMethod)}catch(e){}}return null}function bo(e,t){this.Qc=t||[],Zr(this,{providerId:e,isOAuthProvider:!0}),this.Ib={},this.pb=(Yi(e)||{}).Ja||null,this.ob=null}function wo(e){if("string"!=typeof e||0!=e.indexOf("saml."))throw new C("argument-error",'SAML provider IDs must be prefixed with "saml."');bo.call(this,e,[])}function ko(e){bo.call(this,e,Gi),this.a=[]}function So(){ko.call(this,"facebook.com")}function Eo(e){if(!e)throw new C("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return g(e)&&(t=e.accessToken),(new So).credential({accessToken:t})}function xo(){ko.call(this,"github.com")}function Io(e){if(!e)throw new C("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return g(e)&&(t=e.accessToken),(new xo).credential({accessToken:t})}function Co(){ko.call(this,"google.com"),this.Ca("profile")}function To(e,t){var n=e;return g(e)&&(n=e.idToken,t=e.accessToken),(new Co).credential({idToken:n,accessToken:t})}function _o(){bo.call(this,"twitter.com",Ki)}function Oo(e,t){var n=e;if(g(n)||(n={oauthToken:e,oauthTokenSecret:t}),!n.oauthToken||!n.oauthTokenSecret)throw new C("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new mo("twitter.com",n,"twitter.com")}function No(e,t,n){this.a=e,this.f=t,Qr(this,"providerId","password"),Qr(this,"signInMethod",n===Ao.EMAIL_LINK_SIGN_IN_METHOD?Ao.EMAIL_LINK_SIGN_IN_METHOD:Ao.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Po(e){return e&&e.email&&e.password?new No(e.email,e.password,e.signInMethod):null}function Ao(){Zr(this,{providerId:"password",isOAuthProvider:!1})}function Lo(e,t){if(!(t=Ro(t)))throw new C("argument-error","Invalid email link!");return new No(e,t.code,Ao.EMAIL_LINK_SIGN_IN_METHOD)}function Ro(e){return(e=Pi(e=ao(e)))&&e.operation===fi?e:null}function Do(e){if(!(e.eb&&e.cb||e.La&&e.ea))throw new C("internal-error");this.a=e,Qr(this,"providerId","phone"),this.fa="phone",Qr(this,"signInMethod","phone")}function jo(e){if(e&&"phone"===e.providerId&&(e.verificationId&&e.verificationCode||e.temporaryProof&&e.phoneNumber)){var t={};return W(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){e[n]&&(t[n]=e[n])})),new Do(t)}return null}function Mo(e){return e.a.La&&e.a.ea?{temporaryProof:e.a.La,phoneNumber:e.a.ea}:{sessionInfo:e.a.eb,code:e.a.cb}}function Fo(e){try{this.a=e||mn.auth()}catch(e){throw new C("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Zr(this,{providerId:"phone",isOAuthProvider:!1})}function Uo(e,t){if(!e)throw new C("missing-verification-id");if(!t)throw new C("missing-verification-code");return new Do({eb:e,cb:t})}function zo(e){if(e.temporaryProof&&e.phoneNumber)return new Do({La:e.temporaryProof,ea:e.phoneNumber});var t=e&&e.providerId;if(!t||"password"===t)return null;var n=e&&e.oauthAccessToken,r=e&&e.oauthTokenSecret,i=e&&e.nonce,o=e&&e.oauthIdToken,a=e&&e.pendingToken;try{switch(t){case"google.com":return To(o,n);case"facebook.com":return Eo(n);case"github.com":return Io(n);case"twitter.com":return Oo(n,r);default:return n||r||o||a?a?0==t.indexOf("saml.")?new ho(t,a):new mo(t,{pendingToken:a,idToken:e.oauthIdToken,accessToken:e.oauthAccessToken},t):new ko(t).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(e){return null}}function Vo(e){if(!e.isOAuthProvider)throw new C("invalid-oauth-provider")}function Ho(e,t,n,r,i,o,a){if(this.c=e,this.b=t||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=a||null,this.a=i||null,!this.g&&!this.a)throw new C("invalid-auth-event");if(this.g&&this.a)throw new C("invalid-auth-event");if(this.g&&!this.f)throw new C("invalid-auth-event")}function Bo(e){return(e=e||{}).type?new Ho(e.type,e.eventId,e.urlResponse,e.sessionId,e.error&&T(e.error),e.postBody,e.tenantId):null}function Wo(){this.b=null,this.a=[]}so.prototype.Ha=function(){return this.a?_t(this.a):_t(this.b)},so.prototype.w=function(){return this.type==uo?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},co.prototype.ka=function(){},co.prototype.b=function(){},co.prototype.c=function(){},co.prototype.w=function(){},ho.prototype.ka=function(e){return ws(e,po(this))},ho.prototype.b=function(e,t){var n=po(this);return n.idToken=t,ks(e,n)},ho.prototype.c=function(e,t){return fo(Ss(e,po(this)),t)},ho.prototype.w=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},mo.prototype.ka=function(e){return ws(e,vo(this))},mo.prototype.b=function(e,t){var n=vo(this);return n.idToken=t,ks(e,n)},mo.prototype.c=function(e,t){return fo(Ss(e,vo(this)),t)},mo.prototype.w=function(){var e={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(e.oauthIdToken=this.idToken),this.accessToken&&(e.oauthAccessToken=this.accessToken),this.secret&&(e.oauthTokenSecret=this.secret),this.nonce&&(e.nonce=this.nonce),this.a&&(e.pendingToken=this.a),e},bo.prototype.Ka=function(e){return this.Ib=ge(e),this},x(wo,bo),x(ko,bo),ko.prototype.Ca=function(e){return G(this.a,e)||this.a.push(e),this},ko.prototype.Qb=function(){return Q(this.a)},ko.prototype.credential=function(e,t){var n;if(!(n=g(e)?{idToken:e.idToken||null,accessToken:e.accessToken||null,nonce:e.rawNonce||null}:{idToken:e||null,accessToken:t||null}).idToken&&!n.accessToken)throw new C("argument-error","credential failed: must provide the ID token and/or the access token.");return new mo(this.providerId,n,this.providerId)},x(So,ko),Qr(So,"PROVIDER_ID","facebook.com"),Qr(So,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),x(xo,ko),Qr(xo,"PROVIDER_ID","github.com"),Qr(xo,"GITHUB_SIGN_IN_METHOD","github.com"),x(Co,ko),Qr(Co,"PROVIDER_ID","google.com"),Qr(Co,"GOOGLE_SIGN_IN_METHOD","google.com"),x(_o,bo),Qr(_o,"PROVIDER_ID","twitter.com"),Qr(_o,"TWITTER_SIGN_IN_METHOD","twitter.com"),No.prototype.ka=function(e){return this.signInMethod==Ao.EMAIL_LINK_SIGN_IN_METHOD?ru(e,Ns,{email:this.a,oobCode:this.f}):ru(e,Qs,{email:this.a,password:this.f})},No.prototype.b=function(e,t){return this.signInMethod==Ao.EMAIL_LINK_SIGN_IN_METHOD?ru(e,Ps,{idToken:t,email:this.a,oobCode:this.f}):ru(e,Ws,{idToken:t,email:this.a,password:this.f})},No.prototype.c=function(e,t){return fo(this.ka(e),t)},No.prototype.w=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},Zr(Ao,{PROVIDER_ID:"password"}),Zr(Ao,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Zr(Ao,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Do.prototype.ka=function(e){return e.fb(Mo(this))},Do.prototype.b=function(e,t){var n=Mo(this);return n.idToken=t,ru(e,eu,n)},Do.prototype.c=function(e,t){var n=Mo(this);return n.operation="REAUTH",fo(e=ru(e,tu,n),t)},Do.prototype.w=function(){var e={providerId:"phone"};return this.a.eb&&(e.verificationId=this.a.eb),this.a.cb&&(e.verificationCode=this.a.cb),this.a.La&&(e.temporaryProof=this.a.La),this.a.ea&&(e.phoneNumber=this.a.ea),e},Fo.prototype.fb=function(e,t){var n=this.a.a;return _t(t.verify()).then((function(r){if("string"!=typeof r)throw new C("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(t.type){case"recaptcha":var i=g(e)?e.session:null,o=g(e)?e.phoneNumber:e;return(i&&i.type==uo?i.Ha().then((function(e){return function(e,t){return ru(e,qs,t).then((function(e){return e.phoneSessionInfo.sessionInfo}))}(n,{idToken:e,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:r}})})):i&&i.type==lo?i.Ha().then((function(t){return function(e,t){return ru(e,Ks,t).then((function(e){return e.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:t,mfaEnrollmentId:e.multiFactorHint&&e.multiFactorHint.uid||e.multiFactorUid,phoneSignInInfo:{recaptchaToken:r}})})):function(e,t){return ru(e,Hs,t)}(n,{phoneNumber:o,recaptchaToken:r})).then((function(e){return"function"==typeof t.reset&&t.reset(),e}),(function(e){throw"function"==typeof t.reset&&t.reset(),e}));default:throw new C("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},Zr(Fo,{PROVIDER_ID:"phone"}),Zr(Fo,{PHONE_SIGN_IN_METHOD:"phone"}),Ho.prototype.getUid=function(){var e=[];return e.push(this.c),this.b&&e.push(this.b),this.f&&e.push(this.f),this.h&&e.push(this.h),e.join("-")},Ho.prototype.T=function(){return this.h},Ho.prototype.w=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};var $o,qo=null;function Ko(e){var t="unauthorized-domain",n=void 0,r=Vn(e);e=r.a,"chrome-extension"==(r=r.c)?n=Be("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):"http"==r||"https"==r?n=Be("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):t="operation-not-supported-in-this-environment",C.call(this,t,n)}function Go(e,t,n){C.call(this,e,n),(e=t||{}).Jb&&Qr(this,"email",e.Jb),e.ea&&Qr(this,"phoneNumber",e.ea),e.credential&&Qr(this,"credential",e.credential),e.Zb&&Qr(this,"tenantId",e.Zb)}function Xo(e){if(e.code){var t=e.code||"";0==t.indexOf(O)&&(t=t.substring(O.length));var n={credential:zo(e),Zb:e.tenantId};if(e.email)n.Jb=e.email;else if(e.phoneNumber)n.ea=e.phoneNumber;else if(!n.credential)return new C(t,e.message||void 0);return new Go(t,n,e.message)}return null}function Yo(){}function Jo(e){return e.c||(e.c=e.b())}function Qo(){}function Zo(e){if(!e.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var t=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<t.length;n++){var r=t[n];try{return new ActiveXObject(r),e.f=r}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return e.f}function ea(){}function ta(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=k(this.qc,this),this.a.onerror=k(this.Sb,this),this.a.onprogress=k(this.rc,this),this.a.ontimeout=k(this.vc,this)}function na(e,t){e.readyState=t,e.onreadystatechange&&e.onreadystatechange()}function ra(e,t,n){this.reset(e,t,n,void 0,void 0)}function ia(e){this.f=e,this.b=this.c=this.a=null}function oa(e,t){this.name=e,this.value=t}x(Ko,C),x(Go,C),Go.prototype.w=function(){var e={code:this.code,message:this.message};this.email&&(e.email=this.email),this.phoneNumber&&(e.phoneNumber=this.phoneNumber),this.tenantId&&(e.tenantId=this.tenantId);var t=this.credential&&this.credential.w();return t&&ve(e,t),e},Go.prototype.toJSON=function(){return this.w()},Yo.prototype.c=null,x(Qo,Yo),Qo.prototype.a=function(){var e=Zo(this);return e?new ActiveXObject(e):new XMLHttpRequest},Qo.prototype.b=function(){var e={};return Zo(this)&&(e[0]=!0,e[1]=!0),e},$o=new Qo,x(ea,Yo),ea.prototype.a=function(){var e=new XMLHttpRequest;if("withCredentials"in e)return e;if("undefined"!=typeof XDomainRequest)return new ta;throw Error("Unsupported browser")},ea.prototype.b=function(){return{}},(e=ta.prototype).open=function(e,t,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(e,t)},e.send=function(e){if(e){if("string"!=typeof e)throw Error("Only string data is supported");this.a.send(e)}else this.a.send()},e.abort=function(){this.a.abort()},e.setRequestHeader=function(){},e.getResponseHeader=function(e){return"content-type"==e.toLowerCase()?this.a.contentType:""},e.qc=function(){this.status=200,this.response=this.responseText=this.a.responseText,na(this,4)},e.Sb=function(){this.status=500,this.response=this.responseText="",na(this,4)},e.vc=function(){this.Sb()},e.rc=function(){this.status=200,na(this,1)},e.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},ra.prototype.a=null,ra.prototype.reset=function(e,t,n,r,i){r||E(),delete this.a},oa.prototype.toString=function(){return this.name};var aa=new oa("SEVERE",1e3),sa=new oa("WARNING",900),ua=new oa("CONFIG",700),la=new oa("FINE",500);function ca(e){return e.c?e.c:e.a?ca(e.a):(j("Root logger has no level set."),null)}ia.prototype.log=function(e,t,n){if(e.value>=ca(this).value)for(d(t)&&(t=t()),e=new ra(e,String(t),this.f),n&&(e.a=n),n=this;n;)n=n.a};var fa={},ha=null;function pa(e){var t;if(ha||(ha=new ia(""),fa[""]=ha,ha.c=ua),!(t=fa[e])){t=new ia(e);var n=e.lastIndexOf("."),r=e.substr(n+1);(n=pa(e.substr(0,n))).b||(n.b={}),n.b[r]=t,t.a=n,fa[e]=t}return t}function da(e,t){e&&e.log(la,t,void 0)}function ga(e){this.f=e}function ma(e){En.call(this),this.u=e,this.h=void 0,this.readyState=va,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.l=new Headers,this.b=null,this.s="GET",this.f="",this.a=!1,this.i=pa("goog.net.FetchXmlHttp"),this.m=this.c=this.g=null}x(ga,Yo),ga.prototype.a=function(){return new ma(this.f)},ga.prototype.b=function(e){return function(){return e}}({}),x(ma,En);var va=0;function ya(e){e.c.read().then(e.pc.bind(e)).catch(e.Ua.bind(e))}function ba(e){e.readyState=4,e.g=null,e.c=null,e.m=null,wa(e)}function wa(e){e.onreadystatechange&&e.onreadystatechange.call(e)}function ka(e){En.call(this),this.headers=new Pn,this.D=e||null,this.c=!1,this.C=this.a=null,this.h=this.R=this.l="",this.f=this.O=this.i=this.J=!1,this.g=0,this.s=null,this.m=Sa,this.u=this.S=!1}(e=ma.prototype).open=function(e,t){if(this.readyState!=va)throw this.abort(),Error("Error reopening a connection");this.s=e,this.f=t,this.readyState=1,wa(this)},e.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var t={headers:this.l,method:this.s,credentials:this.h,cache:void 0};e&&(t.body=e),this.u.fetch(new Request(this.f,t)).then(this.uc.bind(this),this.Ua.bind(this))},e.abort=function(){this.response=this.responseText="",this.l=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,ba(this)),this.readyState=va},e.uc=function(e){this.a&&(this.g=e,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=e.headers,this.readyState=2,wa(this)),this.a&&(this.readyState=3,wa(this),this.a&&("arraybuffer"===this.responseType?e.arrayBuffer().then(this.sc.bind(this),this.Ua.bind(this)):void 0!==s.ReadableStream&&"body"in e?(this.response=this.responseText="",this.c=e.body.getReader(),this.m=new TextDecoder,ya(this)):e.text().then(this.tc.bind(this),this.Ua.bind(this)))))},e.pc=function(e){if(this.a){var t=this.m.decode(e.value?e.value:new Uint8Array(0),{stream:!e.done});t&&(this.response=this.responseText+=t),e.done?ba(this):wa(this),3==this.readyState&&ya(this)}},e.tc=function(e){this.a&&(this.response=this.responseText=e,ba(this))},e.sc=function(e){this.a&&(this.response=e,ba(this))},e.Ua=function(e){var t=this.i;t&&t.log(sa,"Failed to fetch url "+this.f,e instanceof Error?e:Error(e)),this.a&&ba(this)},e.setRequestHeader=function(e,t){this.l.append(e,t)},e.getResponseHeader=function(e){return this.b?this.b.get(e.toLowerCase())||"":((e=this.i)&&e.log(sa,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")},e.getAllResponseHeaders=function(){if(!this.b){var e=this.i;return e&&e.log(sa,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0),""}e=[];for(var t=this.b.entries(),n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},Object.defineProperty(ma.prototype,"withCredentials",{get:function(){return"include"===this.h},set:function(e){this.h=e?"include":"same-origin"}}),x(ka,En);var Sa="";ka.prototype.b=pa("goog.net.XhrIo");var Ea=/^https?$/i,xa=["POST","PUT"];function Ia(e){return"content-type"==e.toLowerCase()}function Ca(e,t){e.c=!1,e.a&&(e.f=!0,e.a.abort(),e.f=!1),e.h=t,Ta(e),Oa(e)}function Ta(e){e.J||(e.J=!0,e.dispatchEvent("complete"),e.dispatchEvent("error"))}function _a(e){if(e.c&&void 0!==a)if(e.C[1]&&4==Pa(e)&&2==Aa(e))da(e.b,La(e,"Local request error detected and ignored"));else if(e.i&&4==Pa(e))Tn(e.Vb,0,e);else if(e.dispatchEvent("readystatechange"),4==Pa(e)){da(e.b,La(e,"Request complete")),e.c=!1;try{var t,n=Aa(e);e:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break e;default:r=!1}if(!(t=r)){var i;if(i=0===n){var o=String(e.l).match(Rn)[1]||null;if(!o&&s.self&&s.self.location){var u=s.self.location.protocol;o=u.substr(0,u.length-1)}i=!Ea.test(o?o.toLowerCase():"")}t=i}if(t)e.dispatchEvent("complete"),e.dispatchEvent("success");else{try{var l=2<Pa(e)?e.a.statusText:""}catch(t){da(e.b,"Can not get status: "+t.message),l=""}e.h=l+" ["+Aa(e)+"]",Ta(e)}}finally{Oa(e)}}}function Oa(e,t){if(e.a){Na(e);var n=e.a,r=e.C[0]?f:null;e.a=null,e.C=null,t||e.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){(e=e.b)&&e.log(aa,"Problem encountered resetting onreadystatechange: "+t.message,void 0)}}}function Na(e){e.a&&e.u&&(e.a.ontimeout=null),e.s&&(s.clearTimeout(e.s),e.s=null)}function Pa(e){return e.a?e.a.readyState:0}function Aa(e){try{return 2<Pa(e)?e.a.status:-1}catch(e){return-1}}function La(e,t){return t+" ["+e.R+" "+e.l+" "+Aa(e)+"]"}function Ra(e){var t=$a;this.g=[],this.u=t,this.s=e||null,this.f=this.a=!1,this.c=void 0,this.v=this.C=this.i=!1,this.h=0,this.b=null,this.l=0}function Da(e,t,n){e.a=!0,e.c=n,e.f=!t,Ua(e)}function ja(e){if(e.a){if(!e.v)throw new za(e);e.v=!1}}function Ma(e,t,n,r){e.g.push([t,n,r]),e.a&&Ua(e)}function Fa(e){return K(e.g,(function(e){return d(e[1])}))}function Ua(e){if(e.h&&e.a&&Fa(e)){var t=e.h,n=Ba[t];n&&(s.clearTimeout(n.a),delete Ba[t]),e.h=0}e.b&&(e.b.l--,delete e.b),t=e.c;for(var r=n=!1;e.g.length&&!e.i;){var i=e.g.shift(),o=i[0],a=i[1];if(i=i[2],o=e.f?a:o)try{var u=o.call(i||e.s,t);void 0!==u&&(e.f=e.f&&(u==t||u instanceof Error),e.c=t=u),(L(t)||"function"==typeof s.Promise&&t instanceof s.Promise)&&(r=!0,e.i=!0)}catch(r){t=r,e.f=!0,Fa(e)||(n=!0)}}e.c=t,r&&(u=k(e.m,e,!0),r=k(e.m,e,!1),t instanceof Ra?(Ma(t,u,r),t.C=!0):t.then(u,r)),n&&(t=new Ha(t),Ba[t.a]=t,e.h=t.a)}function za(){R.call(this)}function Va(){R.call(this)}function Ha(e){this.a=s.setTimeout(k(this.c,this),0),this.b=e}(e=ka.prototype).Ma=function(){void 0!==a&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",da(this.b,La(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},e.abort=function(){this.a&&this.c&&(da(this.b,La(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Oa(this))},e.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Oa(this,!0)),ka.ab.Da.call(this)},e.Vb=function(){this.xa||(this.O||this.i||this.f?_a(this):this.Jc())},e.Jc=function(){_a(this)},e.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Sa:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var e=this.b;return e&&e.log(aa,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(e){return da(this.b,"Can not get response: "+e.message),null}},Ra.prototype.cancel=function(e){if(this.a)this.c instanceof Ra&&this.c.cancel();else{if(this.b){var t=this.b;delete this.b,e?t.cancel(e):(t.l--,0>=t.l&&t.cancel())}this.u?this.u.call(this.s,this):this.v=!0,this.a||(e=new Va(this),ja(this),Da(this,!1,e))}},Ra.prototype.m=function(e,t){this.i=!1,Da(this,e,t)},Ra.prototype.then=function(e,t,n){var r,i,o=new kt((function(e,t){r=e,i=t}));return Ma(this,r,(function(e){e instanceof Va?o.cancel():i(e)})),o.then(e,t,n)},Ra.prototype.$goog_Thenable=!0,x(za,R),za.prototype.message="Deferred has already fired",za.prototype.name="AlreadyCalledError",x(Va,R),Va.prototype.message="Deferred was canceled",Va.prototype.name="CanceledError",Ha.prototype.c=function(){throw delete Ba[this.a],this.b};var Ba={};function Wa(e){var t={},n=t.document||document,r=Ce(e).toString(),i=gt(document,"SCRIPT"),o={Wb:i,Ma:void 0},a=new Ra(o),u=null,f=null!=t.timeout?t.timeout:5e3;return 0<f&&(u=window.setTimeout((function(){qa(i,!0);var e=new Xa(Ga,"Timeout reached for loading script "+r);ja(a),Da(a,!1,e)}),f),o.Ma=u),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(qa(i,t.xd||!1,u),ja(a),Da(a,!0,null))},i.onerror=function(){qa(i,!0,u);var e=new Xa(Ka,"Error while loading script "+r);ja(a),Da(a,!1,e)},ve(o=t.attributes||{},{type:"text/javascript",charset:"UTF-8"}),ct(i,o),function(e,t){ye(e,"HTMLScriptElement"),e.src=Ce(t),(t=e.ownerDocument&&e.ownerDocument.defaultView)&&t!=s?t=c(t.document):(null===l&&(l=c(s.document)),t=l),t&&e.setAttribute("nonce",t)}(i,e),function(e){var t;return(t=(e||document).getElementsByTagName("HEAD"))&&0!=t.length?t[0]:e.documentElement}(n).appendChild(i),a}function $a(){if(this&&this.Wb){var e=this.Wb;e&&"SCRIPT"==e.tagName&&qa(e,!0,this.Ma)}}function qa(e,t,n){null!=n&&s.clearTimeout(n),e.onload=f,e.onerror=f,e.onreadystatechange=f,t&&window.setTimeout((function(){e&&e.parentNode&&e.parentNode.removeChild(e)}),0)}var Ka=0,Ga=1;function Xa(e,t){var n="Jsloader error (code #"+e+")";t&&(n+=": "+t),R.call(this,n),this.code=e}function Ya(e){this.f=e}function Ja(e,t,n){if(this.c=e,e=t||{},this.l=e.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.m=e.secureTokenTimeout||es,this.g=ge(e.secureTokenHeaders||ts),this.h=e.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=e.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.v=e.firebaseTimeout||ns,this.a=ge(e.firebaseHeaders||rs),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==xr(),!(n=s.XMLHttpRequest||n&&mn.INTERNAL.node&&mn.INTERNAL.node.XMLHttpRequest)&&!Er())throw new C("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,Er()?this.f=new ga(self):Ir()?this.f=new Ya(n):this.f=new ea,this.b=null}x(Xa,R),x(Ya,Yo),Ya.prototype.a=function(){return new this.f},Ya.prototype.b=function(){return{}};var Qa,Za="idToken",es=new Wr(3e4,6e4),ts={"Content-Type":"application/x-www-form-urlencoded"},ns=new Wr(3e4,6e4),rs={"Content-Type":"application/json"};function is(e,t){t?e.a["X-Firebase-Locale"]=t:delete e.a["X-Firebase-Locale"]}function os(e,t){t&&(e.l=as("https://securetoken.googleapis.com/v1/token",t),e.h=as("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",t),e.i=as("https://identitytoolkit.googleapis.com/v2/",t))}function as(e,t){return e=Vn(e),t=Vn(t.url),e.f=e.a+e.f,jn(e,t.c),e.a=t.a,Mn(e,t.g),e.toString()}function ss(e,t){t?(e.a["X-Client-Version"]=t,e.g["X-Client-Version"]=t):(delete e.a["X-Client-Version"],delete e.g["X-Client-Version"])}function us(e,t,n,r,i,o,a){(function(){var e=Pr();return!((e=_r(e)!=Tr?null:(e=e.match(/\sChrome\/(\d+)/i))&&2==e.length?parseInt(e[1],10):null)&&30>e||Xe&&st&&!(9<st))})()||Er()?e=k(e.u,e):(Qa||(Qa=new kt((function(e,t){!function(e,t){((window.gapi||{}).client||{}).request?e():(s[cs]=function(){((window.gapi||{}).client||{}).request?e():t(Error("CORS_UNSUPPORTED"))},function(e,t){Ma(e,null,t,void 0)}(Wa(Te(ls,{onload:cs})),(function(){t(Error("CORS_UNSUPPORTED"))})))}(e,t)}))),e=k(e.s,e)),e(t,n,r,i,o,a)}Ja.prototype.T=function(){return this.b},Ja.prototype.u=function(e,t,n,r,i,o){if(Er()&&(void 0===s.fetch||void 0===s.Headers||void 0===s.Request))throw new C("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new ka(this.f);if(o){a.g=Math.max(0,o);var u=setTimeout((function(){a.dispatchEvent("timeout")}),o)}xn(a,"complete",(function(){u&&clearTimeout(u);var e=null;try{e=JSON.parse(function(e){try{return e.a?e.a.responseText:""}catch(t){return da(e.b,"Can not get responseText: "+t.message),""}}(this))||null}catch(t){e=null}t&&t(e)})),In(a,"ready",(function(){u&&clearTimeout(u),qt(this)})),In(a,"timeout",(function(){u&&clearTimeout(u),qt(this),t&&t(null)})),function(e,t,n,r,i){if(e.a)throw Error("[goog.net.XhrIo] Object is active with another request="+e.l+"; newUri="+t);n=n?n.toUpperCase():"GET",e.l=t,e.h="",e.R=n,e.J=!1,e.c=!0,e.a=e.D?e.D.a():$o.a(),e.C=e.D?Jo(e.D):Jo($o),e.a.onreadystatechange=k(e.Vb,e);try{da(e.b,La(e,"Opening Xhr")),e.O=!0,e.a.open(n,String(t),!0),e.O=!1}catch(t){return da(e.b,La(e,"Error opening Xhr: "+t.message)),void Ca(e,t)}t=r||"";var o=new Pn(e.headers);i&&function(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(p(e)||"string"==typeof e)W(e,t,void 0);else for(var n=Nn(e),r=On(e),i=r.length,o=0;o<i;o++)t.call(void 0,r[o],n&&n[o],e)}(i,(function(e,t){o.set(t,e)})),i=function(e){e:{for(var t=Ia,n=e.length,r="string"==typeof e?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e)){t=i;break e}t=-1}return 0>t?null:"string"==typeof e?e.charAt(t):e[t]}(o.Y()),r=s.FormData&&t instanceof s.FormData,!G(xa,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(e,t){this.a.setRequestHeader(t,e)}),e),e.m&&(e.a.responseType=e.m),"withCredentials"in e.a&&e.a.withCredentials!==e.S&&(e.a.withCredentials=e.S);try{Na(e),0<e.g&&(e.u=function(e){return Xe&&at(9)&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(e.a),da(e.b,La(e,"Will abort after "+e.g+"ms if incomplete, xhr2 "+e.u)),e.u?(e.a.timeout=e.g,e.a.ontimeout=k(e.Ma,e)):e.s=Tn(e.Ma,e.g,e)),da(e.b,La(e,"Sending request")),e.i=!0,e.a.send(t),e.i=!1}catch(t){da(e.b,La(e,"Send error: "+t.message)),Ca(e,t)}}(a,e,n,r,i)};var ls=new be(Ee,"https://apis.google.com/js/client.js?onload=%{onload}"),cs="__fcb"+Math.floor(1e6*Math.random()).toString();function fs(e){if("string"!=typeof(e=e.email)||!br.test(e))throw new C("invalid-email")}function hs(e){"email"in e&&fs(e)}function ps(e){if(!e[Za]){if(e.mfaPendingCredential)throw new C("multi-factor-auth-required",null,ge(e));throw new C("internal-error")}}function ds(e){if(e.phoneNumber||e.temporaryProof){if(!e.phoneNumber||!e.temporaryProof)throw new C("internal-error")}else{if(!e.sessionInfo)throw new C("missing-verification-id");if(!e.code)throw new C("missing-verification-code")}}Ja.prototype.s=function(e,t,n,r,i){var o=this;Qa.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:e,method:n,body:r,headers:i,authType:"none",callback:function(e){window.gapi.auth.setToken(a),t&&t(e)}})})).o((function(e){t&&t({error:{message:e&&e.message||"CORS_UNSUPPORTED"}})}))},Ja.prototype.zb=function(){return ru(this,$s,{})},Ja.prototype.Bb=function(e,t){return ru(this,Bs,{idToken:e,email:t})},Ja.prototype.Cb=function(e,t){return ru(this,Ws,{idToken:e,password:t})};var gs={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function ms(e){if(!e.phoneVerificationInfo)throw new C("internal-error");if(!e.phoneVerificationInfo.sessionInfo)throw new C("missing-verification-id");if(!e.phoneVerificationInfo.code)throw new C("missing-verification-code")}function vs(e){if(!e.requestUri||!e.sessionId&&!e.postBody&&!e.pendingToken)throw new C("internal-error")}function ys(e,t){return t.oauthIdToken&&t.providerId&&0==t.providerId.indexOf("oidc.")&&!t.pendingToken&&(e.sessionId?t.nonce=e.sessionId:e.postBody&&tr(e=new Jn(e.postBody),"nonce")&&(t.nonce=e.get("nonce"))),t}function bs(e){var t=null;if(e.needConfirmation?(e.code="account-exists-with-different-credential",t=Xo(e)):"FEDERATED_USER_ID_ALREADY_LINKED"==e.errorMessage?(e.code="credential-already-in-use",t=Xo(e)):"EMAIL_EXISTS"==e.errorMessage?(e.code="email-already-in-use",t=Xo(e)):e.errorMessage&&(t=iu(e.errorMessage)),t)throw t;ps(e)}function ws(e,t){return t.returnIdpCredential=!0,ru(e,Gs,t)}function ks(e,t){return t.returnIdpCredential=!0,ru(e,Ys,t)}function Ss(e,t){return t.returnIdpCredential=!0,t.autoCreate=!1,ru(e,Xs,t)}function Es(e){if(!e.oobCode)throw new C("invalid-action-code")}(e=Ja.prototype).Db=function(e,t){var n={idToken:e},r=[];return pe(gs,(function(e,i){var o=t[i];null===o?r.push(e):i in t&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),ru(this,Bs,n)},e.vb=function(e,t){return ve(e={requestType:"PASSWORD_RESET",email:e},t),ru(this,Fs,e)},e.wb=function(e,t){return ve(e={requestType:"EMAIL_SIGNIN",email:e},t),ru(this,Ds,e)},e.ub=function(e,t){return ve(e={requestType:"VERIFY_EMAIL",idToken:e},t),ru(this,js,e)},e.Eb=function(e,t,n){return ve(e={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:e,newEmail:t},n),ru(this,Ms,e)},e.fb=function(e){return ru(this,Zs,e)},e.nb=function(e,t){return ru(this,Vs,{oobCode:e,newPassword:t})},e.Ra=function(e){return ru(this,Is,{oobCode:e})},e.jb=function(e){return ru(this,xs,{oobCode:e})};var xs={endpoint:"setAccountInfo",A:Es,Z:"email",B:!0},Is={endpoint:"resetPassword",A:Es,G:function(e){var t=e.requestType;if(!t||!e.email&&"EMAIL_SIGNIN"!=t&&"VERIFY_AND_CHANGE_EMAIL"!=t)throw new C("internal-error")},B:!0},Cs={endpoint:"signupNewUser",A:function(e){if(fs(e),!e.password)throw new C("weak-password")},G:ps,V:!0,B:!0},Ts={endpoint:"createAuthUri",B:!0},_s={endpoint:"deleteAccount",N:["idToken"]},Os={endpoint:"setAccountInfo",N:["idToken","deleteProvider"],A:function(e){if(!Array.isArray(e.deleteProvider))throw new C("internal-error")}},Ns={endpoint:"emailLinkSignin",N:["email","oobCode"],A:fs,G:ps,V:!0,B:!0},Ps={endpoint:"emailLinkSignin",N:["idToken","email","oobCode"],A:fs,G:ps,V:!0},As={endpoint:"accounts/mfaEnrollment:finalize",N:["idToken","phoneVerificationInfo"],A:ms,G:ps,B:!0,Na:!0},Ls={endpoint:"accounts/mfaSignIn:finalize",N:["mfaPendingCredential","phoneVerificationInfo"],A:ms,G:ps,B:!0,Na:!0},Rs={endpoint:"getAccountInfo"},Ds={endpoint:"getOobConfirmationCode",N:["requestType"],A:function(e){if("EMAIL_SIGNIN"!=e.requestType)throw new C("internal-error");fs(e)},Z:"email",B:!0},js={endpoint:"getOobConfirmationCode",N:["idToken","requestType"],A:function(e){if("VERIFY_EMAIL"!=e.requestType)throw new C("internal-error")},Z:"email",B:!0},Ms={endpoint:"getOobConfirmationCode",N:["idToken","newEmail","requestType"],A:function(e){if("VERIFY_AND_CHANGE_EMAIL"!=e.requestType)throw new C("internal-error")},Z:"email",B:!0},Fs={endpoint:"getOobConfirmationCode",N:["requestType"],A:function(e){if("PASSWORD_RESET"!=e.requestType)throw new C("internal-error");fs(e)},Z:"email",B:!0},Us={lb:!0,endpoint:"getProjectConfig",Ub:"GET"},zs={lb:!0,endpoint:"getRecaptchaParam",Ub:"GET",G:function(e){if(!e.recaptchaSiteKey)throw new C("internal-error")}},Vs={endpoint:"resetPassword",A:Es,Z:"email",B:!0},Hs={endpoint:"sendVerificationCode",N:["phoneNumber","recaptchaToken"],Z:"sessionInfo",B:!0},Bs={endpoint:"setAccountInfo",N:["idToken"],A:hs,V:!0},Ws={endpoint:"setAccountInfo",N:["idToken"],A:function(e){if(hs(e),!e.password)throw new C("weak-password")},G:ps,V:!0},$s={endpoint:"signupNewUser",G:ps,V:!0,B:!0},qs={endpoint:"accounts/mfaEnrollment:start",N:["idToken","phoneEnrollmentInfo"],A:function(e){if(!e.phoneEnrollmentInfo)throw new C("internal-error");if(!e.phoneEnrollmentInfo.phoneNumber)throw new C("missing-phone-number");if(!e.phoneEnrollmentInfo.recaptchaToken)throw new C("missing-app-credential")},G:function(e){if(!e.phoneSessionInfo||!e.phoneSessionInfo.sessionInfo)throw new C("internal-error")},B:!0,Na:!0},Ks={endpoint:"accounts/mfaSignIn:start",N:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],A:function(e){if(!e.phoneSignInInfo||!e.phoneSignInInfo.recaptchaToken)throw new C("missing-app-credential")},G:function(e){if(!e.phoneResponseInfo||!e.phoneResponseInfo.sessionInfo)throw new C("internal-error")},B:!0,Na:!0},Gs={endpoint:"verifyAssertion",A:vs,Ya:ys,G:bs,V:!0,B:!0},Xs={endpoint:"verifyAssertion",A:vs,Ya:ys,G:function(e){if(e.errorMessage&&"USER_NOT_FOUND"==e.errorMessage)throw new C("user-not-found");if(e.errorMessage)throw iu(e.errorMessage);ps(e)},V:!0,B:!0},Ys={endpoint:"verifyAssertion",A:function(e){if(vs(e),!e.idToken)throw new C("internal-error")},Ya:ys,G:bs,V:!0},Js={endpoint:"verifyCustomToken",A:function(e){if(!e.token)throw new C("invalid-custom-token")},G:ps,V:!0,B:!0},Qs={endpoint:"verifyPassword",A:function(e){if(fs(e),!e.password)throw new C("wrong-password")},G:ps,V:!0,B:!0},Zs={endpoint:"verifyPhoneNumber",A:ds,G:ps,B:!0},eu={endpoint:"verifyPhoneNumber",A:function(e){if(!e.idToken)throw new C("internal-error");ds(e)},G:function(e){if(e.temporaryProof)throw e.code="credential-already-in-use",Xo(e);ps(e)}},tu={Hb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",A:ds,G:ps,B:!0},nu={endpoint:"accounts/mfaEnrollment:withdraw",N:["idToken","mfaEnrollmentId"],G:function(e){if(!!e[Za]^!!e.refreshToken)throw new C("internal-error")},B:!0,Na:!0};function ru(e,t,n){if(!function(e,t){if(!t||!t.length)return!0;if(!e)return!1;for(var n=0;n<t.length;n++){var r=e[t[n]];if(null==r||""===r)return!1}return!0}(n,t.N))return Ot(new C("internal-error"));var r,i=!!t.Na,o=t.Ub||"POST";return _t(n).then(t.A).then((function(){return t.V&&(n.returnSecureToken=!0),t.B&&e.b&&void 0===n.tenantId&&(n.tenantId=e.b),function(e,t,n,r,i,o,a){var s=Vn(t+n);Un(s,"key",e.c),a&&Un(s,"cb",E().toString());var u="GET"==r;if(u)for(var l in i)i.hasOwnProperty(l)&&Un(s,l,i[l]);return new kt((function(t,n){us(e,s.toString(),(function(e){e?e.error?n(ou(e,o||{})):t(e):n(new C("network-request-failed"))}),r,u?void 0:or(Ur(i)),e.a,e.v.get())}))}(e,i?e.i:e.h,t.endpoint,o,n,t.Hb,t.lb||!1)})).then((function(e){return r=e,t.Ya?t.Ya(n,r):r})).then(t.G).then((function(){if(!t.Z)return r;if(!(t.Z in r))throw new C("internal-error");return r[t.Z]}))}function iu(e){return ou({error:{errors:[{message:e}],code:400,message:e}})}function ou(e,t){var n=(e.error&&e.error.errors&&e.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new C(r[n]):null)return n;for(var i in n=e.error&&e.error.message||"",ve(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},t||{}),t=(t=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<t.length?t[1]:void 0,r)if(0===n.indexOf(i))return new C(r[i],t);return!t&&e&&(t=Fr(e)),new C("internal-error",t)}function au(e){this.b=e,this.a=null,this.rb=function(e){return(cu||(cu=new kt((function(e,t){function n(){Br(),Ar("gapi.load")("gapi.iframes",{callback:e,ontimeout:function(){Br(),t(Error("Network Error"))},timeout:uu.get()})}if(Ar("gapi.iframes.Iframe"))e();else if(Ar("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();s[r]=function(){Ar("gapi.load")?n():t(Error("Network Error"))},_t(Wa(r=Te(su,{onload:r}))).o((function(){t(Error("Network Error"))}))}})).o((function(e){throw cu=null,e})))).then((function(){return new kt((function(t,n){Ar("gapi.iframes.getContext")().open({where:document.body,url:e.b,messageHandlersFilter:Ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),t()}e.a=r,e.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),lu.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var su=new be(Ee,"https://apis.google.com/js/api.js?onload=%{onload}"),uu=new Wr(3e4,6e4),lu=new Wr(5e3,15e3),cu=null;function fu(e,t,n,r){this.l=e,this.h=t,this.i=n,this.g=r,this.f=null,e=this.g?Hn((e=Vn(this.g.url)).c,e.a,e.g,"/emulator/auth/iframe"):Hn("https",this.l,null,"/__/auth/iframe"),this.a=e,Un(this.a,"apiKey",this.h),Un(this.a,"appName",this.i),this.b=null,this.c=[]}function hu(e,t,n,r,i,o){this.u=e,this.s=t,this.c=n,this.m=r,this.v=o,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function pu(e){try{return mn.app(e).auth().Ga()}catch(e){return[]}}function du(e,t,n,r,i,o){this.s=e,this.g=t,this.b=n,this.f=o,this.c=r||null,this.i=i||null,this.l=this.u=this.C=null,this.h=[],this.m=this.a=null}function gu(e){var t=hr();return function(e){return ru(e,Us,{}).then((function(e){return e.authorizedDomains||[]}))}(e).then((function(e){e:{var n=Vn(t),r=n.c;n=n.a;for(var i=0;i<e.length;i++){var o=e[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=Vn(o).a==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:yr.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){e=!0;break e}}e=!1}if(!e)throw new Ko(hr())}))}function mu(e){return e.m||(e.m=wr().then((function(){if(!e.u){var t=e.c,n=e.i,r=pu(e.b),i=new fu(e.s,e.g,e.b,e.f);i.f=t,i.b=n,i.c=Q(r||[]),e.u=i.toString()}e.v=new au(e.u),function(e){if(!e.v)throw Error("IfcHandler must be initialized!");!function(e,t){e.rb.then((function(){e.a.register("authEvent",t,Ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(e.v,(function(t){var n={};if(t&&t.authEvent){var r=!1;for(t=Bo(t.authEvent),n=0;n<e.h.length;n++)r=e.h[n](t)||r;return(n={}).status=r?"ACK":"ERROR",_t(n)}return n.status="ERROR",_t(n)}))}(e)}))),e.m}function vu(e){return e.l||(e.C=e.c?Nr(e.c,pu(e.b)):null,e.l=new Ja(e.g,A(e.i),e.C),e.f&&os(e.l,e.f)),e.l}function yu(e,t,n,r,i,o,a,s,u,l,c,f){return(e=new hu(e,t,n,r,i,f)).l=o,e.g=a,e.i=s,e.b=ge(u||null),e.f=l,e.yb(c).toString()}function bu(e){if(this.a=e||mn.INTERNAL.reactNative&&mn.INTERNAL.reactNative.AsyncStorage,!this.a)throw new C("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function wu(e){this.b=e,this.a={},this.f=k(this.c,this)}fu.prototype.toString=function(){return this.f?Un(this.a,"v",this.f):er(this.a.b,"v"),this.b?Un(this.a,"eid",this.b):er(this.a.b,"eid"),this.c.length?Un(this.a,"fw",this.c.join(",")):er(this.a.b,"fw"),this.a.toString()},hu.prototype.yb=function(e){return this.h=e,this},hu.prototype.toString=function(){if(this.v){var e=Vn(this.v.url);e=Hn(e.c,e.a,e.g,"/emulator/auth/handler")}else e=Hn("https",this.u,null,"/__/auth/handler");if(Un(e,"apiKey",this.s),Un(e,"appName",this.c),Un(e,"authType",this.m),this.a.isOAuthProvider){var t=this.a;try{var n=mn.app(this.c).auth().la()}catch(e){n=null}for(var r in t.ob=n,Un(e,"providerId",this.a.providerId),t=Ur((n=this.a).Ib))t[r]=t[r].toString();r=n.Qc,t=ge(t);for(var i=0;i<r.length;i++){var o=r[i];o in t&&delete t[o]}n.pb&&n.ob&&!t[n.pb]&&(t[n.pb]=n.ob),de(t)||Un(e,"customParameters",Fr(t))}if("function"==typeof this.a.Qb&&(n=this.a.Qb()).length&&Un(e,"scopes",n.join(",")),this.l?Un(e,"redirectUrl",this.l):er(e.b,"redirectUrl"),this.g?Un(e,"eventId",this.g):er(e.b,"eventId"),this.i?Un(e,"v",this.i):er(e.b,"v"),this.b)for(var a in this.b)this.b.hasOwnProperty(a)&&!zn(e,a)&&Un(e,a,this.b[a]);return this.h?Un(e,"tid",this.h):er(e.b,"tid"),this.f?Un(e,"eid",this.f):er(e.b,"eid"),(a=pu(this.c)).length&&Un(e,"fw",a.join(",")),e.toString()},(e=du.prototype).Ob=function(e,t,n){var r=new C("popup-closed-by-user"),i=new C("web-storage-unsupported"),o=this,a=!1;return this.ma().then((function(){(function(e){var t={type:"webStorageSupport"};return mu(e).then((function(){return function(e,t){return e.rb.then((function(){return new kt((function(n){e.a.send(t.type,t,n,Ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(e.v,t)})).then((function(e){if(e&&e.length&&void 0!==e[0].webStorageSupport)return e[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(e&&mr(e),t(i),a=!0)}))})).o((function(){})).then((function(){if(!a)return function(e){return new kt((function(t){return function n(){_n(2e3).then((function(){if(e&&!e.closed)return n();t()}))}()}))}(e)})).then((function(){if(!a)return _n(n).then((function(){t(r)}))}))},e.Xb=function(){var e=Pr();return!Mr(e)&&!Hr(e)},e.Tb=function(){return!1},e.Mb=function(e,t,n,r,i,o,a,s){if(!e)return Ot(new C("popup-blocked"));if(a&&!Mr())return this.ma().o((function(t){mr(e),i(t)})),r(),_t();this.a||(this.a=gu(vu(this)));var u=this;return this.a.then((function(){var t=u.ma().o((function(t){throw mr(e),i(t),t}));return r(),t})).then((function(){Vo(n),a||pr(yu(u.s,u.g,u.b,t,n,null,o,u.c,void 0,u.i,s,u.f),e)})).o((function(e){throw"auth/network-request-failed"==e.code&&(u.a=null),e}))},e.Nb=function(e,t,n,r){this.a||(this.a=gu(vu(this)));var i=this;return this.a.then((function(){Vo(t),pr(yu(i.s,i.g,i.b,e,t,hr(),n,i.c,void 0,i.i,r,i.f))})).o((function(e){throw"auth/network-request-failed"==e.code&&(i.a=null),e}))},e.ma=function(){var e=this;return mu(this).then((function(){return e.v.rb})).o((function(){throw e.a=null,new C("network-request-failed")}))},e.$b=function(){return!0},e.Ea=function(e){this.h.push(e)},e.Sa=function(e){Y(this.h,(function(t){return t==e}))},(e=bu.prototype).get=function(e){return _t(this.a.getItem(e)).then((function(e){return e&&zr(e)}))},e.set=function(e,t){return _t(this.a.setItem(e,Fr(t)))},e.U=function(e){return _t(this.a.removeItem(e))},e.ca=function(){},e.ia=function(){};var ku,Su=[];function Eu(e,t,n){de(e.a)&&e.b.addEventListener("message",e.f),void 0===e.a[t]&&(e.a[t]=[]),e.a[t].push(n)}function xu(e){this.a=e}function Iu(e){this.c=e,this.b=!1,this.a=[]}function Cu(e,t,n,r){var i,o,a,s,u=n||{},l=null;if(e.b)return Ot(Error("connection_unavailable"));var c=r?800:50,f="undefined"!=typeof MessageChannel?new MessageChannel:null;return new kt((function(n,r){f?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),f.port1.start(),a=setTimeout((function(){r(Error("unsupported_event"))}),c),l={messageChannel:f,onMessage:o=function(e){e.data.eventId===i&&("ack"===e.data.status?(clearTimeout(a),s=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===e.data.status?(clearTimeout(s),void 0!==e.data.response?n(e.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},e.a.push(l),f.port1.addEventListener("message",o),e.c.postMessage({eventType:t,eventId:i,data:u},[f.port2])):r(Error("connection_unavailable"))})).then((function(t){return Tu(e,l),t})).o((function(t){throw Tu(e,l),t}))}function Tu(e,t){if(t){var n=t.messageChannel,r=t.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),Y(e.a,(function(e){return e==t}))}}function _u(){if(!Au())throw new C("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.m=s.indexedDB,this.type="indexedDB",this.g=this.v=this.f=this.l=null,this.s=!1,this.h=null;var e=this;Er()&&self?(this.v=function(){var e=Er()?self:null;if(W(Su,(function(n){n.b==e&&(t=n)})),!t){var t=new wu(e);Su.push(t)}return t}(),Eu(this.v,"keyChanged",(function(t,n){return Mu(e).then((function(t){return 0<t.length&&W(e.a,(function(e){e(t)})),{keyProcessed:G(t,n.key)}}))})),Eu(this.v,"ping",(function(){return _t(["keyChanged"])}))):function(){var e=s.navigator;return e&&e.serviceWorker?_t().then((function(){return e.serviceWorker.ready})).then((function(e){return e.active||null})).o((function(){return null})):_t(null)}().then((function(t){(e.h=t)&&(e.g=new Iu(new xu(t)),Cu(e.g,"ping",null,!0).then((function(t){t[0].fulfilled&&G(t[0].value,"keyChanged")&&(e.s=!0)})).o((function(){})))}))}function Ou(e){return new kt((function(t,n){var r=e.m.open("firebaseLocalStorageDb",1);r.onerror=function(e){try{e.preventDefault()}catch(e){}n(Error(e.target.error))},r.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(e){n(e)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?t(r):function(e){return new kt((function(t,n){var r=e.m.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){t()},r.onerror=function(e){n(Error(e.target.error))}}))}(e).then((function(){return Ou(e)})).then((function(e){t(e)})).o((function(e){n(e)}))}}))}function Nu(e){return e.i||(e.i=Ou(e)),e.i}function Pu(e,t){var n=0;return new kt((function r(i,o){Nu(e).then(t).then(i).o((function(t){if(!(3<++n))return Nu(e).then((function(t){return t.close(),e.i=void 0,r(i,o)})).o((function(e){o(e)}));o(t)}))}))}function Au(){try{return!!s.indexedDB}catch(e){return!1}}function Lu(e){return e.objectStore("firebaseLocalStorage")}function Ru(e,t){return e.transaction(["firebaseLocalStorage"],t?"readwrite":"readonly")}function Du(e){return new kt((function(t,n){e.onsuccess=function(e){e&&e.target?t(e.target.result):t()},e.onerror=function(e){n(e.target.error)}}))}function ju(e,t){return e.g&&e.h&&function(){var e=s.navigator;return e&&e.serviceWorker&&e.serviceWorker.controller||null}()===e.h?Cu(e.g,"keyChanged",{key:t},e.s).then((function(){})).o((function(){})):_t()}function Mu(e){return Nu(e).then((function(e){var t=Lu(Ru(e,!1));return t.getAll?Du(t.getAll()):new kt((function(e,n){var r=[],i=t.openCursor();i.onsuccess=function(t){(t=t.target.result)?(r.push(t.value),t.continue()):e(r)},i.onerror=function(e){n(e.target.error)}}))})).then((function(t){var n={},r=[];if(0==e.b){for(r=0;r<t.length;r++)n[t[r].fbase_key]=t[r].value;r=dr(e.c,n),e.c=n}return r}))}function Fu(e){e.l&&e.l.cancel("STOP_EVENT"),e.f&&(clearTimeout(e.f),e.f=null)}function Uu(e){var t=this,n=null;this.a=[],this.type="indexedDB",this.c=e,this.b=_t().then((function(){if(Au()){var e=Vr(),r="__sak"+e;return ku||(ku=new _u),(n=ku).set(r,e).then((function(){return n.get(r)})).then((function(t){if(t!==e)throw Error("indexedDB not supported!");return n.U(r)})).then((function(){return n})).o((function(){return t.c}))}return t.c})).then((function(e){return t.type=e.type,e.ca((function(e){W(t.a,(function(t){t(e)}))})),e}))}function zu(){this.a={},this.type="inMemory"}function Vu(){if(!function(){var e="Node"==xr();if(!(e=Hu()||e&&mn.INTERNAL.node&&mn.INTERNAL.node.localStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==xr())throw new C("internal-error","The LocalStorage compatibility library was not found.");throw new C("web-storage-unsupported")}this.a=Hu()||mn.INTERNAL.node.localStorage,this.type="localStorage"}function Hu(){try{var e=s.localStorage,t=Vr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function Bu(){this.type="nullStorage"}function Wu(){if(!function(){var e="Node"==xr();if(!(e=$u()||e&&mn.INTERNAL.node&&mn.INTERNAL.node.sessionStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==xr())throw new C("internal-error","The SessionStorage compatibility library was not found.");throw new C("web-storage-unsupported")}this.a=$u()||mn.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function $u(){try{var e=s.sessionStorage,t=Vr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function qu(){var e={};e.Browser=Xu,e.Node=Yu,e.ReactNative=Ju,e.Worker=Qu,this.a=e[xr()]}wu.prototype.c=function(e){var t=e.data.eventType,n=e.data.eventId,r=this.a[t];if(r&&0<r.length){e.ports[0].postMessage({status:"ack",eventId:n,eventType:t,response:null});var i=[];W(r,(function(t){i.push(_t().then((function(){return t(e.origin,e.data.data)})))})),Pt(i).then((function(r){var i=[];W(r,(function(e){i.push({fulfilled:e.Pb,value:e.value,reason:e.reason?e.reason.message:void 0})})),W(i,(function(e){for(var t in e)void 0===e[t]&&delete e[t]})),e.ports[0].postMessage({status:"done",eventId:n,eventType:t,response:i})}))}},xu.prototype.postMessage=function(e,t){this.a.postMessage(e,t)},Iu.prototype.close=function(){for(;0<this.a.length;)Tu(this,this.a[0]);this.b=!0},(e=_u.prototype).set=function(e,t){var n=this,r=!1;return Pu(this,(function(t){return Du((t=Lu(Ru(t,!0))).get(e))})).then((function(i){return Pu(n,(function(o){if(o=Lu(Ru(o,!0)),i)return i.value=t,Du(o.put(i));n.b++,r=!0;var a={};return a.fbase_key=e,a.value=t,Du(o.add(a))}))})).then((function(){return n.c[e]=t,ju(n,e)})).oa((function(){r&&n.b--}))},e.get=function(e){return Pu(this,(function(t){return Du(Lu(Ru(t,!1)).get(e))})).then((function(e){return e&&e.value}))},e.U=function(e){var t=this,n=!1;return Pu(this,(function(r){return n=!0,t.b++,Du(Lu(Ru(r,!0)).delete(e))})).then((function(){return delete t.c[e],ju(t,e)})).oa((function(){n&&t.b--}))},e.ca=function(e){0==this.a.length&&function(e){Fu(e),function t(){e.f=setTimeout((function(){e.l=Mu(e).then((function(t){0<t.length&&W(e.a,(function(e){e(t)}))})).then((function(){t()})).o((function(e){"STOP_EVENT"!=e.message&&t()}))}),800)}()}(this),this.a.push(e)},e.ia=function(e){Y(this.a,(function(t){return t==e})),0==this.a.length&&Fu(this)},(e=Uu.prototype).get=function(e){return this.b.then((function(t){return t.get(e)}))},e.set=function(e,t){return this.b.then((function(n){return n.set(e,t)}))},e.U=function(e){return this.b.then((function(t){return t.U(e)}))},e.ca=function(e){this.a.push(e)},e.ia=function(e){Y(this.a,(function(t){return t==e}))},(e=zu.prototype).get=function(e){return _t(this.a[e])},e.set=function(e,t){return this.a[e]=t,_t()},e.U=function(e){return delete this.a[e],_t()},e.ca=function(){},e.ia=function(){},(e=Vu.prototype).get=function(e){var t=this;return _t().then((function(){return zr(t.a.getItem(e))}))},e.set=function(e,t){var n=this;return _t().then((function(){var r=Fr(t);null===r?n.U(e):n.a.setItem(e,r)}))},e.U=function(e){var t=this;return _t().then((function(){t.a.removeItem(e)}))},e.ca=function(e){s.window&&cn(s.window,"storage",e)},e.ia=function(e){s.window&&pn(s.window,"storage",e)},(e=Bu.prototype).get=function(){return _t(null)},e.set=function(){return _t()},e.U=function(){return _t()},e.ca=function(){},e.ia=function(){},(e=Wu.prototype).get=function(e){var t=this;return _t().then((function(){return zr(t.a.getItem(e))}))},e.set=function(e,t){var n=this;return _t().then((function(){var r=Fr(t);null===r?n.U(e):n.a.setItem(e,r)}))},e.U=function(e){var t=this;return _t().then((function(){t.a.removeItem(e)}))},e.ca=function(){},e.ia=function(){};var Ku,Gu,Xu={F:Vu,bb:Wu},Yu={F:Vu,bb:Wu},Ju={F:bu,bb:Bu},Qu={F:Vu,bb:Bu},Zu={rd:"local",NONE:"none",td:"session"};function el(){var e=!(Hr(Pr())||!Sr()),t=Mr(),n=Lr();this.m=e,this.h=t,this.l=n,this.a={},Ku||(Ku=new qu),e=Ku;try{this.g=!fr()&&Kr()||!s.indexedDB?new e.a.F:new Uu(Er()?new zu:new e.a.F)}catch(e){this.g=new zu,this.h=!0}try{this.i=new e.a.bb}catch(e){this.i=new zu}this.v=new zu,this.f=k(this.Yb,this),this.b={}}function tl(){return Gu||(Gu=new el),Gu}function nl(e,t){switch(t){case"session":return e.i;case"none":return e.v;default:return e.g}}function rl(e,t){return"firebase:"+e.name+(t?":"+t:"")}function il(e,t,n){return n=rl(t,n),"local"==t.F&&(e.b[n]=null),nl(e,t.F).U(n)}function ol(e){e.c&&(clearInterval(e.c),e.c=null)}function al(e){this.a=e,this.b=tl()}(e=el.prototype).get=function(e,t){return nl(this,e.F).get(rl(e,t))},e.set=function(e,t,n){var r=rl(e,n),i=this,o=nl(this,e.F);return o.set(r,t).then((function(){return o.get(r)})).then((function(t){"local"==e.F&&(i.b[r]=t)}))},e.addListener=function(e,t,n){e=rl(e,t),this.l&&(this.b[e]=s.localStorage.getItem(e)),de(this.a)&&(nl(this,"local").ca(this.f),this.h||(fr()||!Kr())&&s.indexedDB||!this.l||function(e){ol(e),e.c=setInterval((function(){for(var t in e.a){var n=s.localStorage.getItem(t),r=e.b[t];n!=r&&(e.b[t]=n,n=new Qt({type:"storage",key:t,target:window,oldValue:r,newValue:n,a:!0}),e.Yb(n))}}),1e3)}(this)),this.a[e]||(this.a[e]=[]),this.a[e].push(n)},e.removeListener=function(e,t,n){e=rl(e,t),this.a[e]&&(Y(this.a[e],(function(e){return e==n})),0==this.a[e].length&&delete this.a[e]),de(this.a)&&(nl(this,"local").ia(this.f),ol(this))},e.Yb=function(e){if(e&&e.g){var t=e.a.key;if(null==t)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=s.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.mb(n))}else if(0==t.indexOf("firebase:")&&this.a[t]){if(void 0!==e.a.a?nl(this,"local").ia(this.f):ol(this),this.m)if(n=s.localStorage.getItem(t),(r=e.a.newValue)!==n)null!==r?s.localStorage.setItem(t,r):s.localStorage.removeItem(t);else if(this.b[t]===r&&void 0===e.a.a)return;var o=this;n=function(){void 0===e.a.a&&o.b[t]===s.localStorage.getItem(t)||(o.b[t]=s.localStorage.getItem(t),o.mb(t))},Xe&&st&&10==st&&s.localStorage.getItem(t)!==e.a.newValue&&e.a.newValue!==e.a.oldValue?setTimeout(n,10):n()}}else W(e,k(this.mb,this))},e.mb=function(e){this.a[e]&&W(this.a[e],(function(e){e()}))};var sl,ul={name:"authEvent",F:"local"};function ll(){this.a=tl()}function cl(e,t){this.b=fl,this.f=s.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=e,this.h=t,this.l=s.Int32Array?new Int32Array(64):Array(64),void 0===sl&&(sl=s.Int32Array?new Int32Array(yl):yl),this.reset()}x(cl,(function(){this.b=-1}));for(var fl=64,hl=fl-1,pl=[],dl=0;dl<hl;dl++)pl[dl]=0;var gl=J(128,pl);function ml(e){for(var t=e.f,n=e.l,r=0,i=0;i<t.length;)n[r++]=t[i]<<24|t[i+1]<<16|t[i+2]<<8|t[i+3],i=4*r;for(t=16;64>t;t++){i=0|n[t-15],r=0|n[t-2];var o=(0|n[t-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[t-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[t]=o+a|0}r=0|e.a[0],i=0|e.a[1];var s=0|e.a[2],u=0|e.a[3],l=0|e.a[4],c=0|e.a[5],f=0|e.a[6];for(o=0|e.a[7],t=0;64>t;t++){var h=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((l>>>6|l<<26)^(l>>>11|l<<21)^(l>>>25|l<<7))|0)+((a=(a=l&c^~l&f)+(0|sl[t])|0)+(0|n[t])|0)|0,o=f,f=c,c=l,l=u+a|0,u=s,s=i,i=r,r=a+h|0}e.a[0]=e.a[0]+r|0,e.a[1]=e.a[1]+i|0,e.a[2]=e.a[2]+s|0,e.a[3]=e.a[3]+u|0,e.a[4]=e.a[4]+l|0,e.a[5]=e.a[5]+c|0,e.a[6]=e.a[6]+f|0,e.a[7]=e.a[7]+o|0}function vl(e,t,n){void 0===n&&(n=t.length);var r=0,i=e.c;if("string"==typeof t)for(;r<n;)e.f[i++]=t.charCodeAt(r++),i==e.b&&(ml(e),i=0);else{if(!p(t))throw Error("message must be string or array");for(;r<n;){var o=t[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");e.f[i++]=o,i==e.b&&(ml(e),i=0)}}e.c=i,e.g+=n}cl.prototype.reset=function(){this.g=this.c=0,this.a=s.Int32Array?new Int32Array(this.h):Q(this.h)};var yl=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function bl(){cl.call(this,8,wl)}x(bl,cl);var wl=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function kl(e,t,n,r,i,o){this.v=e,this.i=t,this.l=n,this.m=r||null,this.u=i||null,this.s=o,this.h=t+":"+n,this.C=new ll,this.g=new al(this.h),this.f=null,this.b=[],this.a=this.c=null}function Sl(e){return new C("invalid-cordova-configuration",e)}function El(e,t){for(var n=0;n<e.b.length;n++)try{e.b[n](t)}catch(e){}}function xl(e){return e.f||(e.f=e.ma().then((function(){return new kt((function(t){e.Ea((function n(r){return t(r),e.Sa(n),!1})),function(e){function t(t){r=!0,i&&i.cancel(),Il(e).then((function(r){var i=n;if(r&&t&&t.url){var o=null;-1!=(i=ao(t.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=zr(zn(o=Vn(i),"firebaseError")||null))?T(o):null)?new Ho(r.c,r.b,null,null,o,null,r.T()):new Ho(r.c,r.b,i,r.f,null,null,r.T())),i=o||n}El(e,i)}))}var n=new Ho("unknown",null,null,null,new C("no-auth-event")),r=!1,i=_n(500).then((function(){return Il(e).then((function(){r||El(e,n)}))})),o=s.handleOpenURL;s.handleOpenURL=function(e){if(0==e.toLowerCase().indexOf(Ar("BuildInfo.packageName",s).toLowerCase()+"://")&&t({url:e}),"function"==typeof o)try{o(e)}catch(e){console.error(e)}},qo||(qo=new Wo),function(e){var t=qo;t.a.push(e),t.b||(t.b=function(e){for(var n=0;n<t.a.length;n++)t.a[n](e)},"function"==typeof(e=Ar("universalLinks.subscribe",s))&&e(null,t.b))}(t)}(e)}))}))),e.f}function Il(e){var t=null;return function(e){return e.b.get(ul,e.a).then((function(e){return Bo(e)}))}(e.g).then((function(n){return t=n,il((n=e.g).b,ul,n.a)})).then((function(){return t}))}function Cl(e){this.a=e,this.b=tl()}(e=kl.prototype).ma=function(){return this.Ia?this.Ia:this.Ia=(kr(void 0)?wr().then((function(){return new kt((function(e,t){var n=s.document,r=setTimeout((function(){t(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),e()}),!1)}))})):Ot(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Ar("universalLinks.subscribe",s))throw Sl("cordova-universal-links-plugin-fix is not installed");if(void 0===Ar("BuildInfo.packageName",s))throw Sl("cordova-plugin-buildinfo is not installed");if("function"!=typeof Ar("cordova.plugins.browsertab.openUrl",s))throw Sl("cordova-plugin-browsertab is not installed");if("function"!=typeof Ar("cordova.InAppBrowser.open",s))throw Sl("cordova-plugin-inappbrowser is not installed")}),(function(){throw new C("cordova-not-ready")}))},e.Ob=function(e,t){return t(new C("operation-not-supported-in-this-environment")),_t()},e.Mb=function(){return Ot(new C("operation-not-supported-in-this-environment"))},e.$b=function(){return!1},e.Xb=function(){return!0},e.Tb=function(){return!0},e.Nb=function(e,t,n,r){if(this.c)return Ot(new C("redirect-operation-pending"));var i=this,o=s.document,a=null,u=null,l=null,c=null;return this.c=_t().then((function(){return Vo(t),xl(i)})).then((function(){return function(e,t,n,r,i){var o=function(){for(var e=20,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}(),a=new Ho(t,r,null,o,new C("no-auth-event"),null,i),u=Ar("BuildInfo.packageName",s);if("string"!=typeof u)throw new C("invalid-cordova-configuration");var l=Ar("BuildInfo.displayName",s),c={};if(Pr().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=u;else{if(!Pr().toLowerCase().match(/android/))return Ot(new C("operation-not-supported-in-this-environment"));c.apn=u}l&&(c.appDisplayName=l),o=function(e){var t=new bl;vl(t,e),e=[];var n=8*t.g;56>t.c?vl(t,gl,56-t.c):vl(t,gl,t.b-(t.c-56));for(var r=63;56<=r;r--)t.f[r]=255&n,n/=256;for(ml(t),r=n=0;r<t.i;r++)for(var i=24;0<=i;i-=8)e[n++]=t.a[r]>>i&255;return function(e){return q(e,(function(e){return 1<(e=e.toString(16)).length?e:"0"+e})).join("")}(e)}(o),c.sessionId=o;var f=yu(e.v,e.i,e.l,t,n,null,r,e.m,c,e.u,i,e.s);return e.ma().then((function(){var t=e.h;return e.C.a.set(ul,a.w(),t)})).then((function(){var t=Ar("cordova.plugins.browsertab.isAvailable",s);if("function"!=typeof t)throw new C("invalid-cordova-configuration");var n=null;t((function(t){if(t){if("function"!=typeof(n=Ar("cordova.plugins.browsertab.openUrl",s)))throw new C("invalid-cordova-configuration");n(f)}else{if("function"!=typeof(n=Ar("cordova.InAppBrowser.open",s)))throw new C("invalid-cordova-configuration");t=Pr(),e.a=n(f,t.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||t.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,e,t,n,r)})).then((function(){return new kt((function(e,t){u=function(){var t=Ar("cordova.plugins.browsertab.close",s);return e(),"function"==typeof t&&t(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Ea(u),l=function(){a||(a=_n(2e3).then((function(){t(new C("redirect-cancelled-by-user"))})))},c=function(){$r()&&l()},o.addEventListener("resume",l,!1),Pr().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",c,!1)})).o((function(e){return Il(i).then((function(){throw e}))}))})).oa((function(){l&&o.removeEventListener("resume",l,!1),c&&o.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),u&&i.Sa(u),i.c=null}))},e.Ea=function(e){this.b.push(e),xl(this).o((function(t){"auth/invalid-cordova-configuration"===t.code&&(t=new Ho("unknown",null,null,null,new C("no-auth-event")),e(t))}))},e.Sa=function(e){Y(this.b,(function(t){return t==e}))};var Tl={name:"pendingRedirect",F:"session"};function _l(e){return il(e.b,Tl,e.a)}function Ol(e,t,n,r){this.i={},this.u=0,this.D=e,this.v=t,this.m=n,this.J=r,this.h=[],this.f=!1,this.l=k(this.s,this),this.b=new Wl,this.C=new Xl,this.g=new Cl(Hl(this.v,this.m)),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.C,this.c.linkViaPopup=this.C,this.c.reauthViaPopup=this.C,this.a=Nl(this.D,this.v,this.m,_,this.J)}function Nl(e,t,n,r,i){var o=mn.SDK_VERSION||null;return kr()?new kl(e,t,n,o,r,i):new du(e,t,n,o,r,i)}function Pl(e){e.f||(e.f=!0,e.a.Ea(e.l));var t=e.a;return e.a.ma().o((function(n){throw e.a==t&&e.reset(),n}))}function Al(e){e.a.Xb()&&Pl(e).o((function(t){var n=new Ho("unknown",null,null,null,new C("operation-not-supported-in-this-environment"));Fl(t)&&e.s(n)})),e.a.Tb()||$l(e.b)}function Ll(e,t){G(e.h,t)||e.h.push(t),e.f||function(e){return e.b.get(Tl,e.a).then((function(e){return"pending"==e}))}(e.g).then((function(t){t?_l(e.g).then((function(){Pl(e).o((function(t){var n=new Ho("unknown",null,null,null,new C("operation-not-supported-in-this-environment"));Fl(t)&&e.s(n)}))})):Al(e)})).o((function(){Al(e)}))}function Rl(e,t){Y(e.h,(function(e){return e==t}))}Ol.prototype.reset=function(){this.f=!1,this.a.Sa(this.l),this.a=Nl(this.D,this.v,this.m,null,this.J),this.i={}},Ol.prototype.s=function(e){if(!e)throw new C("invalid-auth-event");if(6e5<=E()-this.u&&(this.i={},this.u=0),e&&e.getUid()&&this.i.hasOwnProperty(e.getUid()))return!1;for(var t=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.Fb(e.c,e.b)){(t=this.c[e.c])&&(t.h(e,r),e&&(e.f||e.b)&&(this.i[e.getUid()]=!0,this.u=E())),t=!0;break}}return $l(this.b),t};var Dl=new Wr(2e3,1e4),jl=new Wr(3e4,6e4);function Ml(e,t,n,r,i,o,a){return e.a.Mb(t,n,r,(function(){e.f||(e.f=!0,e.a.Ea(e.l))}),(function(){e.reset()}),i,o,a)}function Fl(e){return!(!e||"auth/cordova-not-ready"!=e.code)}function Ul(e,t,n,r,i){var o;return function(e){return e.b.set(Tl,"pending",e.a)}(e.g).then((function(){return e.a.Nb(t,n,r,i).o((function(t){if(Fl(t))throw new C("operation-not-supported-in-this-environment");return o=t,_l(e.g).then((function(){throw o}))})).then((function(){return e.a.$b()?new kt((function(){})):_l(e.g).then((function(){return e.qa()})).then((function(){})).o((function(){}))}))}))}function zl(e,t,n,r,i){return e.a.Ob(r,(function(e){t.na(n,null,e,i)}),Dl.get())}Ol.prototype.qa=function(){return this.b.qa()};var Vl={};function Hl(e,t,n){return e=e+":"+t,n&&(e=e+":"+n.url),e}function Bl(e,t,n,r){var i=Hl(t,n,r);return Vl[i]||(Vl[i]=new Ol(e,t,n,r)),Vl[i]}function Wl(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function $l(e){e.g||(e.g=!0,Gl(e,!1,null,null))}function ql(e){e.g&&!e.i&&Gl(e,!1,null,null)}function Kl(e,t){if(e.b=function(){return _t(t)},e.f.length)for(var n=0;n<e.f.length;n++)e.f[n](t)}function Gl(e,t,n,r){t?r?function(e,t){if(e.b=function(){return Ot(t)},e.c.length)for(var n=0;n<e.c.length;n++)e.c[n](t)}(e,r):Kl(e,n):Kl(e,{user:null}),e.f=[],e.c=[]}function Xl(){}function Yl(){this.ib=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.ib},set:function(e){this.ib=e},enumerable:!1})}function Jl(e,t){this.a=t,Qr(this,"verificationId",e)}function Ql(e,t,n,r){return new Fo(e).fb(t,n).then((function(e){return new Jl(e,r)}))}function Zl(e){var t=qi(e);if(!(t&&t.exp&&t.auth_time&&t.iat))throw new C("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");Zr(this,{token:e,expirationTime:qr(1e3*t.exp),authTime:qr(1e3*t.auth_time),issuedAtTime:qr(1e3*t.iat),signInProvider:t.firebase&&t.firebase.sign_in_provider?t.firebase.sign_in_provider:null,signInSecondFactor:t.firebase&&t.firebase.sign_in_second_factor?t.firebase.sign_in_second_factor:null,claims:t})}function ec(e,t,n){var r=t&&t[nc];if(!r)throw new C("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=e,this.f=ge(t),this.g=n,this.c=new so(null,r),this.b=[];var i=this;W(t[tc]||[],(function(e){(e=ri(e))&&i.b.push(e)})),Qr(this,"auth",this.a),Qr(this,"session",this.c),Qr(this,"hints",this.b)}Wl.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Wl.prototype.h=function(e,t){if(e){this.reset(),this.g=!0;var n=e.c,r=e.b,i=e.a&&"auth/web-storage-unsupported"==e.a.code,o=e.a&&"auth/operation-not-supported-in-this-environment"==e.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?e.a?(Gl(this,!0,null,e.a),_t()):t.Fa(n,r)?function(e,t,n){n=n.Fa(t.c,t.b);var r=t.g,i=t.f,o=t.i,a=t.T(),s=!!t.c.match(/Redirect$/);n(r,i,a,o).then((function(t){Gl(e,s,t,null)})).o((function(t){Gl(e,s,null,t)}))}(this,e,t):Ot(new C("invalid-auth-event")):(Gl(this,!1,null,null),_t())}else Ot(new C("invalid-auth-event"))},Wl.prototype.qa=function(){var e=this;return new kt((function(t,n){e.b?e.b().then(t,n):(e.f.push(t),e.c.push(n),function(e){var t=new C("timeout");e.a&&e.a.cancel(),e.a=_n(jl.get()).then((function(){e.b||(e.g=!0,Gl(e,!0,null,t))}))}(e))}))},Xl.prototype.h=function(e,t){if(e){var n=e.c,r=e.b;e.a?(t.na(e.c,null,e.a,e.b),_t()):t.Fa(n,r)?function(e,t){var n=e.b,r=e.c;t.Fa(r,n)(e.g,e.f,e.T(),e.i).then((function(e){t.na(r,e,null,n)})).o((function(e){t.na(r,null,e,n)}))}(e,t):Ot(new C("invalid-auth-event"))}else Ot(new C("invalid-auth-event"))},Jl.prototype.confirm=function(e){return e=Uo(this.verificationId,e),this.a(e)};var tc="mfaInfo",nc="mfaPendingCredential";function rc(e,t,n,r){C.call(this,"multi-factor-auth-required",r,t),this.b=new ec(e,t,n),Qr(this,"resolver",this.b)}function ic(e,t,n){if(e&&g(e.serverResponse)&&"auth/multi-factor-auth-required"===e.code)try{return new rc(t,e.serverResponse,n,e.message)}catch(e){}return null}function oc(){}function ac(e){Qr(this,"factorId",e.fa),this.a=e}function sc(e){if(ac.call(this,e),this.a.fa!=Fo.PROVIDER_ID)throw new C("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function uc(e,t){for(var n in Jt.call(this,e),t)this[n]=t[n]}function lc(e,t){this.a=e,this.b=[],this.c=k(this.yc,this),cn(this.a,"userReloaded",this.c);var n=[];t&&t.multiFactor&&t.multiFactor.enrolledFactors&&W(t.multiFactor.enrolledFactors,(function(e){var t=null,r={};if(e){e.uid&&(r[ai]=e.uid),e.displayName&&(r[ii]=e.displayName),e.enrollmentTime&&(r[oi]=new Date(e.enrollmentTime).toISOString()),e.phoneNumber&&(r[si]=e.phoneNumber);try{t=new ui(r)}catch(e){}e=t}else e=null;e&&n.push(e)})),cc(this,n)}function cc(e,t){e.b=t,Qr(e,"enrolledFactors",t)}function fc(e,t,n){if(this.h=e,this.i=t,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function hc(e,t){e.stop(),e.b=_n(function(e,t){return t?(e.a=e.c,e.g()):(t=e.a,e.a*=2,e.a>e.f&&(e.a=e.f),t)}(e,t)).then((function(){return function(){var e=s.document,t=null;return $r()||!e?_t():new kt((function(n){t=function(){$r()&&(e.removeEventListener("visibilitychange",t,!1),n())},e.addEventListener("visibilitychange",t,!1)})).o((function(n){throw e.removeEventListener("visibilitychange",t,!1),n}))}()})).then((function(){return e.h()})).then((function(){hc(e,!0)})).o((function(t){e.i(t)&&hc(e,!1)}))}function pc(e){this.f=e,this.b=this.a=null,this.c=Date.now()}function dc(e,t){void 0===t&&(t=e.b?(t=e.b).a-t.g:0),e.c=Date.now()+1e3*t}function gc(e,t){e.b=$i(t[Za]||""),e.a=t.refreshToken,dc(e,void 0!==(t=t.expiresIn)?Number(t):void 0)}function mc(e,t){this.a=e||null,this.b=t||null,Zr(this,{lastSignInTime:qr(t||null),creationTime:qr(e||null)})}function vc(e,t,n,r,i,o){Zr(this,{uid:e,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:t})}function yc(e,t,n){this.J=[],this.l=e.apiKey,this.m=e.appName,this.s=e.authDomain||null;var r=mn.SDK_VERSION?Nr(mn.SDK_VERSION):null;this.a=new Ja(this.l,A(_),r),e.emulatorConfig&&os(this.a,e.emulatorConfig),this.b=new pc(this.a),Cc(this,t[Za]),gc(this.b,t),Qr(this,"refreshToken",this.b.a),Oc(this,n||{}),En.call(this),this.R=!1,this.s&&Rr()&&(this.i=Bl(this.s,this.l,this.m)),this.S=[],this.h=null,this.u=function(e){return new fc((function(){return e.I(!0)}),(function(e){return!(!e||"auth/network-request-failed"!=e.code)}),(function(){var t=e.b.c-Date.now()-3e5;return 0<t?t:0}))}(this),this.aa=k(this.hb,this);var i=this;this.ya=null,this.Oa=function(e){i.wa(e.h)},this.ja=null,this.Aa=function(e){os(i.a,e.c)},this.X=null,this.$=[],this.Ba=function(e){kc(i,e.f)},this.ba=null,this.O=new lc(this,n),Qr(this,"multiFactor",this.O)}function bc(e,t){e.ja&&pn(e.ja,"languageCodeChanged",e.Oa),(e.ja=t)&&cn(t,"languageCodeChanged",e.Oa)}function wc(e,t){e.X&&pn(e.X,"emulatorConfigChanged",e.Aa),(e.X=t)&&cn(t,"emulatorConfigChanged",e.Aa)}function kc(e,t){e.$=t,ss(e.a,mn.SDK_VERSION?Nr(mn.SDK_VERSION,e.$):null)}function Sc(e,t){e.ba&&pn(e.ba,"frameworkChanged",e.Ba),(e.ba=t)&&cn(t,"frameworkChanged",e.Ba)}function Ec(e){try{return mn.app(e.m).auth()}catch(t){throw new C("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+e.m+"'!")}}function xc(e){e.D||e.u.b||(e.u.start(),pn(e,"tokenChanged",e.aa),cn(e,"tokenChanged",e.aa))}function Ic(e){pn(e,"tokenChanged",e.aa),e.u.stop()}function Cc(e,t){e.za=t,Qr(e,"_lat",t)}function Tc(e){for(var t=[],n=0;n<e.S.length;n++)t.push(e.S[n](e));return Pt(t).then((function(){return e}))}function _c(e){e.i&&!e.R&&(e.R=!0,Ll(e.i,e))}function Oc(e,t){Zr(e,{uid:t.uid,displayName:t.displayName||null,photoURL:t.photoURL||null,email:t.email||null,emailVerified:t.emailVerified||!1,phoneNumber:t.phoneNumber||null,isAnonymous:t.isAnonymous||!1,tenantId:t.tenantId||null,metadata:new mc(t.createdAt,t.lastLoginAt),providerData:[]}),e.a.b=e.tenantId}function Nc(){}function Pc(e){return _t().then((function(){if(e.D)throw new C("app-deleted")}))}function Ac(e){return q(e.providerData,(function(e){return e.providerId}))}function Lc(e,t){t&&(Rc(e,t.providerId),e.providerData.push(t))}function Rc(e,t){Y(e.providerData,(function(e){return e.providerId==t}))}function Dc(e,t,n){("uid"!=t||n)&&e.hasOwnProperty(t)&&Qr(e,t,n)}function jc(e,t){e!=t&&(Zr(e,{uid:t.uid,displayName:t.displayName,photoURL:t.photoURL,email:t.email,emailVerified:t.emailVerified,phoneNumber:t.phoneNumber,isAnonymous:t.isAnonymous,tenantId:t.tenantId,providerData:[]}),t.metadata?Qr(e,"metadata",function(e){return new mc(e.a,e.b)}(t.metadata)):Qr(e,"metadata",new mc),W(t.providerData,(function(t){Lc(e,t)})),function(e,t){e.b=t.b,e.a=t.a,e.c=t.c}(e.b,t.b),Qr(e,"refreshToken",e.b.a),cc(e.O,t.O.b))}function Mc(e){return e.I().then((function(t){var n=e.isAnonymous;return function(e,t){return ru(e.a,Rs,{idToken:t}).then(k(e.Kc,e))}(e,t).then((function(){return n||Dc(e,"isAnonymous",!1),t}))}))}function Fc(e,t){t[Za]&&e.za!=t[Za]&&(gc(e.b,t),e.dispatchEvent(new uc("tokenChanged")),Cc(e,t[Za]),Dc(e,"refreshToken",e.b.a))}function Uc(e,t){return Mc(e).then((function(){if(G(Ac(e),t))return Tc(e).then((function(){throw new C("provider-already-linked")}))}))}function zc(e,t,n){return ei({user:e,credential:zo(t),additionalUserInfo:t=Ji(t),operationType:n})}function Vc(e,t){return Fc(e,t),e.reload().then((function(){return e}))}function Hc(e,t,n,r,i){if(!Rr())return Ot(new C("operation-not-supported-in-this-environment"));if(e.h&&!i)return Ot(e.h);var o=Yi(n.providerId),a=Vr(e.uid+":::"),s=null;(!Mr()||Sr())&&e.s&&n.isOAuthProvider&&(s=yu(e.s,e.l,e.m,t,n,null,a,mn.SDK_VERSION||null,null,null,e.tenantId));var u=vr(s,o&&o.ua,o&&o.ta);return r=r().then((function(){if(Wc(e),!i)return e.I().then((function(){}))})).then((function(){return Ml(e.i,u,t,n,a,!!s,e.tenantId)})).then((function(){return new kt((function(n,r){e.na(t,null,new C("cancelled-popup-request"),e.g||null),e.f=n,e.C=r,e.g=a,e.c=zl(e.i,e,t,u,a)}))})).then((function(e){return u&&mr(u),e?ei(e):null})).o((function(e){throw u&&mr(u),e})),$c(e,r,i)}function Bc(e,t,n,r,i){if(!Rr())return Ot(new C("operation-not-supported-in-this-environment"));if(e.h&&!i)return Ot(e.h);var o=null,a=Vr(e.uid+":::");return r=r().then((function(){if(Wc(e),!i)return e.I().then((function(){}))})).then((function(){return e.ga=a,Tc(e)})).then((function(t){return e.ha&&(t=(t=e.ha).b.set(Gc,e.w(),t.a)),t})).then((function(){return Ul(e.i,t,n,a,e.tenantId)})).o((function(t){if(o=t,e.ha)return Xc(e.ha);throw o})).then((function(){if(o)throw o})),$c(e,r,i)}function Wc(e){if(!e.i||!e.R){if(e.i&&!e.R)throw new C("internal-error");throw new C("auth-domain-config-required")}}function $c(e,t,n){var r=function(e,t,n){return e.h&&!n?(t.cancel(),Ot(e.h)):t.o((function(t){throw!t||"auth/user-disabled"!=t.code&&"auth/user-token-expired"!=t.code||(e.h||e.dispatchEvent(new uc("userInvalidated")),e.h=t),t}))}(e,t,n);return e.J.push(r),r.oa((function(){X(e.J,r)})),r.o((function(t){var n=null;throw t&&"auth/multi-factor-auth-required"===t.code&&(n=ic(t.w(),Ec(e),k(e.jc,e))),n||t}))}function qc(e){if(!e.apiKey)return null;var t={apiKey:e.apiKey,authDomain:e.authDomain,appName:e.appName,emulatorConfig:e.emulatorConfig},n={};if(!e.stsTokenManager||!e.stsTokenManager.accessToken)return null;n[Za]=e.stsTokenManager.accessToken,n.refreshToken=e.stsTokenManager.refreshToken||null;var r=e.stsTokenManager.expirationTime;r&&(n.expiresIn=(r-Date.now())/1e3);var i=new yc(t,n,e);return e.providerData&&W(e.providerData,(function(e){e&&Lc(i,ei(e))})),e.redirectEventId&&(i.ga=e.redirectEventId),i}function Kc(e){this.a=e,this.b=tl()}ec.prototype.Rc=function(e){var t=this;return e.sb(this.a.a,this.c).then((function(e){var n=ge(t.f);return delete n[tc],delete n[nc],ve(n,e),t.g(n)}))},x(rc,C),oc.prototype.sb=function(e,t,n){return t.type==uo?function(e,t,n,r){return n.Ha().then((function(n){return n={idToken:n},void 0!==r&&(n.displayName=r),ve(n,{phoneVerificationInfo:Mo(e.a)}),ru(t,As,n)}))}(this,e,t,n):function(e,t,n){return n.Ha().then((function(n){return ve(n={mfaPendingCredential:n},{phoneVerificationInfo:Mo(e.a)}),ru(t,Ls,n)}))}(this,e,t)},x(ac,oc),x(sc,ac),x(uc,Jt),(e=lc.prototype).yc=function(e){cc(this,function(e){var t=[];return W(e.mfaInfo||[],(function(e){(e=ri(e))&&t.push(e)})),t}(e.hd))},e.Rb=function(){return this.a.I().then((function(e){return new so(e,null)}))},e.fc=function(e,t){var n=this,r=this.a.a;return this.Rb().then((function(n){return e.sb(r,n,t)})).then((function(e){return Fc(n.a,e),n.a.reload()}))},e.bd=function(e){var t=this,n="string"==typeof e?e:e.uid,r=this.a.a;return this.a.I().then((function(e){return ru(r,nu,{idToken:e,mfaEnrollmentId:n})})).then((function(e){var r=$(t.b,(function(e){return e.uid!=n}));return cc(t,r),Fc(t.a,e),t.a.reload().o((function(e){if("auth/user-token-expired"!=e.code)throw e}))}))},e.w=function(){return{multiFactor:{enrolledFactors:q(this.b,(function(e){return e.w()}))}}},fc.prototype.start=function(){this.a=this.c,hc(this,!0)},fc.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},pc.prototype.w=function(){return{apiKey:this.f.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:this.c}},pc.prototype.getToken=function(e){return e=!!e,this.b&&!this.a?Ot(new C("user-token-expired")):e||!this.b||Date.now()>this.c-3e4?this.a?function(e,t){return function(e,t){return new kt((function(n,r){"refresh_token"==t.grant_type&&t.refresh_token||"authorization_code"==t.grant_type&&t.code?us(e,e.l+"?key="+encodeURIComponent(e.c),(function(e){e?e.error?r(ou(e)):e.access_token&&e.refresh_token?n(e):r(new C("internal-error")):r(new C("network-request-failed"))}),"POST",Zn(t).toString(),e.g,e.m.get()):r(new C("internal-error"))}))}(e.f,t).then((function(t){return e.b=$i(t.access_token),e.a=t.refresh_token,dc(e,t.expires_in),{accessToken:e.b.toString(),refreshToken:e.a}})).o((function(t){throw"auth/user-token-expired"==t.code&&(e.a=null),t}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):_t(null):_t({accessToken:this.b.toString(),refreshToken:this.a})},mc.prototype.w=function(){return{lastLoginAt:this.b,createdAt:this.a}},x(yc,En),yc.prototype.wa=function(e){this.ya=e,is(this.a,e)},yc.prototype.la=function(){return this.ya},yc.prototype.Ga=function(){return Q(this.$)},yc.prototype.hb=function(){this.u.b&&(this.u.stop(),this.u.start())},Qr(yc.prototype,"providerId","firebase"),(e=yc.prototype).reload=function(){var e=this;return $c(this,Pc(this).then((function(){return Mc(e).then((function(){return Tc(e)})).then(Nc)})))},e.oc=function(e){return this.I(e).then((function(e){return new Zl(e)}))},e.I=function(e){var t=this;return $c(this,Pc(this).then((function(){return t.b.getToken(e)})).then((function(e){if(!e)throw new C("internal-error");return e.accessToken!=t.za&&(Cc(t,e.accessToken),t.dispatchEvent(new uc("tokenChanged"))),Dc(t,"refreshToken",e.refreshToken),e.accessToken})))},e.Kc=function(e){if(!(e=e.users)||!e.length)throw new C("internal-error");Oc(this,{uid:(e=e[0]).localId,displayName:e.displayName,photoURL:e.photoUrl,email:e.email,emailVerified:!!e.emailVerified,phoneNumber:e.phoneNumber,lastLoginAt:e.lastLoginAt,createdAt:e.createdAt,tenantId:e.tenantId});for(var t=function(e){return(e=e.providerUserInfo)&&e.length?q(e,(function(e){return new vc(e.rawId,e.providerId,e.email,e.displayName,e.photoUrl,e.phoneNumber)})):[]}(e),n=0;n<t.length;n++)Lc(this,t[n]);Dc(this,"isAnonymous",!(this.email&&e.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new uc("userReloaded",{hd:e}))},e.Lc=function(e){return Yr("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.tb(e)},e.tb=function(e){var t=this,n=null;return $c(this,e.c(this.a,this.uid).then((function(e){return Fc(t,e),n=zc(t,e,"reauthenticate"),t.h=null,t.reload()})).then((function(){return n})),!0)},e.Cc=function(e){return Yr("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.qb(e)},e.qb=function(e){var t=this,n=null;return $c(this,Uc(this,e.providerId).then((function(){return t.I()})).then((function(n){return e.b(t.a,n)})).then((function(e){return n=zc(t,e,"link"),Vc(t,e)})).then((function(){return n})))},e.Dc=function(e,t){var n=this;return $c(this,Uc(this,"phone").then((function(){return Ql(Ec(n),e,t,k(n.qb,n))})))},e.Mc=function(e,t){var n=this;return $c(this,_t().then((function(){return Ql(Ec(n),e,t,k(n.tb,n))})),!0)},e.Bb=function(e){var t=this;return $c(this,this.I().then((function(n){return t.a.Bb(n,e)})).then((function(e){return Fc(t,e),t.reload()})))},e.ed=function(e){var t=this;return $c(this,this.I().then((function(n){return e.b(t.a,n)})).then((function(e){return Fc(t,e),t.reload()})))},e.Cb=function(e){var t=this;return $c(this,this.I().then((function(n){return t.a.Cb(n,e)})).then((function(e){return Fc(t,e),t.reload()})))},e.Db=function(e){if(void 0===e.displayName&&void 0===e.photoURL)return Pc(this);var t=this;return $c(this,this.I().then((function(n){return t.a.Db(n,{displayName:e.displayName,photoUrl:e.photoURL})})).then((function(e){return Fc(t,e),Dc(t,"displayName",e.displayName||null),Dc(t,"photoURL",e.photoUrl||null),W(t.providerData,(function(e){"password"===e.providerId&&(Qr(e,"displayName",t.displayName),Qr(e,"photoURL",t.photoURL))})),Tc(t)})).then(Nc))},e.cd=function(e){var t=this;return $c(this,Mc(this).then((function(n){return G(Ac(t),e)?function(e,t,n){return ru(e,Os,{idToken:t,deleteProvider:n})}(t.a,n,[e]).then((function(e){var n={};return W(e.providerUserInfo||[],(function(e){n[e.providerId]=!0})),W(Ac(t),(function(e){n[e]||Rc(t,e)})),n[Fo.PROVIDER_ID]||Qr(t,"phoneNumber",null),Tc(t)})):Tc(t).then((function(){throw new C("no-such-provider")}))})))},e.delete=function(){var e=this;return $c(this,this.I().then((function(t){return ru(e.a,_s,{idToken:t})})).then((function(){e.dispatchEvent(new uc("userDeleted"))}))).then((function(){for(var t=0;t<e.J.length;t++)e.J[t].cancel("app-deleted");bc(e,null),wc(e,null),Sc(e,null),e.J=[],e.D=!0,Ic(e),Qr(e,"refreshToken",null),e.i&&Rl(e.i,e)}))},e.Fb=function(e,t){return!!("linkViaPopup"==e&&(this.g||null)==t&&this.f||"reauthViaPopup"==e&&(this.g||null)==t&&this.f||"linkViaRedirect"==e&&(this.ga||null)==t||"reauthViaRedirect"==e&&(this.ga||null)==t)},e.na=function(e,t,n,r){"linkViaPopup"!=e&&"reauthViaPopup"!=e||r!=(this.g||null)||(n&&this.C?this.C(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C)},e.Fa=function(e,t){return"linkViaPopup"==e&&t==(this.g||null)?k(this.Kb,this):"reauthViaPopup"==e&&t==(this.g||null)?k(this.Lb,this):"linkViaRedirect"==e&&(this.ga||null)==t?k(this.Kb,this):"reauthViaRedirect"==e&&(this.ga||null)==t?k(this.Lb,this):null},e.Ec=function(e){var t=this;return Hc(this,"linkViaPopup",e,(function(){return Uc(t,e.providerId).then((function(){return Tc(t)}))}),!1)},e.Nc=function(e){return Hc(this,"reauthViaPopup",e,(function(){return _t()}),!0)},e.Fc=function(e){var t=this;return Bc(this,"linkViaRedirect",e,(function(){return Uc(t,e.providerId)}),!1)},e.Oc=function(e){return Bc(this,"reauthViaRedirect",e,(function(){return _t()}),!0)},e.Kb=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return $c(this,this.I().then((function(n){return ks(i.a,{requestUri:e,postBody:r,sessionId:t,idToken:n})})).then((function(e){return o=zc(i,e,"link"),Vc(i,e)})).then((function(){return o})))},e.Lb=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return $c(this,_t().then((function(){return fo(Ss(i.a,{requestUri:e,sessionId:t,postBody:r,tenantId:n}),i.uid)})).then((function(e){return o=zc(i,e,"reauthenticate"),Fc(i,e),i.h=null,i.reload()})).then((function(){return o})),!0)},e.ub=function(e){var t=this,n=null;return $c(this,this.I().then((function(t){return n=t,void 0===e||de(e)?{}:Hi(new Ai(e))})).then((function(e){return t.a.ub(n,e)})).then((function(e){if(t.email!=e)return t.reload()})).then((function(){})))},e.Eb=function(e,t){var n=this,r=null;return $c(this,this.I().then((function(e){return r=e,void 0===t||de(t)?{}:Hi(new Ai(t))})).then((function(t){return n.a.Eb(r,e,t)})).then((function(e){if(n.email!=e)return n.reload()})).then((function(){})))},e.jc=function(e){var t=null,n=this;return $c(this,e=fo(_t(e),n.uid).then((function(e){return t=zc(n,e,"reauthenticate"),Fc(n,e),n.h=null,n.reload()})).then((function(){return t})),!0)},e.toJSON=function(){return this.w()},e.w=function(){var e={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.s,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};return this.metadata&&ve(e,this.metadata.w()),W(this.providerData,(function(t){e.providerData.push(function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}(t))})),ve(e,this.O.w()),e};var Gc={name:"redirectUser",F:"session"};function Xc(e){return il(e.b,Gc,e.a)}function Yc(e){this.a=e,this.b=tl(),this.c=null,this.f=function(e){var t=Zc("local"),n=Zc("session"),r=Zc("none");return function(e,t,n){var r=rl(t,n),i=nl(e,t.F);return e.get(t,n).then((function(o){var a=null;try{a=zr(s.localStorage.getItem(r))}catch(e){}if(a&&!o)return s.localStorage.removeItem(r),e.set(t,a,n);a&&o&&"localStorage"!=i.type&&s.localStorage.removeItem(r)}))}(e.b,t,e.a).then((function(){return e.b.get(n,e.a)})).then((function(i){return i?n:e.b.get(r,e.a).then((function(n){return n?r:e.b.get(t,e.a).then((function(n){return n?t:e.b.get(Qc,e.a).then((function(e){return e?Zc(e):t}))}))}))})).then((function(t){return e.c=t,Jc(e,t.F)})).o((function(){e.c||(e.c=t)}))}(this),this.b.addListener(Zc("local"),this.a,k(this.g,this))}function Jc(e,t){var n,r=[];for(n in Zu)Zu[n]!==t&&r.push(il(e.b,Zc(Zu[n]),e.a));return r.push(il(e.b,Qc,e.a)),function(e){return new kt((function(t,n){var r=e.length,i=[];if(r)for(var o=function(e,n){r--,i[e]=n,0==r&&t(i)},a=function(e){n(e)},s=0;s<e.length;s++)Nt(e[s],S(o,s),a);else t(i)}))}(r)}Yc.prototype.g=function(){var e=this,t=Zc("local");rf(this,(function(){return _t().then((function(){return e.c&&"local"!=e.c.F?e.b.get(t,e.a):null})).then((function(n){if(n)return Jc(e,"local").then((function(){e.c=t}))}))}))};var Qc={name:"persistence",F:"session"};function Zc(e){return{name:"authUser",F:e}}function ef(e,t){return rf(e,(function(){return e.b.set(e.c,t.w(),e.a)}))}function tf(e){return rf(e,(function(){return il(e.b,e.c,e.a)}))}function nf(e,t,n){return rf(e,(function(){return e.b.get(e.c,e.a).then((function(e){return e&&t&&(e.authDomain=t),e&&n&&(e.emulatorConfig=n),qc(e||{})}))}))}function rf(e,t){return e.f=e.f.then(t,t),e.f}function of(e){if(this.l=!1,Qr(this,"settings",new Yl),Qr(this,"app",e),!pf(this).options||!pf(this).options.apiKey)throw new C("invalid-api-key");e=mn.SDK_VERSION?Nr(mn.SDK_VERSION):null,this.a=new Ja(pf(this).options&&pf(this).options.apiKey,A(_),e),this.R=[],this.s=[],this.O=[],this.hb=mn.INTERNAL.createSubscribe(k(this.zc,this)),this.X=void 0,this.bc=mn.INTERNAL.createSubscribe(k(this.Ac,this)),ff(this,null),this.i=new Yc(pf(this).options.apiKey+":"+pf(this).name),this.D=new Kc(pf(this).options.apiKey+":"+pf(this).name),this.$=vf(this,function(e){var t=pf(e).options.authDomain,n=function(e){var t=function(e,t){return e.b.get(Gc,e.a).then((function(e){return e&&t&&(e.authDomain=t),qc(e||{})}))}(e.D,pf(e).options.authDomain).then((function(t){return(e.m=t)&&(t.ha=e.D),Xc(e.D)}));return vf(e,t)}(e).then((function(){return nf(e.i,t,e.P)})).then((function(t){return t?(t.ha=e.D,e.m&&(e.m.ga||null)==(t.ga||null)?t:t.reload().then((function(){return ef(e.i,t).then((function(){return t}))})).o((function(n){return"auth/network-request-failed"==n.code?t:tf(e.i)}))):null})).then((function(t){ff(e,t||null)}));return vf(e,n)}(this)),this.h=vf(this,function(e){return e.$.then((function(){return cf(e)})).o((function(){})).then((function(){if(!e.l)return e.ja()})).o((function(){})).then((function(){if(!e.l){e.ba=!0;var t=e.i;t.b.addListener(Zc("local"),t.a,e.ja)}}))}(this)),this.ba=!1,this.ja=k(this.Zc,this),this.Ba=k(this.da,this),this.ya=k(this.mc,this),this.za=k(this.wc,this),this.Aa=k(this.xc,this),this.b=null,function(e){var t=pf(e).options.authDomain,n=pf(e).options.apiKey;t&&Rr()&&(e.Oa=e.$.then((function(){if(!e.l){if(e.b=Bl(t,n,pf(e).name,e.P),Ll(e.b,e),df(e)&&_c(df(e)),e.m){_c(e.m);var r=e.m;r.wa(e.la()),bc(r,e),kc(r=e.m,e.J),Sc(r,e),os((r=e.m).a,e.P),wc(r,e),e.m=null}return e.b}})))}(this),this.INTERNAL={},this.INTERNAL.delete=k(this.delete,this),this.INTERNAL.logFramework=k(this.Gc,this),this.u=0,En.call(this),function(e){Object.defineProperty(e,"lc",{get:function(){return this.la()},set:function(e){this.wa(e)},enumerable:!1}),e.aa=null,Object.defineProperty(e,"ti",{get:function(){return this.T()},set:function(e){this.yb(e)},enumerable:!1}),e.S=null,Object.defineProperty(e,"emulatorConfig",{get:function(){if(this.P){var e=Vn(this.P.url);e=ei({protocol:e.c,host:e.a,port:e.g,options:ei({disableWarnings:this.P.ec})})}else e=null;return e},enumerable:!1})}(this),this.J=[],this.P=null}function af(e){Jt.call(this,"languageCodeChanged"),this.h=e}function sf(e){Jt.call(this,"emulatorConfigChanged"),this.c=e}function uf(e){Jt.call(this,"frameworkChanged"),this.f=e}function lf(e){return e.Oa||Ot(new C("auth-domain-config-required"))}function cf(e){if(!Rr())return Ot(new C("operation-not-supported-in-this-environment"));var t=lf(e).then((function(){return e.b.qa()})).then((function(e){return e?ei(e):null}));return vf(e,t)}function ff(e,t){df(e)&&(function(e,t){Y(e.S,(function(e){return e==t}))}(df(e),e.Ba),pn(df(e),"tokenChanged",e.ya),pn(df(e),"userDeleted",e.za),pn(df(e),"userInvalidated",e.Aa),Ic(df(e))),t&&(t.S.push(e.Ba),cn(t,"tokenChanged",e.ya),cn(t,"userDeleted",e.za),cn(t,"userInvalidated",e.Aa),0<e.u&&xc(t)),Qr(e,"currentUser",t),t&&(t.wa(e.la()),bc(t,e),kc(t,e.J),Sc(t,e),os(t.a,e.P),wc(t,e))}function hf(e,t){var n=null,r=null;return vf(e,t.then((function(t){return n=zo(t),r=Ji(t),function(e,t){var n={};return n.apiKey=pf(e).options.apiKey,n.authDomain=pf(e).options.authDomain,n.appName=pf(e).name,e.P&&(n.emulatorConfig=e.P),e.$.then((function(){return function(e,t,n,r){var i=new yc(e,t);return n&&(i.ha=n),r&&kc(i,r),i.reload().then((function(){return i}))}(n,t,e.D,e.Ga())})).then((function(t){return df(e)&&t.uid==df(e).uid?(jc(df(e),t),e.da(t)):(ff(e,t),_c(t),e.da(t))})).then((function(){mf(e)}))}(e,t)}),(function(t){var n=null;throw t&&"auth/multi-factor-auth-required"===t.code&&(n=ic(t.w(),e,k(e.kc,e))),n||t})).then((function(){return ei({user:df(e),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function pf(e){return e.app}function df(e){return e.currentUser}function gf(e){return df(e)&&df(e)._lat||null}function mf(e){if(e.ba){for(var t=0;t<e.s.length;t++)e.s[t]&&e.s[t](gf(e));if(e.X!==e.getUid()&&e.O.length)for(e.X=e.getUid(),t=0;t<e.O.length;t++)e.O[t]&&e.O[t](gf(e))}}function vf(e,t){return e.R.push(t),t.oa((function(){X(e.R,t)})),t}function yf(){}function bf(){this.a={},this.b=1e12}Yc.prototype.xb=function(e){var t=null,n=this;return function(e){var t=new C("invalid-persistence-type"),n=new C("unsupported-persistence-type");e:{for(r in Zu)if(Zu[r]==e){var r=!0;break e}r=!1}if(!r||"string"!=typeof e)throw t;switch(xr()){case"ReactNative":if("session"===e)throw n;break;case"Node":if("none"!==e)throw n;break;case"Worker":if("session"===e||!Au()&&"none"!==e)throw n;break;default:if(!Lr()&&"none"!==e)throw n}}(e),rf(this,(function(){return e!=n.c.F?n.b.get(n.c,n.a).then((function(r){return t=r,Jc(n,e)})).then((function(){if(n.c=Zc(e),t)return n.b.set(n.c,t,n.a)})):_t()}))},x(of,En),x(af,Jt),x(sf,Jt),x(uf,Jt),(e=of.prototype).xb=function(e){return vf(this,e=this.i.xb(e))},e.wa=function(e){this.aa===e||this.l||(this.aa=e,is(this.a,this.aa),this.dispatchEvent(new af(this.la())))},e.la=function(){return this.aa},e.fd=function(){var e=s.navigator;this.wa(e&&(e.languages&&e.languages[0]||e.language||e.userLanguage)||null)},e.gd=function(e,t){if(!this.P){if(!/^https?:\/\//.test(e))throw new C("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");(function(e){"undefined"!=typeof console&&"function"==typeof console.info&&console.info("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),s.document&&!e&&wr().then((function(){var e=s.document.createElement("div");e.innerText="Running in emulator mode. Do not use with production credentials.",e.style.position="fixed",e.style.width="100%",e.style.backgroundColor="#ffffff",e.style.border=".1em solid #000000",e.style.color="#ff0000",e.style.bottom="0px",e.style.left="0px",e.style.margin="0px",e.style.zIndex=1e4,e.style.textAlign="center",e.classList.add("firebase-emulator-warning"),s.document.body.appendChild(e)}))})(t=!!t&&!!t.disableWarnings),this.P={url:e,ec:t},this.settings.ib=!0,os(this.a,this.P),this.dispatchEvent(new sf(this.P))}},e.Gc=function(e){this.J.push(e),ss(this.a,mn.SDK_VERSION?Nr(mn.SDK_VERSION,this.J):null),this.dispatchEvent(new uf(this.J))},e.Ga=function(){return Q(this.J)},e.yb=function(e){this.S===e||this.l||(this.S=e,this.a.b=this.S)},e.T=function(){return this.S},e.toJSON=function(){return{apiKey:pf(this).options.apiKey,authDomain:pf(this).options.authDomain,appName:pf(this).name,currentUser:df(this)&&df(this).w()}},e.Fb=function(e,t){switch(e){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==t&&!!this.f;default:return!1}},e.na=function(e,t,n,r){"signInViaPopup"==e&&this.g==r&&(n&&this.C?this.C(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.C)},e.Fa=function(e,t){return"signInViaRedirect"==e||"signInViaPopup"==e&&this.g==t&&this.f?k(this.ic,this):null},e.ic=function(e,t,n,r){var i=this,o={requestUri:e,postBody:r,sessionId:t,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),i.$.then((function(){return hf(i,ws(i.a,o))}))},e.Xc=function(e){if(!Rr())return Ot(new C("operation-not-supported-in-this-environment"));var t=this,n=Yi(e.providerId),r=Vr(),i=null;(!Mr()||Sr())&&pf(this).options.authDomain&&e.isOAuthProvider&&(i=yu(pf(this).options.authDomain,pf(this).options.apiKey,pf(this).name,"signInViaPopup",e,null,r,mn.SDK_VERSION||null,null,null,this.T(),this.P));var o=vr(i,n&&n.ua,n&&n.ta);return vf(this,n=lf(this).then((function(n){return Ml(n,o,"signInViaPopup",e,r,!!i,t.T())})).then((function(){return new kt((function(e,n){t.na("signInViaPopup",null,new C("cancelled-popup-request"),t.g),t.f=e,t.C=n,t.g=r,t.c=zl(t.b,t,"signInViaPopup",o,r)}))})).then((function(e){return o&&mr(o),e?ei(e):null})).o((function(e){throw o&&mr(o),e})))},e.Yc=function(e){if(!Rr())return Ot(new C("operation-not-supported-in-this-environment"));var t=this;return vf(this,lf(this).then((function(){return function(e){return rf(e,(function(){return e.b.set(Qc,e.c.F,e.a)}))}(t.i)})).then((function(){return Ul(t.b,"signInViaRedirect",e,void 0,t.T())})))},e.qa=function(){var e=this;return cf(this).then((function(t){return e.b&&ql(e.b.b),t})).o((function(t){throw e.b&&ql(e.b.b),t}))},e.dd=function(e){if(!e)return Ot(new C("null-user"));if(this.S!=e.tenantId)return Ot(new C("tenant-id-mismatch"));var t=this,n={};n.apiKey=pf(this).options.apiKey,n.authDomain=pf(this).options.authDomain,n.appName=pf(this).name;var r=function(e,t,n,r){var i=e.b,o={};return o[Za]=i.b&&i.b.toString(),o.refreshToken=i.a,t=new yc(t||{apiKey:e.l,authDomain:e.s,appName:e.m},o),n&&(t.ha=n),r&&kc(t,r),jc(t,e),t}(e,n,t.D,t.Ga());return vf(this,this.h.then((function(){if(pf(t).options.apiKey!=e.l)return r.reload()})).then((function(){return df(t)&&e.uid==df(t).uid?(jc(df(t),e),t.da(e)):(ff(t,r),_c(r),t.da(r))})).then((function(){mf(t)})))},e.Ab=function(){var e=this;return vf(this,this.h.then((function(){return e.b&&ql(e.b.b),df(e)?(ff(e,null),tf(e.i).then((function(){mf(e)}))):_t()})))},e.Zc=function(){var e=this;return nf(this.i,pf(this).options.authDomain).then((function(t){if(!e.l){var n;if(n=df(e)&&t){n=df(e).uid;var r=t.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return jc(df(e),t),df(e).I();(df(e)||t)&&(ff(e,t),t&&(_c(t),t.ha=e.D),e.b&&Ll(e.b,e),mf(e))}}))},e.da=function(e){return ef(this.i,e)},e.mc=function(){mf(this),this.da(df(this))},e.wc=function(){this.Ab()},e.xc=function(){this.Ab()},e.kc=function(e){var t=this;return this.h.then((function(){return hf(t,_t(e))}))},e.zc=function(e){var t=this;this.addAuthTokenListener((function(){e.next(df(t))}))},e.Ac=function(e){var t=this;!function(e,t){e.O.push(t),vf(e,e.h.then((function(){!e.l&&G(e.O,t)&&e.X!==e.getUid()&&(e.X=e.getUid(),t(gf(e)))})))}(this,(function(){e.next(df(t))}))},e.Ic=function(e,t,n){var r=this;return this.ba&&Promise.resolve().then((function(){"function"==typeof e?e(df(r)):"function"==typeof e.next&&e.next(df(r))})),this.hb(e,t,n)},e.Hc=function(e,t,n){var r=this;return this.ba&&Promise.resolve().then((function(){r.X=r.getUid(),"function"==typeof e?e(df(r)):"function"==typeof e.next&&e.next(df(r))})),this.bc(e,t,n)},e.nc=function(e){var t=this;return vf(this,this.h.then((function(){return df(t)?df(t).I(e).then((function(e){return{accessToken:e}})):null})))},e.Tc=function(e){var t=this;return this.h.then((function(){return hf(t,ru(t.a,Js,{token:e}))})).then((function(e){var n=e.user;return Dc(n,"isAnonymous",!1),t.da(n),e}))},e.Uc=function(e,t){var n=this;return this.h.then((function(){return hf(n,ru(n.a,Qs,{email:e,password:t}))}))},e.dc=function(e,t){var n=this;return this.h.then((function(){return hf(n,ru(n.a,Cs,{email:e,password:t}))}))},e.$a=function(e){var t=this;return this.h.then((function(){return hf(t,e.ka(t.a))}))},e.Sc=function(e){return Yr("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.$a(e)},e.zb=function(){var e=this;return this.h.then((function(){var t=df(e);if(t&&t.isAnonymous){var n=ei({providerId:null,isNewUser:!1});return ei({user:t,credential:null,additionalUserInfo:n,operationType:"signIn"})}return hf(e,e.a.zb()).then((function(t){var n=t.user;return Dc(n,"isAnonymous",!0),e.da(n),t}))}))},e.getUid=function(){return df(this)&&df(this).uid||null},e.cc=function(e){this.addAuthTokenListener(e),this.u++,0<this.u&&df(this)&&xc(df(this))},e.Pc=function(e){var t=this;W(this.s,(function(n){n==e&&t.u--})),0>this.u&&(this.u=0),0==this.u&&df(this)&&Ic(df(this)),this.removeAuthTokenListener(e)},e.addAuthTokenListener=function(e){var t=this;this.s.push(e),vf(this,this.h.then((function(){t.l||G(t.s,e)&&e(gf(t))})))},e.removeAuthTokenListener=function(e){Y(this.s,(function(t){return t==e}))},e.delete=function(){this.l=!0;for(var e=0;e<this.R.length;e++)this.R[e].cancel("app-deleted");return this.R=[],this.i&&(e=this.i).b.removeListener(Zc("local"),e.a,this.ja),this.b&&(Rl(this.b,this),ql(this.b.b)),Promise.resolve()},e.hc=function(e){return vf(this,function(e,t){return ru(e,Ts,{identifier:t,continueUri:Dr()?hr():"http://localhost"}).then((function(e){return e.signinMethods||[]}))}(this.a,e))},e.Bc=function(e){return!!Ro(e)},e.wb=function(e,t){var n=this;return vf(this,_t().then((function(){var e=new Ai(t);if(!e.c)throw new C("argument-error",Di+" must be true when sending sign in link to email");return Hi(e)})).then((function(t){return n.a.wb(e,t)})).then((function(){})))},e.jd=function(e){return this.Ra(e).then((function(e){return e.data.email}))},e.nb=function(e,t){return vf(this,this.a.nb(e,t).then((function(){})))},e.Ra=function(e){return vf(this,this.a.Ra(e).then((function(e){return new li(e)})))},e.jb=function(e){return vf(this,this.a.jb(e).then((function(){})))},e.vb=function(e,t){var n=this;return vf(this,_t().then((function(){return void 0===t||de(t)?{}:Hi(new Ai(t))})).then((function(t){return n.a.vb(e,t)})).then((function(){})))},e.Wc=function(e,t){return vf(this,Ql(this,e,t,k(this.$a,this)))},e.Vc=function(e,t){var n=this;return vf(this,_t().then((function(){var r=t||hr(),i=Lo(e,r);if(!(r=Ro(r)))throw new C("argument-error","Invalid email link!");if(r.tenantId!==n.T())throw new C("tenant-id-mismatch");return n.$a(i)})))},yf.prototype.render=function(){},yf.prototype.reset=function(){},yf.prototype.getResponse=function(){},yf.prototype.execute=function(){};var wf=null;function kf(e,t){return(t=Sf(t))&&e.a[t]||null}function Sf(e){return(e=void 0===e?1e12:e)?e.toString():null}function Ef(e,t){this.g=!1,this.c=t,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=lt(e);var n=this;this.i=function(){n.execute()},this.h?this.execute():cn(this.f,"click",this.i)}function xf(e){if(e.g)throw Error("reCAPTCHA mock was already deleted!")}function If(){}function Cf(){}bf.prototype.render=function(e,t){return this.a[this.b.toString()]=new Ef(e,t),this.b++},bf.prototype.reset=function(e){var t=kf(this,e);e=Sf(e),t&&e&&(t.delete(),delete this.a[e])},bf.prototype.getResponse=function(e){return(e=kf(this,e))?e.getResponse():null},bf.prototype.execute=function(e){(e=kf(this,e))&&e.execute()},Ef.prototype.getResponse=function(){return xf(this),this.b},Ef.prototype.execute=function(){xf(this);var e=this;this.a||(this.a=setTimeout((function(){e.b=function(){for(var e=50,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}();var t=e.c.callback,n=e.c["expired-callback"];if(t)try{t(e.b)}catch(e){}e.a=setTimeout((function(){if(e.a=null,e.b=null,n)try{n()}catch(e){}e.h&&e.execute()}),6e4)}),500))},Ef.prototype.delete=function(){xf(this),this.g=!0,clearTimeout(this.a),this.a=null,pn(this.f,"click",this.i)},Qr(If,"FACTOR_ID","phone"),Cf.prototype.g=function(){return wf||(wf=new bf),_t(wf)},Cf.prototype.c=function(){};var Tf=null;function _f(){this.b=s.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Of=new be(Ee,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Nf=new Wr(3e4,6e4);_f.prototype.g=function(e){var t=this;return new kt((function(n,r){var i=setTimeout((function(){r(new C("network-request-failed"))}),Nf.get());!s.grecaptcha||e!==t.f&&!t.b?(s[t.a]=function(){if(s.grecaptcha){t.f=e;var o=s.grecaptcha.render;s.grecaptcha.render=function(e,n){return e=o(e,n),t.b++,e},clearTimeout(i),n(s.grecaptcha)}else clearTimeout(i),r(new C("internal-error"));delete s[t.a]},_t(Wa(Te(Of,{onload:t.a,hl:e||""}))).o((function(){clearTimeout(i),r(new C("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(s.grecaptcha))}))},_f.prototype.c=function(){this.b--};var Pf=null;function Af(e,t,n,r,i,o,a){if(Qr(this,"type","recaptcha"),this.c=this.f=null,this.D=!1,this.v=t,this.g=null,a?(Tf||(Tf=new Cf),a=Tf):(Pf||(Pf=new _f),a=Pf),this.m=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Df])throw new C("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[jf],!s.document)throw new C("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!lt(t)||!this.i&&lt(t).hasChildNodes())throw new C("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.s=new Ja(e,o||null,i||null),this.u=r||function(){return null};var u=this;this.l=[];var l=this.a[Lf];this.a[Lf]=function(e){if(Mf(u,e),"function"==typeof l)l(e);else if("string"==typeof l){var t=Ar(l,s);"function"==typeof t&&t(e)}};var c=this.a[Rf];this.a[Rf]=function(){if(Mf(u,null),"function"==typeof c)c();else if("string"==typeof c){var e=Ar(c,s);"function"==typeof e&&e()}}}var Lf="callback",Rf="expired-callback",Df="sitekey",jf="size";function Mf(e,t){for(var n=0;n<e.l.length;n++)try{e.l[n](t)}catch(e){}}function Ff(e,t){return e.h.push(t),t.oa((function(){X(e.h,t)})),t}function Uf(e){if(e.D)throw new C("internal-error","RecaptchaVerifier instance has been destroyed.")}function zf(e,t,n){var r=!1;try{this.b=n||mn.app()}catch(e){throw new C("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new C("invalid-api-key");n=this.b.options.apiKey;var i=this,o=null;try{o=this.b.auth().Ga()}catch(e){}try{r=this.b.auth().settings.appVerificationDisabledForTesting}catch(e){}o=mn.SDK_VERSION?Nr(mn.SDK_VERSION,o):null,Af.call(this,n,e,t,(function(){try{var e=i.b.auth().la()}catch(t){e=null}return e}),o,A(_),r)}function Vf(e,t,n,r){e:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<t.length;a++)if(t[a].optional)o=!0;else{if(o)throw new C("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=t.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=t[i].optional&&void 0===n[i],!t[i].M(n[i])&&!o){if(t=t[i],0>i||i>=Hf.length)throw new C("internal-error","Argument validator received an unsupported number of arguments.");n=Hf[i],r=(r?"":n+" argument ")+(t.name?'"'+t.name+'" ':"")+"must be "+t.K+".";break e}r=null}}if(r)throw new C("argument-error",e+" failed: "+r)}(e=Af.prototype).Ia=function(){var e=this;return this.f?this.f:this.f=Ff(this,_t().then((function(){if(Dr()&&!Er())return wr();throw new C("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return e.m.g(e.u())})).then((function(t){return e.g=t,ru(e.s,zs,{})})).then((function(t){e.a[Df]=t.recaptchaSiteKey})).o((function(t){throw e.f=null,t})))},e.render=function(){Uf(this);var e=this;return Ff(this,this.Ia().then((function(){if(null===e.c){var t=e.v;if(!e.i){var n=lt(t);t=function(e,t,n){var r=arguments,i=document,o=String(r[0]),a=r[1];if(!ut&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',We(a.name),'"'),a.type){o.push(' type="',We(a.type),'"');var s={};ve(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=gt(i,o),a&&("string"==typeof a?o.className=a:Array.isArray(a)?o.className=a.join(" "):ct(o,a)),2<r.length&&dt(i,o,r),o}("DIV"),n.appendChild(t)}e.c=e.g.render(t,e.a)}return e.c})))},e.verify=function(){Uf(this);var e=this;return Ff(this,this.render().then((function(t){return new kt((function(n){var r=e.g.getResponse(t);if(r)n(r);else{var i=function(t){t&&(function(e,t){Y(e.l,(function(e){return e==t}))}(e,i),n(t))};e.l.push(i),e.i&&e.g.execute(e.c)}}))})))},e.reset=function(){Uf(this),null!==this.c&&this.g.reset(this.c)},e.clear=function(){Uf(this),this.D=!0,this.m.c();for(var e=0;e<this.h.length;e++)this.h[e].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){e=lt(this.v);for(var t;t=e.firstChild;)e.removeChild(t)}},x(zf,Af);var Hf="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Bf(e,t){return{name:e||"",K:"a valid string",optional:!!t,M:function(e){return"string"==typeof e}}}function Wf(e,t){return{name:e||"",K:"a boolean",optional:!!t,M:function(e){return"boolean"==typeof e}}}function $f(e,t){return{name:e||"",K:"a valid object",optional:!!t,M:g}}function qf(e,t){return{name:e||"",K:"a function",optional:!!t,M:function(e){return"function"==typeof e}}}function Kf(e,t){return{name:e||"",K:"null",optional:!!t,M:function(e){return null===e}}}function Gf(e){return{name:e?e+"Credential":"credential",K:e?"a valid "+e+" credential":"a valid credential",optional:!1,M:function(t){if(!t)return!1;var n=!e||t.providerId===e;return!(!t.ka||!n)}}}function Xf(e,t){return g(e)&&"string"==typeof e.type&&e.type===t&&"function"==typeof e.Ha}function Yf(e){return g(e)&&"string"==typeof e.uid}function Jf(e,t,n,r){return{name:n||"",K:e.K+" or "+t.K,optional:!!r,M:function(n){return e.M(n)||t.M(n)}}}function Qf(e,t){for(var n in t){var r=t[n].name;e[r]=th(r,e[n],t[n].j)}}function Zf(e,t){for(var n in t){var r=t[n].name;r!==n&&Object.defineProperty(e,r,{get:S((function(e){return this[e]}),n),set:S((function(e,t,n,r){Vf(e,[n],[r],!0),this[t]=r}),r,n,t[n].kb),enumerable:!0})}}function eh(e,t,n,r){e[t]=th(t,n,r)}function th(e,t,n){function r(){var e=Array.prototype.slice.call(arguments);return Vf(o,n,e),t.apply(this,e)}if(!n)return t;var i,o=function(e){return(e=e.split("."))[e.length-1]}(e);for(i in t)r[i]=t[i];for(i in t.prototype)r.prototype[i]=t.prototype[i];return r}Qf(of.prototype,{jb:{name:"applyActionCode",j:[Bf("code")]},Ra:{name:"checkActionCode",j:[Bf("code")]},nb:{name:"confirmPasswordReset",j:[Bf("code"),Bf("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[Bf("email"),Bf("password")]},hc:{name:"fetchSignInMethodsForEmail",j:[Bf("email")]},qa:{name:"getRedirectResult",j:[]},Bc:{name:"isSignInWithEmailLink",j:[Bf("emailLink")]},Hc:{name:"onAuthStateChanged",j:[Jf($f(),qf(),"nextOrObserver"),qf("opt_error",!0),qf("opt_completed",!0)]},Ic:{name:"onIdTokenChanged",j:[Jf($f(),qf(),"nextOrObserver"),qf("opt_error",!0),qf("opt_completed",!0)]},vb:{name:"sendPasswordResetEmail",j:[Bf("email"),Jf($f("opt_actionCodeSettings",!0),Kf(null,!0),"opt_actionCodeSettings",!0)]},wb:{name:"sendSignInLinkToEmail",j:[Bf("email"),$f("actionCodeSettings")]},xb:{name:"setPersistence",j:[Bf("persistence")]},Sc:{name:"signInAndRetrieveDataWithCredential",j:[Gf()]},zb:{name:"signInAnonymously",j:[]},$a:{name:"signInWithCredential",j:[Gf()]},Tc:{name:"signInWithCustomToken",j:[Bf("token")]},Uc:{name:"signInWithEmailAndPassword",j:[Bf("email"),Bf("password")]},Vc:{name:"signInWithEmailLink",j:[Bf("email"),Bf("emailLink",!0)]},Wc:{name:"signInWithPhoneNumber",j:[Bf("phoneNumber"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(e){return!(!e||"string"!=typeof e.type||"function"!=typeof e.verify)}}]},Xc:{name:"signInWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Yc:{name:"signInWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},dd:{name:"updateCurrentUser",j:[Jf({name:"user",K:"an instance of Firebase User",optional:!1,M:function(e){return!!(e&&e instanceof yc)}},Kf(),"user")]},Ab:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Bf(null,!0)]},fd:{name:"useDeviceLanguage",j:[]},gd:{name:"useEmulator",j:[Bf("url"),$f("options",!0)]},jd:{name:"verifyPasswordResetCode",j:[Bf("code")]}}),Zf(of.prototype,{lc:{name:"languageCode",kb:Jf(Bf(),Kf(),"languageCode")},ti:{name:"tenantId",kb:Jf(Bf(),Kf(),"tenantId")}}),of.Persistence=Zu,of.Persistence.LOCAL="local",of.Persistence.SESSION="session",of.Persistence.NONE="none",Qf(yc.prototype,{delete:{name:"delete",j:[]},oc:{name:"getIdTokenResult",j:[Wf("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Wf("opt_forceRefresh",!0)]},Cc:{name:"linkAndRetrieveDataWithCredential",j:[Gf()]},qb:{name:"linkWithCredential",j:[Gf()]},Dc:{name:"linkWithPhoneNumber",j:[Bf("phoneNumber"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(e){return!(!e||"string"!=typeof e.type||"function"!=typeof e.verify)}}]},Ec:{name:"linkWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Fc:{name:"linkWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Lc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Gf()]},tb:{name:"reauthenticateWithCredential",j:[Gf()]},Mc:{name:"reauthenticateWithPhoneNumber",j:[Bf("phoneNumber"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(e){return!(!e||"string"!=typeof e.type||"function"!=typeof e.verify)}}]},Nc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Oc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},ub:{name:"sendEmailVerification",j:[Jf($f("opt_actionCodeSettings",!0),Kf(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Bf(null,!0)]},cd:{name:"unlink",j:[Bf("provider")]},Bb:{name:"updateEmail",j:[Bf("email")]},Cb:{name:"updatePassword",j:[Bf("password")]},ed:{name:"updatePhoneNumber",j:[Gf("phone")]},Db:{name:"updateProfile",j:[$f("profile")]},Eb:{name:"verifyBeforeUpdateEmail",j:[Bf("email"),Jf($f("opt_actionCodeSettings",!0),Kf(null,!0),"opt_actionCodeSettings",!0)]}}),Qf(bf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Qf(yf.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Qf(kt.prototype,{oa:{name:"finally"},o:{name:"catch"},then:{name:"then"}}),Zf(Yl.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",kb:Wf("appVerificationDisabledForTesting")}}),Qf(Jl.prototype,{confirm:{name:"confirm",j:[Bf("verificationCode")]}}),eh(co,"fromJSON",(function(e){e="string"==typeof e?JSON.parse(e):e;for(var t,n=[yo,Po,jo,go],r=0;r<n.length;r++)if(t=n[r](e))return t;return null}),[Jf(Bf(),$f(),"json")]),eh(Ao,"credential",(function(e,t){return new No(e,t)}),[Bf("email"),Bf("password")]),Qf(No.prototype,{w:{name:"toJSON",j:[Bf(null,!0)]}}),Qf(So.prototype,{Ca:{name:"addScope",j:[Bf("scope")]},Ka:{name:"setCustomParameters",j:[$f("customOAuthParameters")]}}),eh(So,"credential",Eo,[Jf(Bf(),$f(),"token")]),eh(Ao,"credentialWithLink",Lo,[Bf("email"),Bf("emailLink")]),Qf(xo.prototype,{Ca:{name:"addScope",j:[Bf("scope")]},Ka:{name:"setCustomParameters",j:[$f("customOAuthParameters")]}}),eh(xo,"credential",Io,[Jf(Bf(),$f(),"token")]),Qf(Co.prototype,{Ca:{name:"addScope",j:[Bf("scope")]},Ka:{name:"setCustomParameters",j:[$f("customOAuthParameters")]}}),eh(Co,"credential",To,[Jf(Bf(),Jf($f(),Kf()),"idToken"),Jf(Bf(),Kf(),"accessToken",!0)]),Qf(_o.prototype,{Ka:{name:"setCustomParameters",j:[$f("customOAuthParameters")]}}),eh(_o,"credential",Oo,[Jf(Bf(),$f(),"token"),Bf("secret",!0)]),Qf(ko.prototype,{Ca:{name:"addScope",j:[Bf("scope")]},credential:{name:"credential",j:[Jf(Bf(),Jf($f(),Kf()),"optionsOrIdToken"),Jf(Bf(),Kf(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[$f("customOAuthParameters")]}}),Qf(mo.prototype,{w:{name:"toJSON",j:[Bf(null,!0)]}}),Qf(ho.prototype,{w:{name:"toJSON",j:[Bf(null,!0)]}}),eh(Fo,"credential",Uo,[Bf("verificationId"),Bf("verificationCode")]),Qf(Fo.prototype,{fb:{name:"verifyPhoneNumber",j:[Jf(Bf(),{name:"phoneInfoOptions",K:"valid phone info options",optional:!1,M:function(e){return!!e&&(e.session&&e.phoneNumber?Xf(e.session,uo)&&"string"==typeof e.phoneNumber:e.session&&e.multiFactorHint?Xf(e.session,lo)&&Yf(e.multiFactorHint):e.session&&e.multiFactorUid?Xf(e.session,lo)&&"string"==typeof e.multiFactorUid:!!e.phoneNumber&&"string"==typeof e.phoneNumber)}},"phoneInfoOptions"),{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(e){return!(!e||"string"!=typeof e.type||"function"!=typeof e.verify)}}]}}),Qf(Do.prototype,{w:{name:"toJSON",j:[Bf(null,!0)]}}),Qf(C.prototype,{toJSON:{name:"toJSON",j:[Bf(null,!0)]}}),Qf(Go.prototype,{toJSON:{name:"toJSON",j:[Bf(null,!0)]}}),Qf(Ko.prototype,{toJSON:{name:"toJSON",j:[Bf(null,!0)]}}),Qf(rc.prototype,{toJSON:{name:"toJSON",j:[Bf(null,!0)]}}),Qf(ec.prototype,{Rc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",K:"a valid multiFactorAssertion",optional:!1,M:function(e){return!!e&&!!e.sb}}]}}),Qf(lc.prototype,{Rb:{name:"getSession",j:[]},fc:{name:"enroll",j:[{name:"multiFactorAssertion",K:"a valid multiFactorAssertion",optional:!1,M:function(e){return!!e&&!!e.sb}},Bf("displayName",!0)]},bd:{name:"unenroll",j:[Jf({name:"multiFactorInfo",K:"a valid multiFactorInfo",optional:!1,M:Yf},Bf(),"multiFactorInfoIdentifier")]}}),Qf(zf.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),eh(Ei,"parseLink",Pi,[Bf("link")]),eh(If,"assertion",(function(e){return new sc(e)}),[Gf("phone")]),function(){if(void 0===mn||!mn.INTERNAL||!mn.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var e={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:fi,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:ci,VERIFY_AND_CHANGE_EMAIL:hi,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:of,AuthCredential:co,Error:C};eh(e,"EmailAuthProvider",Ao,[]),eh(e,"FacebookAuthProvider",So,[]),eh(e,"GithubAuthProvider",xo,[]),eh(e,"GoogleAuthProvider",Co,[]),eh(e,"TwitterAuthProvider",_o,[]),eh(e,"OAuthProvider",ko,[Bf("providerId")]),eh(e,"SAMLAuthProvider",wo,[Bf("providerId")]),eh(e,"PhoneAuthProvider",Fo,[{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(e){return!!(e&&e instanceof of)}}]),eh(e,"RecaptchaVerifier",zf,[Jf(Bf(),{name:"",K:"an HTML element",optional:!1,M:function(e){return!!(e&&e instanceof Element)}},"recaptchaContainer"),$f("recaptchaParameters",!0),{name:"app",K:"an instance of Firebase App",optional:!0,M:function(e){return!!(e&&e instanceof mn.app.App)}}]),eh(e,"ActionCodeURL",Ei,[]),eh(e,"PhoneMultiFactorGenerator",If,[]),mn.INTERNAL.registerComponent({name:"auth",instanceFactory:function(e){return new of(e=e.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:e,instantiationMode:"LAZY",type:"PUBLIC"}),mn.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(e){return{getUid:k((e=e.getProvider("auth").getImmediate()).getUid,e),getToken:k(e.nc,e),addAuthTokenListener:k(e.cc,e),removeAuthTokenListener:k(e.Pc,e)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),mn.registerVersion("@firebase/auth","0.16.4"),mn.INTERNAL.extendNamespace({User:yc})}()}).apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{});const vn=function(){var e=T().t,t={valueProp:e("loginView.valueProp"),youWillKnowMoreShortly:e("loginView.youWillKnowMoreShortly")};return bt(It,{content:t})};function yn(e){return function(e){if(Array.isArray(e))return m(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||v(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function bn(e,t,n,r,i,o,a){try{var s=e[o](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,i)}function wn(e){return function(){var t=this,n=arguments;return new Promise((function(r,i){var o=e.apply(t,n);function a(e){bn(o,r,i,a,s,"next",e)}function s(e){bn(o,r,i,a,s,"throw",e)}a(void 0)}))}}var kn=n(757),Sn=n.n(kn);mn.registerVersion("firebase","8.2.9","app");mn.initializeApp({apiKey:"AIzaSyBT2yXPC_uM5f5K6CmUZCg62_Mh58Vu50o",authDomain:"cowork-97ad9.firebaseapp.com",projectId:"cowork-97ad9",storageBucket:"cowork-97ad9.appspot.com",messagingSenderId:"1045813301411",appId:"1:1045813301411:web:c3e90432e2819ea57cef16",measurementId:"G-HXTC4YE6LQ"}),mn.auth();var En=n(697),xn=n.n(En),In=(0,e.createContext)();function Cn(t){var n=t.children,r=y((0,e.useState)({email:"",password:""}),2),i=r[0],o=r[1],a=y((0,e.useState)([]),2),s=a[0],u=a[1],l=y((0,e.useState)(window.localStorage.token),2),c=l[0],f=l[1];return bt(In.Provider,{value:{handleSignin:function(){!function(e,t,n,r){mn.auth().signInWithEmailAndPassword(e,t).then(function(){var e=wn(Sn().mark((function e(t){var n;return Sn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,Object.entries(t.user)[5][1].b;case 2:return n=e.sent,e.next=5,localStorage.setItem("token",n);case 5:r(window.localStorage.token);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()).catch((function(e){n((function(t){return[].concat(yn(t),[e.message])}))}))}(i.email,i.password,u,f)},handleSignOut:function(){!function(e,t){mn.auth().signOut().then((function(){localStorage.removeItem("token"),t(null)})).catch((function(n){e((function(e){return[].concat(yn(e),[n.message])})),localStorage.removeItem("token"),t(null)}))}(u,f)},inputs:i,setInputs:o,errors:s,setErrors:u,token:c}},n)}function Tn(){return(0,e.useContext)(In)}Cn.propTypes={children:xn().object};const _n=function(){var t=Tn().handleSignOut;return(0,e.useEffect)((function(){return t()})),null};function On(e,t){return(On=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Nn(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,On(e,t)}function Pn(e){return"/"===e.charAt(0)}function An(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}function Ln(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}const Rn=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=Ln(t),i=Ln(n);return r!==t||i!==n?e(r,i):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};const Dn=function(e,t){if(!e)throw new Error("Invariant failed")};function jn(e){return"/"===e.charAt(0)?e:"/"+e}function Mn(e){return"/"===e.charAt(0)?e.substr(1):e}function Fn(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function Un(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function zn(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function Vn(e,t,n,r){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=_({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),r?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],i=t&&t.split("/")||[],o=e&&Pn(e),a=t&&Pn(t),s=o||a;if(e&&Pn(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var u=i[i.length-1];n="."===u||".."===u||""===u}else n=!1;for(var l=0,c=i.length;c>=0;c--){var f=i[c];"."===f?An(i,c):".."===f?(An(i,c),l++):l&&(An(i,c),l--)}if(!s)for(;l--;l)i.unshift("..");!s||""===i[0]||i[0]&&Pn(i[0])||i.unshift("");var h=i.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h}(i.pathname,r.pathname)):i.pathname=r.pathname:i.pathname||(i.pathname="/"),i}function Hn(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,i):i(!0):i(!1!==o)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var Bn=!("undefined"==typeof window||!window.document||!window.document.createElement);function Wn(e,t){t(window.confirm(e))}var $n="hashchange",qn={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+Mn(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:Mn,decodePath:jn},slash:{encodePath:jn,decodePath:jn}};function Kn(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function Gn(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function Xn(e){window.location.replace(Kn(window.location.href)+"#"+e)}function Yn(e){void 0===e&&(e={}),Bn||Dn(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,i=void 0===r?Wn:r,o=n.hashType,a=void 0===o?"slash":o,s=e.basename?Un(jn(e.basename)):"",u=qn[a],l=u.encodePath,c=u.decodePath;function f(){var e=c(Gn());return s&&(e=Fn(e,s)),Vn(e)}var h=Hn();function p(e){_(I,e),I.length=t.length,h.notifyListeners(I.location,I.action)}var d=!1,g=null;function m(){var e,t,n=Gn(),r=l(n);if(n!==r)Xn(r);else{var o=f(),a=I.location;if(!d&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(g===zn(o))return;g=null,function(e){if(d)d=!1,p();else{h.confirmTransitionTo(e,"POP",i,(function(t){t?p({action:"POP",location:e}):function(e){var t=I.location,n=w.lastIndexOf(zn(t));-1===n&&(n=0);var r=w.lastIndexOf(zn(e));-1===r&&(r=0);var i=n-r;i&&(d=!0,k(i))}(e)}))}}(o)}}var v=Gn(),y=l(v);v!==y&&Xn(y);var b=f(),w=[zn(b)];function k(e){t.go(e)}var S=0;function E(e){1===(S+=e)&&1===e?window.addEventListener($n,m):0===S&&window.removeEventListener($n,m)}var x=!1,I={length:t.length,action:"POP",location:b,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=Kn(window.location.href)),n+"#"+l(s+zn(e))},push:function(e,t){var n="PUSH",r=Vn(e,void 0,void 0,I.location);h.confirmTransitionTo(r,n,i,(function(e){if(e){var t=zn(r),i=l(s+t);if(Gn()!==i){g=t,function(e){window.location.hash=e}(i);var o=w.lastIndexOf(zn(I.location)),a=w.slice(0,o+1);a.push(t),w=a,p({action:n,location:r})}else p()}}))},replace:function(e,t){var n="REPLACE",r=Vn(e,void 0,void 0,I.location);h.confirmTransitionTo(r,n,i,(function(e){if(e){var t=zn(r),i=l(s+t);Gn()!==i&&(g=t,Xn(i));var o=w.indexOf(zn(I.location));-1!==o&&(w[o]=t),p({action:n,location:r})}}))},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=h.setPrompt(e);return x||(E(1),x=!0),function(){return x&&(x=!1,E(-1)),t()}},listen:function(e){var t=h.appendListener(e);return E(1),function(){E(-1),t()}}};return I}var Jn=1073741823,Qn="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function Zn(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const er=e.createContext||function(t,n){var r,i,o,a="__create-react-context-"+((Qn[o="__global_unique_id__"]=(Qn[o]||0)+1)+"__"),s=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=Zn(t.props.value),t}Nn(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[a]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,i=e.value;((o=r)===(a=i)?0!==o||1/o==1/a:o!=o&&a!=a)?t=0:(t="function"==typeof n?n(r,i):Jn,0!=(t|=0)&&this.emitter.set(e.value,t))}var o,a},r.render=function(){return this.props.children},t}(e.Component);s.childContextTypes=((r={})[a]=xn().object.isRequired,r);var u=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}Nn(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?Jn:t},r.componentDidMount=function(){this.context[a]&&this.context[a].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?Jn:e},r.componentWillUnmount=function(){this.context[a]&&this.context[a].off(this.onUpdate)},r.getValue=function(){return this.context[a]?this.context[a].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return u.contextTypes=((i={})[a]=xn().object,i),{Provider:s,Consumer:u}};var tr=n(658),nr=n.n(tr),rr=(n(864),function(e){var t=er();return t.displayName="Router-History",t}()),ir=function(e){var t=er();return t.displayName="Router",t}(),or=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Nn(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return e.createElement(ir.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(rr.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component;var ar=function(e){function t(){return e.apply(this,arguments)||this}Nn(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(e.Component),sr={},ur=0;function lr(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(sr[e])return sr[e];var t=nr().compile(e);return ur<1e4&&(sr[e]=t,ur++),t}(e)(t,{pretty:!0})}function cr(t){var n=t.computedMatch,r=t.to,i=t.push,o=void 0!==i&&i;return e.createElement(ir.Consumer,null,(function(t){t||Dn(!1);var i=t.history,a=t.staticContext,s=o?i.push:i.replace,u=Vn(n?"string"==typeof r?lr(r,n.params):_({},r,{pathname:lr(r.pathname,n.params)}):r);return a?(s(u),null):e.createElement(ar,{onMount:function(){s(u)},onUpdate:function(e,t){var n,r,i=Vn(t.to);n=i,r=_({},u,{key:i.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&Rn(n.state,r.state)||s(u)},to:r})}))}var fr={},hr=0;function pr(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,o=void 0!==i&&i,a=n.strict,s=void 0!==a&&a,u=n.sensitive,l=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=fr[n]||(fr[n]={});if(r[e])return r[e];var i=[],o={regexp:nr()(e,i,t),keys:i};return hr<1e4&&(r[e]=o,hr++),o}(n,{end:o,strict:s,sensitive:l}),i=r.regexp,a=r.keys,u=i.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),h=e===c;return o&&!h?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:h,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var dr=function(t){function n(){return t.apply(this,arguments)||this}return Nn(n,t),n.prototype.render=function(){var t=this;return e.createElement(ir.Consumer,null,(function(n){n||Dn(!1);var r=t.props.location||n.location,i=_({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?pr(r.pathname,t.props):n.match}),o=t.props,a=o.children,s=o.component,u=o.render;return Array.isArray(a)&&0===a.length&&(a=null),e.createElement(ir.Provider,{value:i},i.match?a?"function"==typeof a?a(i):a:s?e.createElement(s,i):u?u(i):null:"function"==typeof a?a(i):null)}))},n}(e.Component);e.Component;var gr=function(t){function n(){return t.apply(this,arguments)||this}return Nn(n,t),n.prototype.render=function(){var t=this;return e.createElement(ir.Consumer,null,(function(n){n||Dn(!1);var r,i,o=t.props.location||n.location;return e.Children.forEach(t.props.children,(function(t){if(null==i&&e.isValidElement(t)){r=t;var a=t.props.path||t.props.from;i=a?pr(o.pathname,_({},t.props,{path:a})):n.match}})),i?e.cloneElement(r,{location:o,computedMatch:i}):null}))},n}(e.Component),mr=e.useContext;function vr(){return mr(rr)}e.Component;var yr=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.call.apply(t,[this].concat(r))||this).history=Yn(e.props),e}return Nn(n,t),n.prototype.render=function(){return e.createElement(or,{history:this.history,children:this.props.children})},n}(e.Component),br=function(e,t){return"function"==typeof e?e(t):e},wr=function(e,t){return"string"==typeof e?Vn(e,null,null,t):e},kr=function(e){return e},Sr=e.forwardRef;void 0===Sr&&(Sr=kr);var Er=Sr((function(t,n){var r=t.innerRef,i=t.navigate,o=t.onClick,a=gt(t,["innerRef","navigate","onClick"]),s=a.target,u=_({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),i())}});return u.ref=kr!==Sr&&n||r,e.createElement("a",u)})),xr=Sr((function(t,n){var r=t.component,i=void 0===r?Er:r,o=t.replace,a=t.to,s=t.innerRef,u=gt(t,["component","replace","to","innerRef"]);return e.createElement(ir.Consumer,null,(function(t){t||Dn(!1);var r=t.history,l=wr(br(a,t.location),t.location),c=l?r.createHref(l):"",f=_({},u,{href:c,navigate:function(){var e=br(a,t.location);(o?r.replace:r.push)(e)}});return kr!==Sr?f.ref=n||s:f.innerRef=s,e.createElement(i,f)}))})),Ir=function(e){return e},Cr=e.forwardRef;void 0===Cr&&(Cr=Ir),Cr((function(t,n){var r=t["aria-current"],i=void 0===r?"page":r,o=t.activeClassName,a=void 0===o?"active":o,s=t.activeStyle,u=t.className,l=t.exact,c=t.isActive,f=t.location,h=t.sensitive,p=t.strict,d=t.style,g=t.to,m=t.innerRef,v=gt(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(ir.Consumer,null,(function(t){t||Dn(!1);var r=f||t.location,o=wr(br(g,r),r),y=o.pathname,b=y&&y.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=b?pr(r.pathname,{path:b,exact:l,sensitive:h,strict:p}):null,k=!!(c?c(w,r):w),S=k?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,E=k?_({},d,{},s):d,x=_({"aria-current":k&&i||null,className:S,style:E,to:o},v);return Ir!==Cr?x.ref=n||m:x.innerRef=m,e.createElement(xr,x)}))}));var Tr="/login",_r="/logout";const Or=function(e){e.Component;var t=mt(e,["Component"]);return Tn().token?bt(dr,t):bt(cr,{to:Tr})},Nr=function(e){e.Component;var t=mt(e,["Component"]);return Tn().token?bt(cr,{to:"/"}):bt(dr,t)},Pr=function(){return bt("svg",{width:"60",height:"60",viewBox:"0 0 60 60",fill:"none",xmlns:"http://www.w3.org/2000/svg"},bt("rect",{width:"60",height:"60",rx:"10",fill:"url(#paint0_linear)"}),bt("path",{d:"M51.1567 30.8347C50.3533 29.8563 49.144 29.295 47.8388 29.295H43.9354V26.4637H14.55V34.8722C14.55 39.596 17.045 43.7753 20.8466 46.2828H14.5603V48.7499H43.9251V46.2828H37.6388C38.9682 45.406 40.1376 44.3249 41.0965 43.0873H43.9437C47.2768 43.0873 50.1693 40.9393 50.9778 37.8638L51.9226 34.2697C52.239 33.0652 51.9599 31.8133 51.1567 30.8347ZM49.4061 33.6713L48.4613 37.2655C47.9421 39.2407 46.0844 40.6202 43.9437 40.6202H42.6238C43.4656 38.8679 43.9354 36.9213 43.9354 34.8722V31.7622H47.8388C48.3398 31.7622 48.8038 31.9776 49.1121 32.3531C49.4205 32.7286 49.5275 33.2091 49.4061 33.6713Z",fill:"white"}),bt("path",{d:"M27.7968 18.2758C26.2614 18.2758 25.0122 19.5928 25.0122 21.2117V23.2566H26.7023V21.2117C26.7023 20.5754 27.1933 20.0577 27.7968 20.0577H35.5547C39.2292 20.0577 42.2185 16.9058 42.2185 13.0317V11.25H40.5285V13.0317C40.5285 15.9233 38.2973 18.2758 35.5547 18.2758H27.7968Z",fill:"white"}),bt("path",{d:"M19.9017 21.4749C19.9017 18.5833 21.8301 16.2308 24.2006 16.2308H30.9059C32.233 16.2308 33.3127 14.9137 33.3127 13.2948V11.25H31.852V13.2948C31.852 13.9312 31.4276 14.449 30.9059 14.449H24.2006C21.0247 14.449 18.4409 17.6008 18.4409 21.475V23.2566H19.9017V21.4749Z",fill:"white"}),bt("defs",null,bt("linearGradient",{id:"paint0_linear",x1:"30",y1:"0",x2:"30",y2:"60",gradientUnits:"userSpaceOnUse"},bt("stop",{stopColor:"#47FFC5"}),bt("stop",{offset:"1",stopColor:"#00ACFB"}))))};var Ar=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const Lr=function(e){var t={};return function(e){return void 0===t[e]&&(t[e]=(n=e,Ar.test(n)||111===n.charCodeAt(0)&&110===n.charCodeAt(1)&&n.charCodeAt(2)<91)),t[e];var n}}();var Rr=n(418),Dr=n.n(Rr),jr=function(e,t){var n=Dr()({},e,t);for(var r in e){var i;e[r]&&"object"==typeof t[r]&&Dr()(n,((i={})[r]=Dr()(e[r],t[r]),i))}return n},Mr={breakpoints:[40,52,64].map((function(e){return e+"em"}))},Fr=function(e){return"@media screen and (min-width: "+e+")"},Ur=function(e,t){return zr(t,e,e)},zr=function(e,t,n,r,i){for(t=t&&t.split?t.split("."):[t],r=0;r<t.length;r++)e=e?e[t[r]]:i;return e===i?n:e},Vr=function e(t){var n={},r=function(e){var r={},i=!1,o=e.theme&&e.theme.disableStyledSystemCache;for(var a in e)if(t[a]){var s=t[a],u=e[a],l=zr(e.theme,s.scale,s.defaults);if("object"!=typeof u)Dr()(r,s(u,l,e));else{if(n.breakpoints=!o&&n.breakpoints||zr(e.theme,"breakpoints",Mr.breakpoints),Array.isArray(u)){n.media=!o&&n.media||[null].concat(n.breakpoints.map(Fr)),r=jr(r,Hr(n.media,s,l,u,e));continue}null!==u&&(r=jr(r,Br(n.breakpoints,s,l,u,e)),i=!0)}}return i&&(r=function(e){var t={};return Object.keys(e).sort((function(e,t){return e.localeCompare(t,void 0,{numeric:!0,sensitivity:"base"})})).forEach((function(n){t[n]=e[n]})),t}(r)),r};r.config=t,r.propNames=Object.keys(t),r.cache=n;var i=Object.keys(t).filter((function(e){return"config"!==e}));return i.length>1&&i.forEach((function(n){var i;r[n]=e(((i={})[n]=t[n],i))})),r},Hr=function(e,t,n,r,i){var o={};return r.slice(0,e.length).forEach((function(r,a){var s,u=e[a],l=t(r,n,i);u?Dr()(o,((s={})[u]=Dr()({},o[u],l),s)):Dr()(o,l)})),o},Br=function(e,t,n,r,i){var o={};for(var a in r){var s=e[a],u=t(r[a],n,i);if(s){var l,c=Fr(s);Dr()(o,((l={})[c]=Dr()({},o[c],u),l))}else Dr()(o,u)}return o},Wr=function(e){var t=e.properties,n=e.property,r=e.scale,i=e.transform,o=void 0===i?Ur:i,a=e.defaultScale;t=t||[n];var s=function(e,n,r){var i={},a=o(e,n,r);if(null!==a)return t.forEach((function(e){i[e]=a})),i};return s.scale=r,s.defaults=a,s},$r=function(e){void 0===e&&(e={});var t={};return Object.keys(e).forEach((function(n){var r=e[n];t[n]=!0!==r?"function"!=typeof r?Wr(r):r:Wr({property:n,scale:n})})),Vr(t)},qr=function(){for(var e={},t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];n.forEach((function(t){t&&t.config&&Dr()(e,t.config)}));var i=Vr(e);return i},Kr=$r({width:{property:"width",scale:"sizes",transform:function(e,t){return zr(t,e,!function(e){return"number"==typeof e&&!isNaN(e)}(e)||e>1?e:100*e+"%")}},height:{property:"height",scale:"sizes"},minWidth:{property:"minWidth",scale:"sizes"},minHeight:{property:"minHeight",scale:"sizes"},maxWidth:{property:"maxWidth",scale:"sizes"},maxHeight:{property:"maxHeight",scale:"sizes"},size:{properties:["width","height"],scale:"sizes"},overflow:!0,overflowX:!0,overflowY:!0,display:!0,verticalAlign:!0});const Gr=Kr;var Xr={color:{property:"color",scale:"colors"},backgroundColor:{property:"backgroundColor",scale:"colors"},opacity:!0};Xr.bg=Xr.backgroundColor;var Yr=$r(Xr);const Jr=Yr;var Qr=$r({fontFamily:{property:"fontFamily",scale:"fonts"},fontSize:{property:"fontSize",scale:"fontSizes",defaultScale:[12,14,16,20,24,32,48,64,72]},fontWeight:{property:"fontWeight",scale:"fontWeights"},lineHeight:{property:"lineHeight",scale:"lineHeights"},letterSpacing:{property:"letterSpacing",scale:"letterSpacings"},textAlign:!0,fontStyle:!0});const Zr=Qr;var ei=$r({alignItems:!0,alignContent:!0,justifyItems:!0,justifyContent:!0,flexWrap:!0,flexDirection:!0,flex:!0,flexGrow:!0,flexShrink:!0,flexBasis:!0,justifySelf:!0,alignSelf:!0,order:!0});const ti=ei;var ni={space:[0,4,8,16,32,64,128,256,512]},ri=$r({gridGap:{property:"gridGap",scale:"space",defaultScale:ni.space},gridColumnGap:{property:"gridColumnGap",scale:"space",defaultScale:ni.space},gridRowGap:{property:"gridRowGap",scale:"space",defaultScale:ni.space},gridColumn:!0,gridRow:!0,gridAutoFlow:!0,gridAutoColumns:!0,gridAutoRows:!0,gridTemplateColumns:!0,gridTemplateRows:!0,gridTemplateAreas:!0,gridArea:!0});const ii=ri;var oi=$r({border:{property:"border",scale:"borders"},borderWidth:{property:"borderWidth",scale:"borderWidths"},borderStyle:{property:"borderStyle",scale:"borderStyles"},borderColor:{property:"borderColor",scale:"colors"},borderRadius:{property:"borderRadius",scale:"radii"},borderTop:{property:"borderTop",scale:"borders"},borderTopLeftRadius:{property:"borderTopLeftRadius",scale:"radii"},borderTopRightRadius:{property:"borderTopRightRadius",scale:"radii"},borderRight:{property:"borderRight",scale:"borders"},borderBottom:{property:"borderBottom",scale:"borders"},borderBottomLeftRadius:{property:"borderBottomLeftRadius",scale:"radii"},borderBottomRightRadius:{property:"borderBottomRightRadius",scale:"radii"},borderLeft:{property:"borderLeft",scale:"borders"},borderX:{properties:["borderLeft","borderRight"],scale:"borders"},borderY:{properties:["borderTop","borderBottom"],scale:"borders"},borderTopWidth:{property:"borderTopWidth",scale:"borderWidths"},borderTopColor:{property:"borderTopColor",scale:"colors"},borderTopStyle:{property:"borderTopStyle",scale:"borderStyles"},borderBottomWidth:{property:"borderBottomWidth",scale:"borderWidths"},borderBottomColor:{property:"borderBottomColor",scale:"colors"},borderBottomStyle:{property:"borderBottomStyle",scale:"borderStyles"},borderLeftWidth:{property:"borderLeftWidth",scale:"borderWidths"},borderLeftColor:{property:"borderLeftColor",scale:"colors"},borderLeftStyle:{property:"borderLeftStyle",scale:"borderStyles"},borderRightWidth:{property:"borderRightWidth",scale:"borderWidths"},borderRightColor:{property:"borderRightColor",scale:"colors"},borderRightStyle:{property:"borderRightStyle",scale:"borderStyles"}});const ai=oi;var si={background:!0,backgroundImage:!0,backgroundSize:!0,backgroundPosition:!0,backgroundRepeat:!0};si.bgImage=si.backgroundImage,si.bgSize=si.backgroundSize,si.bgPosition=si.backgroundPosition,si.bgRepeat=si.backgroundRepeat;var ui=$r(si);const li=ui;var ci={space:[0,4,8,16,32,64,128,256,512]},fi=$r({position:!0,zIndex:{property:"zIndex",scale:"zIndices"},top:{property:"top",scale:"space",defaultScale:ci.space},right:{property:"right",scale:"space",defaultScale:ci.space},bottom:{property:"bottom",scale:"space",defaultScale:ci.space},left:{property:"left",scale:"space",defaultScale:ci.space}});const hi=fi;var pi={space:[0,4,8,16,32,64,128,256,512]},di=function(e){return"number"==typeof e&&!isNaN(e)},gi=function(e,t){if(!di(e))return zr(t,e,e);var n=e<0,r=Math.abs(e),i=zr(t,r,r);return di(i)?i*(n?-1:1):n?"-"+i:i},mi={};mi.margin={margin:{property:"margin",scale:"space",transform:gi,defaultScale:pi.space},marginTop:{property:"marginTop",scale:"space",transform:gi,defaultScale:pi.space},marginRight:{property:"marginRight",scale:"space",transform:gi,defaultScale:pi.space},marginBottom:{property:"marginBottom",scale:"space",transform:gi,defaultScale:pi.space},marginLeft:{property:"marginLeft",scale:"space",transform:gi,defaultScale:pi.space},marginX:{properties:["marginLeft","marginRight"],scale:"space",transform:gi,defaultScale:pi.space},marginY:{properties:["marginTop","marginBottom"],scale:"space",transform:gi,defaultScale:pi.space}},mi.margin.m=mi.margin.margin,mi.margin.mt=mi.margin.marginTop,mi.margin.mr=mi.margin.marginRight,mi.margin.mb=mi.margin.marginBottom,mi.margin.ml=mi.margin.marginLeft,mi.margin.mx=mi.margin.marginX,mi.margin.my=mi.margin.marginY,mi.padding={padding:{property:"padding",scale:"space",defaultScale:pi.space},paddingTop:{property:"paddingTop",scale:"space",defaultScale:pi.space},paddingRight:{property:"paddingRight",scale:"space",defaultScale:pi.space},paddingBottom:{property:"paddingBottom",scale:"space",defaultScale:pi.space},paddingLeft:{property:"paddingLeft",scale:"space",defaultScale:pi.space},paddingX:{properties:["paddingLeft","paddingRight"],scale:"space",defaultScale:pi.space},paddingY:{properties:["paddingTop","paddingBottom"],scale:"space",defaultScale:pi.space}},mi.padding.p=mi.padding.padding,mi.padding.pt=mi.padding.paddingTop,mi.padding.pr=mi.padding.paddingRight,mi.padding.pb=mi.padding.paddingBottom,mi.padding.pl=mi.padding.paddingLeft,mi.padding.px=mi.padding.paddingX,mi.padding.py=mi.padding.paddingY;var vi=qr($r(mi.margin),$r(mi.padding)),yi=$r({boxShadow:{property:"boxShadow",scale:"shadows"},textShadow:{property:"textShadow",scale:"shadows"}}),bi=function(e){var t,n,r=e.scale,i=e.prop,o=void 0===i?"variant":i,a=e.variants,s=void 0===a?{}:a,u=e.key;(n=Object.keys(s).length?function(e,t,n){return dt(zr(t,e,null))(n.theme)}:function(e,t){return zr(t,e,null)}).scale=r||u,n.defaults=s;var l=((t={})[o]=n,t);return Vr(l)},wi=bi({key:"buttons"}),ki=bi({key:"textStyles",prop:"textStyle"}),Si=bi({key:"colorStyles",prop:"colors"});Gr.width,Gr.height,Gr.minWidth,Gr.minHeight,Gr.maxWidth,Gr.maxHeight,Gr.size,Gr.verticalAlign,Gr.display,Gr.overflow,Gr.overflowX,Gr.overflowY,Jr.opacity,Zr.fontSize,Zr.fontFamily,Zr.fontWeight,Zr.lineHeight,Zr.textAlign,Zr.fontStyle,Zr.letterSpacing,ti.alignItems,ti.alignContent,ti.justifyItems,ti.justifyContent,ti.flexWrap,ti.flexDirection,ti.flex,ti.flexGrow,ti.flexShrink,ti.flexBasis,ti.justifySelf,ti.alignSelf,ti.order,ii.gridGap,ii.gridColumnGap,ii.gridRowGap,ii.gridColumn,ii.gridRow,ii.gridAutoFlow,ii.gridAutoColumns,ii.gridAutoRows,ii.gridTemplateColumns,ii.gridTemplateRows,ii.gridTemplateAreas,ii.gridArea,ai.borderWidth,ai.borderStyle,ai.borderColor,ai.borderTop,ai.borderRight,ai.borderBottom,ai.borderLeft,ai.borderRadius,li.backgroundImage,li.backgroundSize,li.backgroundPosition,li.backgroundRepeat,hi.zIndex,hi.top,hi.right,hi.bottom,hi.left;const Ei=(Ii=qr(vi,Qr,Yr,Kr,ei,oi,ui,fi,ri,yi,wi,ki,Si).propNames,Ci=new RegExp("^("+Ii.join("|")+")$"),O((function(e){return Lr(e)&&!Ci.test(e)}))),xi=dt({alignItems:"center",appearance:"none",paddingX:"32px",paddingY:"12px",borderRadius:"22px",outline:0,cursor:"pointer",backgroundColor:"white",border:"solid 1px #00acfb",color:"#00acfb","&:hover":{opacity:.5}});var Ii,Ci;const Ti=bi({prop:"variant",variants:{gradient:{color:"white",backgroundImage:"linear-gradient(180deg, #47FFC5 0%, #00ACFB 100%)",border:"none"}}}),_i=bi({prop:"fullWidth",variants:{true:{width:"100%"}}});var Oi=rt("button",{shouldForwardProp:Ei,target:"enn3cnr0"})(xi,Ti,_i,""),Ni=function(e){var t=e.nativeType,n=void 0===t?"":t,r=e.type,i=void 0===r?"default":r,o=e.fullWidth,a=e.children,s=mt(e,["nativeType","type","fullWidth","children"]);return bt(Oi,_({type:n,variant:i,fullWidth:o},s),a)};const Pi=Ni;Ni.propTypes={nativeType:En.string,type:En.string,fullWidth:En.bool};const Ai=Pi,Li=function(){var e=Ke().colors,t=T().i18n,n=t.language,r=function(e){t.changeLanguage(e)},i=function(t){return{cursor:"pointer",opacity:"".concat(n!==t?.5:e.$colorPrimary)}};return bt("div",{css:wt({color:"".concat(e.$colorPrimary),display:"flex"},"","")},bt("div",{css:i("en"),onClick:function(){return r("en")}},"EN"),bt("div",null,"|"),bt("div",{css:i("es"),onClick:function(){return r("es")}},"ES"))};var Ri="#00acfb",Di=rt("div",{target:"eqm02do3"})(dt({position:"fixed",top:"80px",right:"15px",border:"solid 1px ".concat(Ri),padding:"20px 30px",backgroundColor:"white",borderRadius:"8px",boxShadow:"0 15px 50px 0 rgb(101 103 106 / 30%)"}),""),ji=rt("span",{target:"eqm02do2"})(dt({color:"red",fontSize:"12px"}),""),Mi=rt("input",{target:"eqm02do1"})(dt({color:"".concat(Ri),backgroundColor:"unset",border:"solid 1px ".concat(Ri),padding:"10px 20px",outline:0}),""),Fi=rt("div",{target:"eqm02do0"})(dt({padding:"10px 0"}),"");const Ui=function(e){var t=e.handleSubmit,n=e.handleChange,r=e.inputs,i=e.errors,o=e.content;return bt(Di,null,bt("form",{onSubmit:t},bt(Fi,null,bt(Mi,{placeholder:o.email,type:"email",name:"email",onChange:n,value:r.email}),bt(ji,null,i.email)),bt(Fi,null,bt(Mi,{placeholder:o.password,type:"password",name:"password",onChange:n,value:r.password}),bt(ji,null,i.password)),bt(Fi,null,bt(Ai,{type:"submit",fullWidth:!0},o.submit))))};function zi(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Vi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?zi(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):zi(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const Hi=function(t){var n=t.setVisible,r=vr(),i=T().t,o=(0,e.useContext)(In),s=o.handleSignin,u=o.inputs,l=o.setInputs,c=o.errors,f=function(){var e=wn(Sn().mark((function e(t){return Sn().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t.preventDefault(),e.next=3,s();case 3:l({email:"",password:""}),n(!1),r.push("/");case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),h={email:i("loginView.loginForm.email"),password:i("loginView.loginForm.password"),submit:i("loginView.loginForm.submit")};return bt(Ui,{handleSubmit:f,handleChange:function(e){var t=e.target,n=t.name,r=t.value;l((function(e){return Vi(Vi({},e),{},a({},n,r))}))},inputs:u,errors:c,content:h})};var Bi=function(e){var t=e.text,n=e.onClick,r=void 0===n?function(){}:n,i=Ke().colors;return bt("div",{css:wt({color:"".concat(i.$colorPrimary),display:"flex",alignItems:"center",padding:"0 10px",cursor:"pointer","&:hover":{color:i.$colorSecondary}},"",""),onClick:function(){r()}},t)},Wi={name:"h6dasa",styles:"display:flex;align-items:center;padding:0 15px"},$i={name:"1j2h8sh",styles:"margin:0 15px 0 auto;display:flex;align-items:center"},qi={name:"1tufjfy",styles:"margin:0 15px 0 0;display:flex;align-items:center"};const Ki=function(){var t=Tn().token,n=Ke().colors,r=T().t,i=function(t){var n=y((0,e.useState)(!1),2),r=n[0],i=n[1],o=(0,e.useRef)(null),a=function(e){"Escape"===e.key&&i(!1)},s=function(e){o.current&&!o.current.contains(e.target)&&i(!1)};return(0,e.useEffect)((function(){return document.addEventListener("keydown",a,!0),document.addEventListener("click",s,!0),function(){document.removeEventListener("keydown",a,!0),document.removeEventListener("click",s,!0)}})),{ref:o,isComponentVisible:r,setIsComponentVisible:i}}(),o=i.ref,a=i.isComponentVisible,s=i.setIsComponentVisible,u=[{id:0,text:r("header.corporate"),onClick:function(){}},{id:1,text:r("header.coworkings"),onClick:function(){}},{id:2,text:r("header.subscriptions"),onClick:function(){}}],l=vr();return bt(e.Fragment,null,bt("div",{css:wt({boxShadow:"0 4px 12px 0 rgb(101 103 106 / 10%)",width:"100%",position:"fixed",top:0,height:"100px",display:"flex",backgroundColor:n.$white},"","")},bt("div",{css:Wi},bt(Pr,null),bt("div",{css:wt({color:"".concat(n.$colorPrimary),fontSize:"30px",paddingLeft:"5px",background:"linear-gradient(180deg, ".concat(n.$colorAccent," 0%, ").concat(n.$colorPrimary," 100%)"),WebkitBackgroundClip:"text",WebkitTextFillColor:"transparent"},"","")},"Capuccino!")),u.map((function(e){return bt(Bi,{key:e.id,text:e.text,onClick:e.onClick})})),bt("div",{css:$i},bt(Li,null)),bt("div",{css:qi},bt(Ai,{onClick:t?function(){return l.push(_r)}:s,type:"gradient"},t?"Logout":"Login"))),a&&bt("div",{ref:o},bt(Hi,{setVisible:s})))};var Gi=function(){return bt("div",null,"PORTAL COMPONENT")},Xi={name:"mainTheme",colors:{$colorPrimary:"#00acfb",$colorSecondary:"#30E4D7",$colorPrimaryDark:"#0035c6",$colorPrimaryLight:"#ff4dc7ff",$colorAccent:"#47ffc5",$colorAccentAlpha20:"#3347ffc5",$colorAccentDark:"#268164",$neon_pink:"#ff00ff",$colorPaypal:"#f6f7f8",$colorGoogle:"#b23121",$white:"#ffffff",$grey:"#767676",$grey_alpha:"#4d767676",$black:"#000000",$transparent:"#00000000"}},Yi={name:"8dqlir",styles:"padding-top:100px"};function Ji(e){return(Ji="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qi(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?Object(arguments[t]):{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){a(e,t,n[t])}))}return e}function Zi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function eo(e,t){return!t||"object"!==Ji(t)&&"function"!=typeof t?Zi(e):t}function to(e){return(to=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function no(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&On(e,t)}var ro={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){console&&console[e]&&console[e].apply(console,t)}},io=new(function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};r(this,e),this.init(t,n)}return o(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||ro,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,r){return r&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,Qi({},{prefix:"".concat(this.prefix,":").concat(t,":")},this.options))}}]),e}()),oo=function(){function e(){r(this,e),this.observers={}}return o(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(this.observers[e]){var i=[].concat(this.observers[e]);i.forEach((function(e){e.apply(void 0,n)}))}if(this.observers["*"]){var o=[].concat(this.observers["*"]);o.forEach((function(t){t.apply(t,[e].concat(n))}))}}}]),e}();function ao(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n}function so(e){return null==e?"":""+e}function uo(e,t,n){e.forEach((function(e){t[e]&&(n[e]=t[e])}))}function lo(e,t,n){function r(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function i(){return!e||"string"==typeof e}for(var o="string"!=typeof t?[].concat(t):t.split(".");o.length>1;){if(i())return{};var a=r(o.shift());!e[a]&&n&&(e[a]=new n),e=Object.prototype.hasOwnProperty.call(e,a)?e[a]:{}}return i()?{}:{obj:e,k:r(o.shift())}}function co(e,t,n){var r=lo(e,t,Object);r.obj[r.k]=n}function fo(e,t){var n=lo(e,t),r=n.obj,i=n.k;if(r)return r[i]}function ho(e,t,n){var r=fo(e,n);return void 0!==r?r:fo(t,n)}function po(e,t,n){for(var r in t)"__proto__"!==r&&"constructor"!==r&&(r in e?"string"==typeof e[r]||e[r]instanceof String||"string"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):po(e[r],t[r],n):e[r]=t[r]);return e}function go(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var mo={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function vo(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return mo[e]})):e}var yo="undefined"!=typeof window&&window.navigator&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,bo=function(e){function t(e){var n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return r(this,t),n=eo(this,to(t).call(this)),yo&&oo.call(Zi(n)),n.data=e||{},n.options=i,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n}return no(t,e),o(t,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,o=[e,t];return n&&"string"!=typeof n&&(o=o.concat(n)),n&&"string"==typeof n&&(o=o.concat(i?n.split(i):n)),e.indexOf(".")>-1&&(o=e.split(".")),fo(this.data,o)}},{key:"addResource",value:function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},o=this.options.keySeparator;void 0===o&&(o=".");var a=[e,t];n&&(a=a.concat(o?n.split(o):n)),e.indexOf(".")>-1&&(r=t,t=(a=e.split("."))[1]),this.addNamespaces(t),co(this.data,a,r),i.silent||this.emit("added",e,t,n,r)}},{key:"addResources",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var i in n)"string"!=typeof n[i]&&"[object Array]"!==Object.prototype.toString.apply(n[i])||this.addResource(e,t,i,n[i],{silent:!0});r.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[e,t];e.indexOf(".")>-1&&(r=n,n=t,t=(a=e.split("."))[1]),this.addNamespaces(t);var s=fo(this.data,a)||{};r?po(s,n,i):s=Qi({},s,n),co(this.data,a,s),o.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?Qi({},{},this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"toJSON",value:function(){return this.data}}]),t}(oo),wo={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,r,i){var o=this;return e.forEach((function(e){o.processors[e]&&(t=o.processors[e].process(t,n,r,i))})),t}},ko={},So=function(e){function t(e){var n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return r(this,t),n=eo(this,to(t).call(this)),yo&&oo.call(Zi(n)),uo(["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],e,Zi(n)),n.options=i,void 0===n.options.keySeparator&&(n.options.keySeparator="."),n.logger=io.create("translator"),n}return no(t,e),o(t,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}},n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,i=t.ns||this.options.defaultNS;if(n&&e.indexOf(n)>-1){var o=e.match(this.interpolator.nestingRegexp);if(o&&o.length>0)return{key:e,namespaces:i};var a=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(a[0])>-1)&&(i=a.shift()),e=a.join(r)}return"string"==typeof i&&(i=[i]),{key:e,namespaces:i}}},{key:"translate",value:function(e,t,n){var r=this;if("object"!==Ji(t)&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var i=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,o=this.extractFromKey(e[e.length-1],t),a=o.key,s=o.namespaces,u=s[s.length-1],l=t.lng||this.language,c=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(l&&"cimode"===l.toLowerCase()){if(c){var f=t.nsSeparator||this.options.nsSeparator;return u+f+a}return a}var h=this.resolve(e,t),p=h&&h.res,d=h&&h.usedKey||a,g=h&&h.exactUsedKey||a,m=Object.prototype.toString.apply(p),v=["[object Number]","[object Function]","[object RegExp]"],y=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,b=!this.i18nFormat||this.i18nFormat.handleAsObject,w="string"!=typeof p&&"boolean"!=typeof p&&"number"!=typeof p;if(b&&p&&w&&v.indexOf(m)<0&&("string"!=typeof y||"[object Array]"!==m)){if(!t.returnObjects&&!this.options.returnObjects)return this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(d,p,t):"key '".concat(a," (").concat(this.language,")' returned an object instead of string.");if(i){var k="[object Array]"===m,S=k?[]:{},E=k?g:d;for(var x in p)if(Object.prototype.hasOwnProperty.call(p,x)){var I="".concat(E).concat(i).concat(x);S[x]=this.translate(I,Qi({},t,{joinArrays:!1,ns:s})),S[x]===I&&(S[x]=p[x])}p=S}}else if(b&&"string"==typeof y&&"[object Array]"===m)(p=p.join(y))&&(p=this.extendTranslation(p,e,t,n));else{var C=!1,T=!1;if(!this.isValidLookup(p)&&void 0!==t.defaultValue){if(C=!0,void 0!==t.count){var _=this.pluralResolver.getSuffix(l,t.count);p=t["defaultValue".concat(_)]}p||(p=t.defaultValue)}this.isValidLookup(p)||(T=!0,p=a);var O=t.defaultValue&&t.defaultValue!==p&&this.options.updateMissing;if(T||C||O){if(this.logger.log(O?"updateKey":"missingKey",l,u,a,O?t.defaultValue:p),i){var N=this.resolve(a,Qi({},t,{keySeparator:!1}));N&&N.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var P=[],A=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&A&&A[0])for(var L=0;L<A.length;L++)P.push(A[L]);else"all"===this.options.saveMissingTo?P=this.languageUtils.toResolveHierarchy(t.lng||this.language):P.push(t.lng||this.language);var R=function(e,n){r.options.missingKeyHandler?r.options.missingKeyHandler(e,u,n,O?t.defaultValue:p,O,t):r.backendConnector&&r.backendConnector.saveMissing&&r.backendConnector.saveMissing(e,u,n,O?t.defaultValue:p,O,t),r.emit("missingKey",e,u,n,p)};if(this.options.saveMissing){var D=void 0!==t.count&&"string"!=typeof t.count;this.options.saveMissingPlurals&&D?P.forEach((function(e){r.pluralResolver.getPluralFormsOfKey(e,a).forEach((function(t){return R([e],t)}))})):R(P,a)}}p=this.extendTranslation(p,e,t,h,n),T&&p===a&&this.options.appendNamespaceToMissingKey&&(p="".concat(u,":").concat(a)),T&&this.options.parseMissingKeyHandler&&(p=this.options.parseMissingKeyHandler(p))}return p}},{key:"extendTranslation",value:function(e,t,n,r,i){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,n,r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(Qi({},n,{interpolation:Qi({},this.options.interpolation,n.interpolation)}));var a,s=n.interpolation&&n.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;if(s){var u=e.match(this.interpolator.nestingRegexp);a=u&&u.length}var l=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(l=Qi({},this.options.interpolation.defaultVariables,l)),e=this.interpolator.interpolate(e,l,n.lng||this.language,n),s){var c=e.match(this.interpolator.nestingRegexp);a<(c&&c.length)&&(n.nest=!1)}!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return i&&i[0]===r[0]&&!n.context?(o.logger.warn("It seems you are nesting recursively key: ".concat(r[0]," in key: ").concat(t[0])),null):o.translate.apply(o,r.concat([t]))}),n)),n.interpolation&&this.interpolator.reset()}var f=n.postProcess||this.options.postProcess,h="string"==typeof f?[f]:f;return null!=e&&h&&h.length&&!1!==n.applyPostProcessor&&(e=wo.handle(h,e,t,this.options&&this.options.postProcessPassResolved?Qi({i18nResolved:r},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,r,i,o,a=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!a.isValidLookup(t)){var u=a.extractFromKey(e,s),l=u.key;n=l;var c=u.namespaces;a.options.fallbackNS&&(c=c.concat(a.options.fallbackNS));var f=void 0!==s.count&&"string"!=typeof s.count,h=void 0!==s.context&&"string"==typeof s.context&&""!==s.context,p=s.lngs?s.lngs:a.languageUtils.toResolveHierarchy(s.lng||a.language,s.fallbackLng);c.forEach((function(e){a.isValidLookup(t)||(o=e,!ko["".concat(p[0],"-").concat(e)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(o)&&(ko["".concat(p[0],"-").concat(e)]=!0,a.logger.warn('key "'.concat(n,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(o,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(n){if(!a.isValidLookup(t)){i=n;var o,u,c=l,p=[c];for(a.i18nFormat&&a.i18nFormat.addLookupKeys?a.i18nFormat.addLookupKeys(p,l,n,e,s):(f&&(o=a.pluralResolver.getSuffix(n,s.count)),f&&h&&p.push(c+o),h&&p.push(c+="".concat(a.options.contextSeparator).concat(s.context)),f&&p.push(c+=o));u=p.pop();)a.isValidLookup(t)||(r=u,t=a.getResource(n,e,u,s))}})))}))}})),{res:t,usedKey:n,exactUsedKey:r,usedLng:i,usedNS:o}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}}]),t}(oo);function Eo(e){return e.charAt(0).toUpperCase()+e.slice(1)}var xo=function(){function e(t){r(this,e),this.options=t,this.whitelist=this.options.supportedLngs||!1,this.supportedLngs=this.options.supportedLngs||!1,this.logger=io.create("languageUtils")}return o(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=Eo(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=Eo(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=Eo(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isWhitelisted",value:function(e){return this.logger.deprecate("languageUtils.isWhitelisted",'function "isWhitelisted" will be renamed to "isSupportedCode" in the next major - please make sure to rename it\'s usage asap.'),this.isSupportedCode(e)}},{key:"isSupportedCode",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:"getBestMatchFromCodes",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var r=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(r)||(t=r)}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var r=n.getLanguagePartFromCode(e);if(n.isSupportedCode(r))return t=r;t=n.options.supportedLngs.find((function(e){if(0===e.indexOf(r))return e}))}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),i=[],o=function(e){e&&(n.isSupportedCode(e)?i.push(e):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&o(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&o(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&o(this.getLanguagePartFromCode(e))):"string"==typeof e&&o(this.formatLanguageCode(e)),r.forEach((function(e){i.indexOf(e)<0&&o(n.formatLanguageCode(e))})),i}}]),e}(),Io=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","kk","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],Co={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}};function To(){var e={};return Io.forEach((function(t){t.lngs.forEach((function(n){e[n]={numbers:t.nr,plurals:Co[t.fc]}}))})),e}var _o=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};r(this,e),this.languageUtils=t,this.options=n,this.logger=io.create("pluralResolver"),this.rules=To()}return o(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=this.getRule(e);return t&&t.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){var n=this,r=[],i=this.getRule(e);return i?(i.numbers.forEach((function(i){var o=n.getSuffix(e,i);r.push("".concat(t).concat(o))})),r):r}},{key:"getSuffix",value:function(e,t){var n=this,r=this.getRule(e);if(r){var i=r.noAbs?r.plurals(t):r.plurals(Math.abs(t)),o=r.numbers[i];this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]&&(2===o?o="plural":1===o&&(o=""));var a=function(){return n.options.prepend&&o.toString()?n.options.prepend+o.toString():o.toString()};return"v1"===this.options.compatibilityJSON?1===o?"":"number"==typeof o?"_plural_".concat(o.toString()):a():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]?a():this.options.prepend&&i.toString()?this.options.prepend+i.toString():i.toString()}return this.logger.warn("no plural rule found for: ".concat(e)),""}}]),e}(),Oo=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};r(this,e),this.logger=io.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return o(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:vo,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?go(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?go(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?go(t.nestingPrefix):t.nestingPrefixEscaped||go("$t("),this.nestingSuffix=t.nestingSuffix?go(t.nestingSuffix):t.nestingSuffixEscaped||go(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,r){var i,o,a,s=this,u=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}var c=function(e){if(e.indexOf(s.formatSeparator)<0){var i=ho(t,u,e);return s.alwaysFormat?s.format(i,void 0,n):i}var o=e.split(s.formatSeparator),a=o.shift().trim(),l=o.join(s.formatSeparator).trim();return s.format(ho(t,u,a),l,n,r)};this.resetRegExp();var f=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,h=r&&r.interpolation&&r.interpolation.skipOnVariables||this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(e){return l(e)}},{regex:this.regexp,safeValue:function(e){return s.escapeValue?l(s.escape(e)):l(e)}}].forEach((function(t){for(a=0;i=t.regex.exec(e);){if(void 0===(o=c(i[1].trim())))if("function"==typeof f){var n=f(e,i,r);o="string"==typeof n?n:""}else{if(h){o=i[0];continue}s.logger.warn("missed to pass in variable ".concat(i[1]," for interpolating ").concat(e)),o=""}else"string"==typeof o||s.useRawValueToEscape||(o=so(o));if(e=e.replace(i[0],t.safeValue(o)),t.regex.lastIndex=0,++a>=s.maxReplaces)break}})),e}},{key:"nest",value:function(e,t){var n,r,i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=Qi({},o);function s(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var r=e.split(new RegExp("".concat(n,"[ ]*{"))),i="{".concat(r[1]);e=r[0],i=(i=this.interpolate(i,a)).replace(/'/g,'"');try{a=JSON.parse(i),t&&(a=Qi({},t,a))}catch(t){return this.logger.warn("failed parsing options string in nesting for key ".concat(e),t),"".concat(e).concat(n).concat(i)}return delete a.defaultValue,e}for(a.applyPostProcessor=!1,delete a.defaultValue;n=this.nestingRegexp.exec(e);){var u=[],l=!1;if(n[0].includes(this.formatSeparator)&&!/{.*}/.test(n[1])){var c=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=c.shift(),u=c,l=!0}if((r=t(s.call(this,n[1].trim(),a),a))&&n[0]===e&&"string"!=typeof r)return r;"string"!=typeof r&&(r=so(r)),r||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),r=""),l&&(r=u.reduce((function(e,t){return i.format(e,t,o.lng,o)}),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0}return e}}]),e}(),No=function(e){function t(e,n,i){var o,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return r(this,t),o=eo(this,to(t).call(this)),yo&&oo.call(Zi(o)),o.backend=e,o.store=n,o.services=i,o.languageUtils=i.languageUtils,o.options=a,o.logger=io.create("backendConnector"),o.state={},o.queue=[],o.backend&&o.backend.init&&o.backend.init(i,a.backend,a),o}return no(t,e),o(t,[{key:"queueLoad",value:function(e,t,n,r){var i=this,o=[],a=[],s=[],u=[];return e.forEach((function(e){var r=!0;t.forEach((function(t){var s="".concat(e,"|").concat(t);!n.reload&&i.store.hasResourceBundle(e,t)?i.state[s]=2:i.state[s]<0||(1===i.state[s]?a.indexOf(s)<0&&a.push(s):(i.state[s]=1,r=!1,a.indexOf(s)<0&&a.push(s),o.indexOf(s)<0&&o.push(s),u.indexOf(t)<0&&u.push(t)))})),r||s.push(e)})),(o.length||a.length)&&this.queue.push({pending:a,loaded:{},errors:[],callback:r}),{toLoad:o,pending:a,toLoadLanguages:s,toLoadNamespaces:u}}},{key:"loaded",value:function(e,t,n){var r=e.split("|"),i=r[0],o=r[1];t&&this.emit("failedLoading",i,o,t),n&&this.store.addResourceBundle(i,o,n),this.state[e]=t?-1:2;var a={};this.queue.forEach((function(n){!function(e,t,n,r){var i=lo(e,t,Object),o=i.obj,a=i.k;o[a]=o[a]||[],o[a].push(n)}(n.loaded,[i],o),function(e,t){for(var n=e.indexOf(t);-1!==n;)e.splice(n,1),n=e.indexOf(t)}(n.pending,e),t&&n.errors.push(t),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach((function(e){a[e]||(a[e]=[]),n.loaded[e].length&&n.loaded[e].forEach((function(t){a[e].indexOf(t)<0&&a[e].push(t)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var r=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:350,a=arguments.length>5?arguments[5]:void 0;return e.length?this.backend[n](e,t,(function(s,u){s&&u&&i<5?setTimeout((function(){r.read.call(r,e,t,n,i+1,2*o,a)}),o):a(s,u)})):a(null,{})}},{key:"prepareLoading",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),i&&i();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var o=this.queueLoad(e,t,r,i);if(!o.toLoad.length)return o.pending.length||i(),null;o.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=e.split("|"),i=r[0],o=r[1];this.read(i,o,"read",void 0,void 0,(function(r,a){r&&t.logger.warn("".concat(n,"loading namespace ").concat(o," for language ").concat(i," failed"),r),!r&&a&&t.logger.log("".concat(n,"loaded namespace ").concat(o," for language ").concat(i),a),t.loaded(e,r,a)}))}},{key:"saveMissing",value:function(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t)?this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(t,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!"):null!=n&&""!==n&&(this.backend&&this.backend.create&&this.backend.create(e,t,n,r,null,Qi({},o,{isUpdate:i})),e&&e[0]&&this.store.addResource(e[0],t,n,r))}}]),t}(oo);function Po(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,whitelist:!1,nonExplicitWhitelist:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===Ji(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===Ji(e[2])||"object"===Ji(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n,r){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!1}}}function Ao(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.whitelist&&(e.whitelist&&e.whitelist.indexOf("cimode")<0&&(e.whitelist=e.whitelist.concat(["cimode"])),e.supportedLngs=e.whitelist),e.nonExplicitWhitelist&&(e.nonExplicitSupportedLngs=e.nonExplicitWhitelist),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function Lo(){}const Ro=new(function(e){function t(){var e,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1?arguments[1]:void 0;if(r(this,t),e=eo(this,to(t).call(this)),yo&&oo.call(Zi(e)),e.options=Ao(n),e.services={},e.logger=io,e.modules={external:[]},i&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,i),eo(e,Zi(e));setTimeout((function(){e.init(n,i)}),0)}return e}return no(t,e),o(t,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;function r(e){return e?"function"==typeof e?new e:e:null}if("function"==typeof t&&(n=t,t={}),t.whitelist&&!t.supportedLngs&&this.logger.deprecate("whitelist",'option "whitelist" will be renamed to "supportedLngs" in the next major - please make sure to rename this option asap.'),t.nonExplicitWhitelist&&!t.nonExplicitSupportedLngs&&this.logger.deprecate("whitelist",'options "nonExplicitWhitelist" will be renamed to "nonExplicitSupportedLngs" in the next major - please make sure to rename this option asap.'),this.options=Qi({},Po(),this.options,Ao(t)),this.format=this.options.interpolation.format,n||(n=Lo),!this.options.isClone){this.modules.logger?io.init(r(this.modules.logger),this.options):io.init(null,this.options);var i=new xo(this.options);this.store=new bo(this.options.resources,this.options);var o=this.services;o.logger=io,o.resourceStore=this.store,o.languageUtils=i,o.pluralResolver=new _o(i,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),o.interpolator=new Oo(this.options),o.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},o.backendConnector=new No(r(this.modules.backend),o.resourceStore,o,this.options),o.backendConnector.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e.emit.apply(e,[t].concat(r))})),this.modules.languageDetector&&(o.languageDetector=r(this.modules.languageDetector),o.languageDetector.init(o,this.options.detection,this.options)),this.modules.i18nFormat&&(o.i18nFormat=r(this.modules.i18nFormat),o.i18nFormat.init&&o.i18nFormat.init(this)),this.translator=new So(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e.emit.apply(e,[t].concat(r))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}if(this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var a=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);a.length>0&&"dev"!==a[0]&&(this.options.lng=a[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined");var s=["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"];s.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}}));var u=["addResource","addResources","addResourceBundle","removeResourceBundle"];u.forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments),e}}));var l=ao(),c=function(){e.changeLanguage(e.options.lng,(function(t,r){e.isInitialized=!0,e.options.isClone||e.logger.log("initialized",e.options),e.emit("initialized",e.options),l.resolve(r),n(t,r)}))};return this.options.resources||!this.options.initImmediate?c():setTimeout(c,0),l}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Lo,r=n,i="string"==typeof e?e:this.language;if("function"==typeof e&&(r=e),!this.options.resources||this.options.partialBundledLanguages){if(i&&"cimode"===i.toLowerCase())return r();var o=[],a=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){o.indexOf(e)<0&&o.push(e)}))};if(i)a(i);else{var s=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);s.forEach((function(e){return a(e)}))}this.options.preload&&this.options.preload.forEach((function(e){return a(e)})),this.services.backendConnector.load(o,this.options.ns,r)}else r(null)}},{key:"reloadResources",value:function(e,t,n){var r=ao();return e||(e=this.languages),t||(t=this.options.ns),n||(n=Lo),this.services.backendConnector.reload(e,t,(function(e){r.resolve(),n(e)})),r}},{key:"use",value:function(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&wo.addPostProcessor(e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var r=ao();this.emit("languageChanging",e);var i=function(e){var i="string"==typeof e?e:n.services.languageUtils.getBestMatchFromCodes(e);i&&(n.language||(n.language=i,n.languages=n.services.languageUtils.toResolveHierarchy(i)),n.translator.language||n.translator.changeLanguage(i),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(i)),n.loadResources(i,(function(e){!function(e,i){i?(n.language=i,n.languages=n.services.languageUtils.toResolveHierarchy(i),n.translator.changeLanguage(i),n.isLanguageChangingTo=void 0,n.emit("languageChanged",i),n.logger.log("languageChanged",i)):n.isLanguageChangingTo=void 0,r.resolve((function(){return n.t.apply(n,arguments)})),t&&t(e,(function(){return n.t.apply(n,arguments)}))}(e,i)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(i):i(e):i(this.services.languageDetector.detect()),r}},{key:"getFixedT",value:function(e,t){var n=this,r=function e(t,r){var i;if("object"!==Ji(r)){for(var o=arguments.length,a=new Array(o>2?o-2:0),s=2;s<o;s++)a[s-2]=arguments[s];i=n.options.overloadTranslationOptionHandler([t,r].concat(a))}else i=Qi({},r);return i.lng=i.lng||e.lng,i.lngs=i.lngs||e.lngs,i.ns=i.ns||e.ns,n.t(t,i)};return"string"==typeof e?r.lng=e:r.lngs=e,r.ns=t,r}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var r=this.languages[0],i=!!this.options&&this.options.fallbackLng,o=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};if(n.precheck){var s=n.precheck(this,a);if(void 0!==s)return s}return!!this.hasResourceBundle(r,e)||!this.services.backendConnector.backend||!(!a(r,e)||i&&!a(o,e))}},{key:"loadNamespaces",value:function(e,t){var n=this,r=ao();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=ao();"string"==typeof e&&(e=[e]);var r=this.options.preload||[],i=e.filter((function(e){return r.indexOf(e)<0}));return i.length?(this.options.preload=r.concat(i),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){return e||(e=this.languages&&this.languages.length>0?this.languages[0]:this.language),e?["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam"].indexOf(this.services.languageUtils.getLanguagePartFromCode(e))>=0?"rtl":"ltr":"rtl"}},{key:"createInstance",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;return new t(e,n)}},{key:"cloneInstance",value:function(){var e=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Lo,i=Qi({},this.options,n,{isClone:!0}),o=new t(i),a=["store","services","language"];return a.forEach((function(t){o[t]=e[t]})),o.services=Qi({},this.services),o.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o.translator=new So(o.services,o.options),o.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];o.emit.apply(o,[e].concat(n))})),o.init(i,r),o.translator.options=o.options,o.translator.backendConnector.services.utils={hasLoadedNamespace:o.hasLoadedNamespace.bind(o)},o}}]),t}(oo));var Do=[],jo=Do.forEach,Mo=Do.slice;function Fo(e){return jo.call(Mo.call(arguments,1),(function(t){if(t)for(var n in t)void 0===e[n]&&(e[n]=t[n])})),e}var Uo=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/,zo=function(e,t,n){var r=n||{};r.path=r.path||"/";var i=e+"="+encodeURIComponent(t);if(r.maxAge>0){var o=r.maxAge-0;if(isNaN(o))throw new Error("maxAge should be a Number");i+="; Max-Age="+Math.floor(o)}if(r.domain){if(!Uo.test(r.domain))throw new TypeError("option domain is invalid");i+="; Domain="+r.domain}if(r.path){if(!Uo.test(r.path))throw new TypeError("option path is invalid");i+="; Path="+r.path}if(r.expires){if("function"!=typeof r.expires.toUTCString)throw new TypeError("option expires is invalid");i+="; Expires="+r.expires.toUTCString()}if(r.httpOnly&&(i+="; HttpOnly"),r.secure&&(i+="; Secure"),r.sameSite)switch("string"==typeof r.sameSite?r.sameSite.toLowerCase():r.sameSite){case!0:i+="; SameSite=Strict";break;case"lax":i+="; SameSite=Lax";break;case"strict":i+="; SameSite=Strict";break;case"none":i+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}return i},Vo={name:"cookie",lookup:function(e){var t;if(e.lookupCookie&&"undefined"!=typeof document){var n=function(e){for(var t=e+"=",n=document.cookie.split(";"),r=0;r<n.length;r++){for(var i=n[r];" "===i.charAt(0);)i=i.substring(1,i.length);if(0===i.indexOf(t))return i.substring(t.length,i.length)}return null}(e.lookupCookie);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupCookie&&"undefined"!=typeof document&&function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{path:"/",sameSite:"strict"};n&&(i.expires=new Date,i.expires.setTime(i.expires.getTime()+60*n*1e3)),r&&(i.domain=r),document.cookie=zo(e,encodeURIComponent(t),i)}(t.lookupCookie,e,t.cookieMinutes,t.cookieDomain,t.cookieOptions)}},Ho={name:"querystring",lookup:function(e){var t;if("undefined"!=typeof window)for(var n=window.location.search.substring(1).split("&"),r=0;r<n.length;r++){var i=n[r].indexOf("=");i>0&&n[r].substring(0,i)===e.lookupQuerystring&&(t=n[r].substring(i+1))}return t}},Bo=null,Wo=function(){if(null!==Bo)return Bo;try{Bo="undefined"!==window&&null!==window.localStorage;var e="i18next.translate.boo";window.localStorage.setItem(e,"foo"),window.localStorage.removeItem(e)}catch(e){Bo=!1}return Bo},$o={name:"localStorage",lookup:function(e){var t;if(e.lookupLocalStorage&&Wo()){var n=window.localStorage.getItem(e.lookupLocalStorage);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupLocalStorage&&Wo()&&window.localStorage.setItem(t.lookupLocalStorage,e)}},qo=null,Ko=function(){if(null!==qo)return qo;try{qo="undefined"!==window&&null!==window.sessionStorage;var e="i18next.translate.boo";window.sessionStorage.setItem(e,"foo"),window.sessionStorage.removeItem(e)}catch(e){qo=!1}return qo},Go={name:"sessionStorage",lookup:function(e){var t;if(e.lookupSessionStorage&&Ko()){var n=window.sessionStorage.getItem(e.lookupSessionStorage);n&&(t=n)}return t},cacheUserLanguage:function(e,t){t.lookupSessionStorage&&Ko()&&window.sessionStorage.setItem(t.lookupSessionStorage,e)}},Xo={name:"navigator",lookup:function(e){var t=[];if("undefined"!=typeof navigator){if(navigator.languages)for(var n=0;n<navigator.languages.length;n++)t.push(navigator.languages[n]);navigator.userLanguage&&t.push(navigator.userLanguage),navigator.language&&t.push(navigator.language)}return t.length>0?t:void 0}},Yo={name:"htmlTag",lookup:function(e){var t,n=e.htmlTag||("undefined"!=typeof document?document.documentElement:null);return n&&"function"==typeof n.getAttribute&&(t=n.getAttribute("lang")),t}},Jo={name:"path",lookup:function(e){var t;if("undefined"!=typeof window){var n=window.location.pathname.match(/\/([a-zA-Z-]*)/g);if(n instanceof Array)if("number"==typeof e.lookupFromPathIndex){if("string"!=typeof n[e.lookupFromPathIndex])return;t=n[e.lookupFromPathIndex].replace("/","")}else t=n[0].replace("/","")}return t}},Qo={name:"subdomain",lookup:function(e){var t;if("undefined"!=typeof window){var n=window.location.href.match(/(?:http[s]*\:\/\/)*(.*?)\.(?=[^\/]*\..{2,5})/gi);n instanceof Array&&(t="number"==typeof e.lookupFromSubdomainIndex?n[e.lookupFromSubdomainIndex].replace("http://","").replace("https://","").replace(".",""):n[0].replace("http://","").replace("https://","").replace(".",""))}return t}},Zo=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};r(this,e),this.type="languageDetector",this.detectors={},this.init(t,n)}return o(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.services=e,this.options=Fo(t,this.options||{},{order:["querystring","cookie","localStorage","sessionStorage","navigator","htmlTag"],lookupQuerystring:"lng",lookupCookie:"i18next",lookupLocalStorage:"i18nextLng",lookupSessionStorage:"i18nextLng",caches:["localStorage"],excludeCacheFor:["cimode"]}),this.options.lookupFromUrlIndex&&(this.options.lookupFromPathIndex=this.options.lookupFromUrlIndex),this.i18nOptions=n,this.addDetector(Vo),this.addDetector(Ho),this.addDetector($o),this.addDetector(Go),this.addDetector(Xo),this.addDetector(Yo),this.addDetector(Jo),this.addDetector(Qo)}},{key:"addDetector",value:function(e){this.detectors[e.name]=e}},{key:"detect",value:function(e){var t=this;e||(e=this.options.order);var n=[];return e.forEach((function(e){if(t.detectors[e]){var r=t.detectors[e].lookup(t.options);r&&"string"==typeof r&&(r=[r]),r&&(n=n.concat(r))}})),this.services.languageUtils.getBestMatchFromCodes?n:n.length>0?n[0]:null}},{key:"cacheUserLanguage",value:function(e,t){var n=this;t||(t=this.options.caches),t&&(this.options.excludeCacheFor&&this.options.excludeCacheFor.indexOf(e)>-1||t.forEach((function(t){n.detectors[t]&&n.detectors[t].cacheUserLanguage(e,n.options)})))}}]),e}();Zo.type="languageDetector";const ea=Zo,ta=JSON.parse('{"translations":{"welcome":{"react":"Welcome to React y react-i18next!!"},"title":"Title translated 2","header":{"corporate":"Corporate","coworkings":"Coworkings","subscriptions":"Subscriptions"},"loginView":{"valueProp":"Giving an easy and flexible work spot to decentralized teams","youWillKnowMoreShortly":"You will know more shortly...","loginForm":{"email":"Email","password":"Password","submit":"Submit"}}}}'),na=JSON.parse('{"translations":{"welcome":{"react":"Bienvenido a React y react-i18next!!"},"title":"Título","header":{"corporate":"Corporativo","coworkings":"Coworkings","subscriptions":"Subscripciones"},"loginView":{"valueProp":"Un lugar de trabajo fácil y flexible para equipos descentralizados","youWillKnowMoreShortly":"Podrás saber más pronto...","loginForm":{"email":"Email","password":"Contraseña","submit":"Enviar"}}}}');Ro.use(ea).use(g).init({resources:{en:ta,es:na},lng:"en",fallbackLng:"en",debug:!0,ns:["translations"],defaultNS:"translations",keySeparator:".",interpolation:{escapeValue:!1,formatSeparator:","},react:{wait:!0,bindI18n:"languageChanged loaded",bindStore:"added removed",nsMode:"default",useSuspense:!1}});const ra=Ro;t.render(bt(e.StrictMode,null,bt((function(t){var n=t.i18n,r=t.defaultNS,i=t.children,o=(0,e.useMemo)((function(){return{i18n:n,defaultNS:r}}),[n,r]);return(0,e.createElement)(f.Provider,{value:o},i)}),{i18n:ra},bt((function(){return bt(e.Fragment,null,bt(Xe,{theme:Xi},bt(yr,null,bt(Cn,null,bt(e.Fragment,null,bt(Ki,null),bt("div",{css:Yi},bt(gr,null,bt(Nr,{path:Tr,component:vn}),bt(Or,{exact:!0,path:_r,component:_n}),bt(Or,{exact:!0,path:"/",component:Gi}))))))))}),null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,